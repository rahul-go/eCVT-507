
eCVT 507.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b8  00802000  00001c68  00001cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000253  008021b8  008021b8  00001eb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ee4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006096  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000334f  00000000  00000000  000081a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001543  00000000  00000000  0000b4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f8  00000000  00000000  0000ca34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003664  00000000  00000000  0000d12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e41  00000000  00000000  00010790  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000115d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
       4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      38:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      40:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      44:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      4c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      58:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      5c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      60:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      64:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      68:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      6c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      70:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      74:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      78:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      7c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      80:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      84:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      88:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      8c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      90:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      94:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      98:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      9c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ac:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_43>
      b0:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_44>
      b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c4:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_49>
      c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     100:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     104:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     108:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     10c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     110:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     114:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     118:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     11c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     120:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     124:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     128:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     12c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     130:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     134:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     138:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     13c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     140:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     144:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     148:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     14c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     150:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     154:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     158:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     15c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     160:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     164:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     168:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     16c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     170:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     174:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     178:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     17c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     180:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     184:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     188:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     18c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     190:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     194:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     198:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     19c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <_GLOBAL__sub_I_ePID>

00000200 <__ctors_start>:
     200:	f2 07       	cpc	r31, r18

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf ef       	ldi	r28, 0xFF	; 255
     208:	cd bf       	out	0x3d, r28	; 61
     20a:	df e3       	ldi	r29, 0x3F	; 63
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	00 e0       	ldi	r16, 0x00	; 0
     210:	0c bf       	out	0x3c, r16	; 60
     212:	18 be       	out	0x38, r1	; 56
     214:	19 be       	out	0x39, r1	; 57
     216:	1a be       	out	0x3a, r1	; 58
     218:	1b be       	out	0x3b, r1	; 59

0000021a <__do_copy_data>:
     21a:	11 e2       	ldi	r17, 0x21	; 33
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	e8 e6       	ldi	r30, 0x68	; 104
     222:	fc e1       	ldi	r31, 0x1C	; 28
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	a8 3b       	cpi	r26, 0xB8	; 184
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>
     234:	1b be       	out	0x3b, r1	; 59

00000236 <__do_clear_bss>:
     236:	24 e2       	ldi	r18, 0x24	; 36
     238:	a8 eb       	ldi	r26, 0xB8	; 184
     23a:	b1 e2       	ldi	r27, 0x21	; 33
     23c:	01 c0       	rjmp	.+2      	; 0x240 <.do_clear_bss_start>

0000023e <.do_clear_bss_loop>:
     23e:	1d 92       	st	X+, r1

00000240 <.do_clear_bss_start>:
     240:	ab 30       	cpi	r26, 0x0B	; 11
     242:	b2 07       	cpc	r27, r18
     244:	e1 f7       	brne	.-8      	; 0x23e <.do_clear_bss_loop>

00000246 <__do_global_ctors>:
     246:	11 e0       	ldi	r17, 0x01	; 1
     248:	c1 e0       	ldi	r28, 0x01	; 1
     24a:	d1 e0       	ldi	r29, 0x01	; 1
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	06 c0       	rjmp	.+12     	; 0x25c <__do_global_ctors+0x16>
     250:	21 97       	sbiw	r28, 0x01	; 1
     252:	01 09       	sbc	r16, r1
     254:	80 2f       	mov	r24, r16
     256:	fe 01       	movw	r30, r28
     258:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__tablejump2__>
     25c:	c0 30       	cpi	r28, 0x00	; 0
     25e:	d1 07       	cpc	r29, r17
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 07       	cpc	r16, r24
     264:	a9 f7       	brne	.-22     	; 0x250 <__do_global_ctors+0xa>
     266:	0e 94 1e 07 	call	0xe3c	; 0xe3c <main>
     26a:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <_exit>

0000026e <__bad_interrupt>:
     26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <_ZN7EncoderC1E3PinS0_>:
 *				and event channel to be chosen independently by the user via
 *				parameters in the constructor.
 *  @param		ENC_A The first signal pin of the encoder.
 *	@param		ENC_B The second signal pin of the encoder.
 */
Encoder::Encoder(Pin ENC_A, Pin ENC_B) {
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	2a 97       	sbiw	r28, 0x0a	; 10
     280:	cd bf       	out	0x3d, r28	; 61
     282:	de bf       	out	0x3e, r29	; 62
     284:	8b 83       	std	Y+3, r24	; 0x03
     286:	9c 83       	std	Y+4, r25	; 0x04
     288:	4d 83       	std	Y+5, r20	; 0x05
     28a:	5e 83       	std	Y+6, r21	; 0x06
     28c:	6f 83       	std	Y+7, r22	; 0x07
     28e:	08 87       	std	Y+8, r16	; 0x08
     290:	19 87       	std	Y+9, r17	; 0x09
     292:	2a 87       	std	Y+10, r18	; 0x0a

	this->ENC_A = ENC_A;
     294:	2b 81       	ldd	r18, Y+3	; 0x03
     296:	3c 81       	ldd	r19, Y+4	; 0x04
     298:	8d 81       	ldd	r24, Y+5	; 0x05
     29a:	9e 81       	ldd	r25, Y+6	; 0x06
     29c:	af 81       	ldd	r26, Y+7	; 0x07
     29e:	f9 01       	movw	r30, r18
     2a0:	80 83       	st	Z, r24
     2a2:	91 83       	std	Z+1, r25	; 0x01
     2a4:	a2 83       	std	Z+2, r26	; 0x02
	this->ENC_B = ENC_B;
     2a6:	2b 81       	ldd	r18, Y+3	; 0x03
     2a8:	3c 81       	ldd	r19, Y+4	; 0x04
     2aa:	88 85       	ldd	r24, Y+8	; 0x08
     2ac:	99 85       	ldd	r25, Y+9	; 0x09
     2ae:	aa 85       	ldd	r26, Y+10	; 0x0a
     2b0:	f9 01       	movw	r30, r18
     2b2:	83 83       	std	Z+3, r24	; 0x03
     2b4:	94 83       	std	Z+4, r25	; 0x04
     2b6:	a5 83       	std	Z+5, r26	; 0x05

	// Port Setup
	ENC_A.PORT->DIRCLR = (ENC_A.PIN_BM | ENC_B.PIN_BM);
     2b8:	8d 81       	ldd	r24, Y+5	; 0x05
     2ba:	9e 81       	ldd	r25, Y+6	; 0x06
     2bc:	3f 81       	ldd	r19, Y+7	; 0x07
     2be:	2a 85       	ldd	r18, Y+10	; 0x0a
     2c0:	23 2b       	or	r18, r19
     2c2:	fc 01       	movw	r30, r24
     2c4:	22 83       	std	Z+2, r18	; 0x02

	/* Set QDPH0 and QDPH1 sensing level. */
	PORTCFG.MPCMASK |= (ENC_A.PIN_BM);
     2c6:	80 eb       	ldi	r24, 0xB0	; 176
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	20 eb       	ldi	r18, 0xB0	; 176
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	f9 01       	movw	r30, r18
     2d0:	30 81       	ld	r19, Z
     2d2:	2f 81       	ldd	r18, Y+7	; 0x07
     2d4:	23 2b       	or	r18, r19
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
	PORTCFG.MPCMASK |= (ENC_B.PIN_BM);
     2da:	80 eb       	ldi	r24, 0xB0	; 176
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	20 eb       	ldi	r18, 0xB0	; 176
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	f9 01       	movw	r30, r18
     2e4:	30 81       	ld	r19, Z
     2e6:	2a 85       	ldd	r18, Y+10	; 0x0a
     2e8:	23 2b       	or	r18, r19
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
	ENC_A.PORT->PIN0CTRL = (ENC_A.PORT->PIN0CTRL & ~PORT_ISC_gm) | PORT_ISC_LEVEL_gc;
     2ee:	8d 81       	ldd	r24, Y+5	; 0x05
     2f0:	9e 81       	ldd	r25, Y+6	; 0x06
     2f2:	2d 81       	ldd	r18, Y+5	; 0x05
     2f4:	3e 81       	ldd	r19, Y+6	; 0x06
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 89       	ldd	r18, Z+16	; 0x10
     2fa:	28 7f       	andi	r18, 0xF8	; 248
     2fc:	23 60       	ori	r18, 0x03	; 3
     2fe:	fc 01       	movw	r30, r24
     300:	20 8b       	std	Z+16, r18	; 0x10

	// Event System Setup
    uint8_t pin = 0;
     302:	19 82       	std	Y+1, r1	; 0x01
    uint8_t pin_bm = ENC_A.PIN_BM;
     304:	8f 81       	ldd	r24, Y+7	; 0x07
     306:	8a 83       	std	Y+2, r24	; 0x02
    while (pin_bm) {
     308:	8a 81       	ldd	r24, Y+2	; 0x02
     30a:	88 23       	and	r24, r24
     30c:	51 f0       	breq	.+20     	; 0x322 <_ZN7EncoderC1E3PinS0_+0xb0>
    	pin_bm >>= 1;
     30e:	8a 81       	ldd	r24, Y+2	; 0x02
     310:	88 2f       	mov	r24, r24
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	8a 83       	std	Y+2, r24	; 0x02
    	pin++;
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	8f 5f       	subi	r24, 0xFF	; 255
     31e:	89 83       	std	Y+1, r24	; 0x01
	ENC_A.PORT->PIN0CTRL = (ENC_A.PORT->PIN0CTRL & ~PORT_ISC_gm) | PORT_ISC_LEVEL_gc;

	// Event System Setup
    uint8_t pin = 0;
    uint8_t pin_bm = ENC_A.PIN_BM;
    while (pin_bm) {
     320:	f3 cf       	rjmp	.-26     	; 0x308 <_ZN7EncoderC1E3PinS0_+0x96>
    	pin_bm >>= 1;
    	pin++;
    }
	// Primary Encoder
	if (ENC_A.PIN_BM == P_ENC_A.PIN_BM) {
     322:	9f 81       	ldd	r25, Y+7	; 0x07
     324:	80 e1       	ldi	r24, 0x10	; 16
     326:	98 17       	cp	r25, r24
     328:	51 f4       	brne	.+20     	; 0x33e <_ZN7EncoderC1E3PinS0_+0xcc>
		EVSYS.CH2MUX = pin;
     32a:	80 e8       	ldi	r24, 0x80	; 128
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	29 81       	ldd	r18, Y+1	; 0x01
     330:	fc 01       	movw	r30, r24
     332:	22 83       	std	Z+2, r18	; 0x02
		EVSYS.CH2CTRL = EVSYS_QDEN_bm | EVSYS_DIGFILT_2SAMPLES_gc;
     334:	80 e8       	ldi	r24, 0x80	; 128
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	29 e0       	ldi	r18, 0x09	; 9
     33a:	fc 01       	movw	r30, r24
     33c:	22 87       	std	Z+10, r18	; 0x0a
	}
	// Secondary Encoder
	if (ENC_A.PIN_BM == S_ENC_A.PIN_BM) {
     33e:	9f 81       	ldd	r25, Y+7	; 0x07
     340:	80 e4       	ldi	r24, 0x40	; 64
     342:	98 17       	cp	r25, r24
     344:	51 f4       	brne	.+20     	; 0x35a <_ZN7EncoderC1E3PinS0_+0xe8>
		EVSYS.CH3MUX = pin;
     346:	80 e8       	ldi	r24, 0x80	; 128
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	29 81       	ldd	r18, Y+1	; 0x01
     34c:	fc 01       	movw	r30, r24
     34e:	23 83       	std	Z+3, r18	; 0x03
		EVSYS.CH3CTRL = EVSYS_QDEN_bm | EVSYS_DIGFILT_2SAMPLES_gc;
     350:	80 e8       	ldi	r24, 0x80	; 128
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	29 e0       	ldi	r18, 0x09	; 9
     356:	fc 01       	movw	r30, r24
     358:	23 87       	std	Z+11, r18	; 0x0b
	}
	
	// TC Setup
	/* Handled in TC_Config files. */

}
     35a:	00 00       	nop
     35c:	2a 96       	adiw	r28, 0x0a	; 10
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	de bf       	out	0x3e, r29	; 62
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret

0000036c <_ZN7Encoder4readEv>:
/** @brief		Return the encoder position.
 *  @details	This function retrieves the timer count and returns it as an
 *				unsigned 16-bit number representing the encoder position.
 *  @return		The encoder position in ticks as an unsigned 16-bit number.
 */
uint16_t Encoder::read() {
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	1f 92       	push	r1
     372:	1f 92       	push	r1
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	89 83       	std	Y+1, r24	; 0x01
     37a:	9a 83       	std	Y+2, r25	; 0x02
	// Primary Encoder
	if (ENC_A.PIN_BM == P_ENC_A.PIN_BM) {
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	9a 81       	ldd	r25, Y+2	; 0x02
     380:	fc 01       	movw	r30, r24
     382:	92 81       	ldd	r25, Z+2	; 0x02
     384:	80 e1       	ldi	r24, 0x10	; 16
     386:	98 17       	cp	r25, r24
     388:	31 f4       	brne	.+12     	; 0x396 <_ZN7Encoder4readEv+0x2a>
		return TCD0.CNT;
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	99 e0       	ldi	r25, 0x09	; 9
     38e:	fc 01       	movw	r30, r24
     390:	80 a1       	ldd	r24, Z+32	; 0x20
     392:	91 a1       	ldd	r25, Z+33	; 0x21
     394:	0d c0       	rjmp	.+26     	; 0x3b0 <_ZN7Encoder4readEv+0x44>
	}
	// Secondary Encoder
	if (ENC_A.PIN_BM == S_ENC_A.PIN_BM) {
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	fc 01       	movw	r30, r24
     39c:	92 81       	ldd	r25, Z+2	; 0x02
     39e:	80 e4       	ldi	r24, 0x40	; 64
     3a0:	98 17       	cp	r25, r24
     3a2:	31 f4       	brne	.+12     	; 0x3b0 <_ZN7Encoder4readEv+0x44>
		return TCD1.CNT;
     3a4:	80 e4       	ldi	r24, 0x40	; 64
     3a6:	99 e0       	ldi	r25, 0x09	; 9
     3a8:	fc 01       	movw	r30, r24
     3aa:	80 a1       	ldd	r24, Z+32	; 0x20
     3ac:	91 a1       	ldd	r25, Z+33	; 0x21
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <_ZN7Encoder4readEv+0x44>
	}
}
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <_ZN7Encoder4zeroEv>:

/** @brief		Zero the encoder position.
 *  @details	This function sets the timer count representing the encoder
 *				position to zero.
 */
void Encoder::zero() {
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	1f 92       	push	r1
     3c0:	1f 92       	push	r1
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	89 83       	std	Y+1, r24	; 0x01
     3c8:	9a 83       	std	Y+2, r25	; 0x02
	// Primary Encoder
	if (ENC_A.PIN_BM == P_ENC_A.PIN_BM) {
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	fc 01       	movw	r30, r24
     3d0:	92 81       	ldd	r25, Z+2	; 0x02
     3d2:	80 e1       	ldi	r24, 0x10	; 16
     3d4:	98 17       	cp	r25, r24
     3d6:	29 f4       	brne	.+10     	; 0x3e2 <_ZN7Encoder4zeroEv+0x28>
		TCD0.CNT = 0;
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	99 e0       	ldi	r25, 0x09	; 9
     3dc:	fc 01       	movw	r30, r24
     3de:	10 a2       	std	Z+32, r1	; 0x20
     3e0:	11 a2       	std	Z+33, r1	; 0x21
	}
	// Secondary Encoder
	if (ENC_A.PIN_BM == S_ENC_A.PIN_BM) {
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	fc 01       	movw	r30, r24
     3e8:	92 81       	ldd	r25, Z+2	; 0x02
     3ea:	80 e4       	ldi	r24, 0x40	; 64
     3ec:	98 17       	cp	r25, r24
     3ee:	29 f4       	brne	.+10     	; 0x3fa <_ZN7Encoder4zeroEv+0x40>
		TCD1.CNT = 0;
     3f0:	80 e4       	ldi	r24, 0x40	; 64
     3f2:	99 e0       	ldi	r25, 0x09	; 9
     3f4:	fc 01       	movw	r30, r24
     3f6:	10 a2       	std	Z+32, r1	; 0x20
     3f8:	11 a2       	std	Z+33, r1	; 0x21
	}
     3fa:	00 00       	nop
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <_ZN11EngineSpeedC1Eh>:
 *  @details	This constructor creates an wheel speed object with the given
 *				number of triggers. It saves the number of triggers and
 *				initializes the "previous" and "current" times.
 *  @param		triggers The number of triggers per revolution of the wheel.
 */
EngineSpeed::EngineSpeed(uint8_t triggers) {
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	00 d0       	rcall	.+0      	; 0x410 <_ZN11EngineSpeedC1Eh+0xa>
     410:	1f 92       	push	r1
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	8a 83       	std	Y+2, r24	; 0x02
     418:	9b 83       	std	Y+3, r25	; 0x03
     41a:	6c 83       	std	Y+4, r22	; 0x04
     41c:	8a 81       	ldd	r24, Y+2	; 0x02
     41e:	9b 81       	ldd	r25, Y+3	; 0x03
     420:	fc 01       	movw	r30, r24
     422:	11 82       	std	Z+1, r1	; 0x01
	// Initialize variables
	this->triggers = triggers;
     424:	8a 81       	ldd	r24, Y+2	; 0x02
     426:	9b 81       	ldd	r25, Y+3	; 0x03
     428:	2c 81       	ldd	r18, Y+4	; 0x04
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
	for (uint8_t i = 0; i < triggers; i++) {
     42e:	19 82       	std	Y+1, r1	; 0x01
     430:	99 81       	ldd	r25, Y+1	; 0x01
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	98 17       	cp	r25, r24
     436:	d8 f4       	brcc	.+54     	; 0x46e <_ZN11EngineSpeedC1Eh+0x68>
		prevTime[i] = micros();
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	08 2f       	mov	r16, r24
     43c:	10 e0       	ldi	r17, 0x00	; 0
     43e:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	4a 81       	ldd	r20, Y+2	; 0x02
     448:	5b 81       	ldd	r21, Y+3	; 0x03
     44a:	98 01       	movw	r18, r16
     44c:	22 0f       	add	r18, r18
     44e:	33 1f       	adc	r19, r19
     450:	22 0f       	add	r18, r18
     452:	33 1f       	adc	r19, r19
     454:	24 0f       	add	r18, r20
     456:	35 1f       	adc	r19, r21
     458:	2e 5f       	subi	r18, 0xFE	; 254
     45a:	3f 4f       	sbci	r19, 0xFF	; 255
     45c:	f9 01       	movw	r30, r18
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 *  @param		triggers The number of triggers per revolution of the wheel.
 */
EngineSpeed::EngineSpeed(uint8_t triggers) {
	// Initialize variables
	this->triggers = triggers;
	for (uint8_t i = 0; i < triggers; i++) {
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	8f 5f       	subi	r24, 0xFF	; 255
     46a:	89 83       	std	Y+1, r24	; 0x01
     46c:	e1 cf       	rjmp	.-62     	; 0x430 <_ZN11EngineSpeedC1Eh+0x2a>
		prevTime[i] = micros();
	}
	currTime = micros();
     46e:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
     472:	dc 01       	movw	r26, r24
     474:	cb 01       	movw	r24, r22
     476:	2a 81       	ldd	r18, Y+2	; 0x02
     478:	3b 81       	ldd	r19, Y+3	; 0x03
     47a:	2e 56       	subi	r18, 0x6E	; 110
     47c:	3e 4f       	sbci	r19, 0xFE	; 254
     47e:	f9 01       	movw	r30, r18
     480:	80 83       	st	Z, r24
     482:	91 83       	std	Z+1, r25	; 0x01
     484:	a2 83       	std	Z+2, r26	; 0x02
     486:	b3 83       	std	Z+3, r27	; 0x03
}
     488:	00 00       	nop
     48a:	24 96       	adiw	r28, 0x04	; 4
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	de bf       	out	0x3e, r29	; 62
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <_ZN11EngineSpeed4calcEv>:
 *				spent in the interrupt service routing. The previous time is
 *				stored to the respective trigger position, then the position
 *				is incremented. If the position increases to a number greater
 *				than the number of triggers, the position is reset to zero.
 */
void EngineSpeed::calc() {
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	1f 92       	push	r1
     4a0:	1f 92       	push	r1
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	89 83       	std	Y+1, r24	; 0x01
     4a8:	9a 83       	std	Y+2, r25	; 0x02
	prevTime[pos] = currTime;
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	fc 01       	movw	r30, r24
     4b0:	81 81       	ldd	r24, Z+1	; 0x01
     4b2:	28 2f       	mov	r18, r24
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ba:	8e 56       	subi	r24, 0x6E	; 110
     4bc:	9e 4f       	sbci	r25, 0xFE	; 254
     4be:	fc 01       	movw	r30, r24
     4c0:	80 81       	ld	r24, Z
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
     4c4:	a2 81       	ldd	r26, Z+2	; 0x02
     4c6:	b3 81       	ldd	r27, Z+3	; 0x03
     4c8:	49 81       	ldd	r20, Y+1	; 0x01
     4ca:	5a 81       	ldd	r21, Y+2	; 0x02
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	22 0f       	add	r18, r18
     4d2:	33 1f       	adc	r19, r19
     4d4:	24 0f       	add	r18, r20
     4d6:	35 1f       	adc	r19, r21
     4d8:	2e 5f       	subi	r18, 0xFE	; 254
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
     4dc:	f9 01       	movw	r30, r18
     4de:	80 83       	st	Z, r24
     4e0:	91 83       	std	Z+1, r25	; 0x01
     4e2:	a2 83       	std	Z+2, r26	; 0x02
     4e4:	b3 83       	std	Z+3, r27	; 0x03
	currTime = micros();
     4e6:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
     4ea:	dc 01       	movw	r26, r24
     4ec:	cb 01       	movw	r24, r22
     4ee:	29 81       	ldd	r18, Y+1	; 0x01
     4f0:	3a 81       	ldd	r19, Y+2	; 0x02
     4f2:	2e 56       	subi	r18, 0x6E	; 110
     4f4:	3e 4f       	sbci	r19, 0xFE	; 254
     4f6:	f9 01       	movw	r30, r18
     4f8:	80 83       	st	Z, r24
     4fa:	91 83       	std	Z+1, r25	; 0x01
     4fc:	a2 83       	std	Z+2, r26	; 0x02
     4fe:	b3 83       	std	Z+3, r27	; 0x03
	// Increment position
	pos++;
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	fc 01       	movw	r30, r24
     506:	81 81       	ldd	r24, Z+1	; 0x01
     508:	21 e0       	ldi	r18, 0x01	; 1
     50a:	28 0f       	add	r18, r24
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	9a 81       	ldd	r25, Y+2	; 0x02
     510:	fc 01       	movw	r30, r24
     512:	21 83       	std	Z+1, r18	; 0x01
	if (pos >= triggers) {
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	9a 81       	ldd	r25, Y+2	; 0x02
     518:	fc 01       	movw	r30, r24
     51a:	21 81       	ldd	r18, Z+1	; 0x01
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	fc 01       	movw	r30, r24
     522:	80 81       	ld	r24, Z
     524:	28 17       	cp	r18, r24
     526:	20 f0       	brcs	.+8      	; 0x530 <_ZN11EngineSpeed4calcEv+0x96>
		pos = 0;
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	fc 01       	movw	r30, r24
     52e:	11 82       	std	Z+1, r1	; 0x01
	}
}
     530:	00 00       	nop
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <_ZN11EngineSpeed3getEv>:
 *				constant 1E6 is divided by this time to get rotations per
 *				second. The previous time retrieved is from the current
 *				trigger position.
 *	@return		The wheel speed in rotations per second as a float.
 */
uint16_t EngineSpeed::get() {
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	1f 92       	push	r1
     54a:	1f 92       	push	r1
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	9a 83       	std	Y+2, r25	; 0x02
	if (micros() - prevTime[pos] >= TIMEOUT) {
     554:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
     558:	9b 01       	movw	r18, r22
     55a:	ac 01       	movw	r20, r24
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	9a 81       	ldd	r25, Y+2	; 0x02
     560:	fc 01       	movw	r30, r24
     562:	81 81       	ldd	r24, Z+1	; 0x01
     564:	88 2f       	mov	r24, r24
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	69 81       	ldd	r22, Y+1	; 0x01
     56a:	7a 81       	ldd	r23, Y+2	; 0x02
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	86 0f       	add	r24, r22
     576:	97 1f       	adc	r25, r23
     578:	02 96       	adiw	r24, 0x02	; 2
     57a:	fc 01       	movw	r30, r24
     57c:	80 81       	ld	r24, Z
     57e:	91 81       	ldd	r25, Z+1	; 0x01
     580:	a2 81       	ldd	r26, Z+2	; 0x02
     582:	b3 81       	ldd	r27, Z+3	; 0x03
     584:	79 01       	movw	r14, r18
     586:	8a 01       	movw	r16, r20
     588:	e8 1a       	sub	r14, r24
     58a:	f9 0a       	sbc	r15, r25
     58c:	0a 0b       	sbc	r16, r26
     58e:	1b 0b       	sbc	r17, r27
     590:	d8 01       	movw	r26, r16
     592:	c7 01       	movw	r24, r14
     594:	21 e0       	ldi	r18, 0x01	; 1
     596:	80 34       	cpi	r24, 0x40	; 64
     598:	92 44       	sbci	r25, 0x42	; 66
     59a:	af 40       	sbci	r26, 0x0F	; 15
     59c:	b1 05       	cpc	r27, r1
     59e:	08 f4       	brcc	.+2      	; 0x5a2 <_ZN11EngineSpeed3getEv+0x66>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	22 23       	and	r18, r18
     5a4:	19 f0       	breq	.+6      	; 0x5ac <_ZN11EngineSpeed3getEv+0x70>
		return 0;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	2b c0       	rjmp	.+86     	; 0x602 <_ZN11EngineSpeed3getEv+0xc6>
	}
	// return 2000000 / (currTime - prevTime[pos]);	// Rotations per Second (RPS)
	return 120000000 / (currTime - prevTime[pos]);	// Rotations per Minute (RPM)
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	8e 56       	subi	r24, 0x6E	; 110
     5b2:	9e 4f       	sbci	r25, 0xFE	; 254
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 81       	ld	r18, Z
     5b8:	31 81       	ldd	r19, Z+1	; 0x01
     5ba:	42 81       	ldd	r20, Z+2	; 0x02
     5bc:	53 81       	ldd	r21, Z+3	; 0x03
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	9a 81       	ldd	r25, Y+2	; 0x02
     5c2:	fc 01       	movw	r30, r24
     5c4:	81 81       	ldd	r24, Z+1	; 0x01
     5c6:	88 2f       	mov	r24, r24
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	69 81       	ldd	r22, Y+1	; 0x01
     5cc:	7a 81       	ldd	r23, Y+2	; 0x02
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	86 0f       	add	r24, r22
     5d8:	97 1f       	adc	r25, r23
     5da:	02 96       	adiw	r24, 0x02	; 2
     5dc:	fc 01       	movw	r30, r24
     5de:	80 81       	ld	r24, Z
     5e0:	91 81       	ldd	r25, Z+1	; 0x01
     5e2:	a2 81       	ldd	r26, Z+2	; 0x02
     5e4:	b3 81       	ldd	r27, Z+3	; 0x03
     5e6:	28 1b       	sub	r18, r24
     5e8:	39 0b       	sbc	r19, r25
     5ea:	4a 0b       	sbc	r20, r26
     5ec:	5b 0b       	sbc	r21, r27
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	9e e0       	ldi	r25, 0x0E	; 14
     5f2:	a7 e2       	ldi	r26, 0x27	; 39
     5f4:	b7 e0       	ldi	r27, 0x07	; 7
     5f6:	bc 01       	movw	r22, r24
     5f8:	cd 01       	movw	r24, r26
     5fa:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodsi4>
     5fe:	da 01       	movw	r26, r20
     600:	c9 01       	movw	r24, r18
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	08 95       	ret

00000614 <_Z7IO_Initv>:

/** @brief		Sets up the engine speed and wheel speed interrupt pins.
 *  @details	This function sets up the engine speed and wheel speed for
 *				interrupt functionality.
 */
void IO_Init() {
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62

	/* ** INPUT/OUTPUT CONFIGURATION ** */
	// Engine Speed Setup
	ENGINE_SPEED_PIN.PORT->INTCTRL = (ENGINE_SPEED_PIN.PORT->INTCTRL & ~PORT_INT0LVL_gm) | PORT_INT0LVL_MED_gc;
     61c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     620:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     624:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     628:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     62c:	f9 01       	movw	r30, r18
     62e:	21 85       	ldd	r18, Z+9	; 0x09
     630:	2c 7f       	andi	r18, 0xFC	; 252
     632:	22 60       	ori	r18, 0x02	; 2
     634:	fc 01       	movw	r30, r24
     636:	21 87       	std	Z+9, r18	; 0x09
	ENGINE_SPEED_PIN.PORT->INT0MASK = ENGINE_SPEED_PIN.PIN_BM;
     638:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     63c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     640:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
     644:	fc 01       	movw	r30, r24
     646:	22 87       	std	Z+10, r18	; 0x0a

	// Rear Wheel Speed Setup
	RWHEELS_SPEED_PIN.PORT->INTCTRL = (RWHEELS_SPEED_PIN.PORT->INTCTRL & ~PORT_INT1LVL_gm) | PORT_INT0LVL_MED_gc;
     648:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <_ZL17RWHEELS_SPEED_PIN>
     64c:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <_ZL17RWHEELS_SPEED_PIN+0x1>
     650:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <_ZL17RWHEELS_SPEED_PIN>
     654:	30 91 04 20 	lds	r19, 0x2004	; 0x802004 <_ZL17RWHEELS_SPEED_PIN+0x1>
     658:	f9 01       	movw	r30, r18
     65a:	21 85       	ldd	r18, Z+9	; 0x09
     65c:	21 7f       	andi	r18, 0xF1	; 241
     65e:	22 60       	ori	r18, 0x02	; 2
     660:	fc 01       	movw	r30, r24
     662:	21 87       	std	Z+9, r18	; 0x09
	RWHEELS_SPEED_PIN.PORT->INT1MASK = RWHEELS_SPEED_PIN.PIN_BM;
     664:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <_ZL17RWHEELS_SPEED_PIN>
     668:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <_ZL17RWHEELS_SPEED_PIN+0x1>
     66c:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <_ZL17RWHEELS_SPEED_PIN+0x2>
     670:	fc 01       	movw	r30, r24
     672:	23 87       	std	Z+11, r18	; 0x0b
	/* Handled in Motor files. */

	// Secondary Encoder Setup
	/* Handled in Encoder files. */

     674:	00 00       	nop
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <_Z13pRatioToTicksf>:



/* **LOOKUP TABLES** */

uint16_t pRatioToTicks(float ratio) {
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	00 d0       	rcall	.+0      	; 0x682 <_Z13pRatioToTicksf+0x6>
     682:	1f 92       	push	r1
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	69 83       	std	Y+1, r22	; 0x01
     68a:	7a 83       	std	Y+2, r23	; 0x02
     68c:	8b 83       	std	Y+3, r24	; 0x03
     68e:	9c 83       	std	Y+4, r25	; 0x04
	// 1% ratio increments
	static const uint16_t pLookup[] = {15919,15563,15217,14878,14548,14226,13913,13607,13308,13017,12734,12457,12188,11925,11669,11419,11176,10938,10707,10481,10260,10045,9835,9631,9431,9236,9045,8859,8677,8500,8326,8157,7991,7829,7671,7516,7365,7217,7072,6930,6791,6655,6522,6392,6265,6140,6017,5897,5780,5665,5552,5441,5332,5226,5121,5019,4918,4820,4723,4628,4534,4443,4353,4264,4177,4092,4008,3925,3844,3765,3686,3609,3534,3459,3386,3314,3243,3173,3104,3037,2970,2905,2840,2777,2714,2653,2592,2532,2473,2415,2358,2302,2246,2191,2137,2084,2032,1980,1929,1879,1829};
	if (ratio < 0) { return pLookup[0]; } else if (ratio > 100) { return pLookup[100]; }
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	a9 01       	movw	r20, r18
     696:	69 81       	ldd	r22, Y+1	; 0x01
     698:	7a 81       	ldd	r23, Y+2	; 0x02
     69a:	8b 81       	ldd	r24, Y+3	; 0x03
     69c:	9c 81       	ldd	r25, Y+4	; 0x04
     69e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__cmpsf2>
     6a2:	88 23       	and	r24, r24
     6a4:	2c f4       	brge	.+10     	; 0x6b0 <_Z13pRatioToTicksf+0x34>
     6a6:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <_ZZ13pRatioToTicksfE7pLookup>
     6aa:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <_ZZ13pRatioToTicksfE7pLookup+0x1>
     6ae:	22 c0       	rjmp	.+68     	; 0x6f4 <_Z13pRatioToTicksf+0x78>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	48 ec       	ldi	r20, 0xC8	; 200
     6b6:	52 e4       	ldi	r21, 0x42	; 66
     6b8:	69 81       	ldd	r22, Y+1	; 0x01
     6ba:	7a 81       	ldd	r23, Y+2	; 0x02
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__gesf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	2c f4       	brge	.+10     	; 0x6d2 <_Z13pRatioToTicksf+0x56>
     6c8:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <_ZZ13pRatioToTicksfE7pLookup+0xc8>
     6cc:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <_ZZ13pRatioToTicksfE7pLookup+0xc9>
     6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <_Z13pRatioToTicksf+0x78>
	return pLookup[(uint8_t)ratio];
     6d2:	69 81       	ldd	r22, Y+1	; 0x01
     6d4:	7a 81       	ldd	r23, Y+2	; 0x02
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	9c 81       	ldd	r25, Y+4	; 0x04
     6da:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixunssfsi>
     6de:	dc 01       	movw	r26, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	88 2f       	mov	r24, r24
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	8c 5d       	subi	r24, 0xDC	; 220
     6ec:	9f 4d       	sbci	r25, 0xDF	; 223
     6ee:	fc 01       	movw	r30, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	91 81       	ldd	r25, Z+1	; 0x01
}
     6f4:	24 96       	adiw	r28, 0x04	; 4
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <_Z13sRatioToTicksf>:

uint16_t sRatioToTicks(float ratio) {
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	00 d0       	rcall	.+0      	; 0x706 <_Z13sRatioToTicksf+0x6>
     706:	1f 92       	push	r1
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	69 83       	std	Y+1, r22	; 0x01
     70e:	7a 83       	std	Y+2, r23	; 0x02
     710:	8b 83       	std	Y+3, r24	; 0x03
     712:	9c 83       	std	Y+4, r25	; 0x04
	// 1% ratio increments
	static const uint16_t sLookup[] = {0,386,756,1111,1452,1780,2096,2399,2690,2970,3240,3500,3751,3992,4225,4449,4665,4874,5076,5271,5459,5641,5818,5988,6153,6313,6467,6617,6763,6904,7040,7173,7302,7427,7548,7666,7781,7893,8001,8107,8210,8310,8407,8502,8594,8685,8773,8858,8942,9023,9103,9181,9257,9331,9403,9474,9543,9611,9677,9742,9805,9867,9928,9987,10045,10102,10157,10212,10266,10318,10369,10420,10469,10517,10565,10612,10657,10702,10746,10789,10832,10874,10915,10955,10994,11033,11071,11109,11146,11182,11218,11253,11287,11321,11354,11387,11419,11451,11483,11513,11544};
	if (ratio < 0) { return sLookup[0]; } else if (ratio > 100) { return sLookup[100]; }
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	a9 01       	movw	r20, r18
     71a:	69 81       	ldd	r22, Y+1	; 0x01
     71c:	7a 81       	ldd	r23, Y+2	; 0x02
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	9c 81       	ldd	r25, Y+4	; 0x04
     722:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__cmpsf2>
     726:	88 23       	and	r24, r24
     728:	2c f4       	brge	.+10     	; 0x734 <_Z13sRatioToTicksf+0x34>
     72a:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <_ZZ13sRatioToTicksfE7sLookup>
     72e:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <_ZZ13sRatioToTicksfE7sLookup+0x1>
     732:	22 c0       	rjmp	.+68     	; 0x778 <_Z13sRatioToTicksf+0x78>
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	48 ec       	ldi	r20, 0xC8	; 200
     73a:	52 e4       	ldi	r21, 0x42	; 66
     73c:	69 81       	ldd	r22, Y+1	; 0x01
     73e:	7a 81       	ldd	r23, Y+2	; 0x02
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	9c 81       	ldd	r25, Y+4	; 0x04
     744:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__gesf2>
     748:	18 16       	cp	r1, r24
     74a:	2c f4       	brge	.+10     	; 0x756 <_Z13sRatioToTicksf+0x56>
     74c:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <_ZZ13sRatioToTicksfE7sLookup+0xc8>
     750:	90 91 b7 21 	lds	r25, 0x21B7	; 0x8021b7 <_ZZ13sRatioToTicksfE7sLookup+0xc9>
     754:	11 c0       	rjmp	.+34     	; 0x778 <_Z13sRatioToTicksf+0x78>
	return sLookup[(uint8_t)ratio];
     756:	69 81       	ldd	r22, Y+1	; 0x01
     758:	7a 81       	ldd	r23, Y+2	; 0x02
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	9c 81       	ldd	r25, Y+4	; 0x04
     75e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixunssfsi>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	88 2f       	mov	r24, r24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	82 51       	subi	r24, 0x12	; 18
     770:	9f 4d       	sbci	r25, 0xDF	; 223
     772:	fc 01       	movw	r30, r24
     774:	80 81       	ld	r24, Z
     776:	91 81       	ldd	r25, Z+1	; 0x01
}
     778:	24 96       	adiw	r28, 0x04	; 4
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <__vector_43>:



/* **INTERRUPT SERVICE ROUTINES** */

ISR(PORTE_INT0_vect) { engineSpeed.calc(); }
     784:	1f 92       	push	r1
     786:	0f 92       	push	r0
     788:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
     790:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     794:	0f 92       	push	r0
     796:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     79a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     79e:	0f 92       	push	r0
     7a0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     7a4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     7a8:	0f 92       	push	r0
     7aa:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     7ae:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     7b2:	0f 92       	push	r0
     7b4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     7b8:	2f 93       	push	r18
     7ba:	3f 93       	push	r19
     7bc:	4f 93       	push	r20
     7be:	5f 93       	push	r21
     7c0:	6f 93       	push	r22
     7c2:	7f 93       	push	r23
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	af 93       	push	r26
     7ca:	bf 93       	push	r27
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	8d e2       	ldi	r24, 0x2D	; 45
     7da:	92 e2       	ldi	r25, 0x22	; 34
     7dc:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN11EngineSpeed4calcEv>
     7e0:	00 00       	nop
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	ff 91       	pop	r31
     7e8:	ef 91       	pop	r30
     7ea:	bf 91       	pop	r27
     7ec:	af 91       	pop	r26
     7ee:	9f 91       	pop	r25
     7f0:	8f 91       	pop	r24
     7f2:	7f 91       	pop	r23
     7f4:	6f 91       	pop	r22
     7f6:	5f 91       	pop	r21
     7f8:	4f 91       	pop	r20
     7fa:	3f 91       	pop	r19
     7fc:	2f 91       	pop	r18
     7fe:	0f 90       	pop	r0
     800:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     804:	0f 90       	pop	r0
     806:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     80a:	0f 90       	pop	r0
     80c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     810:	0f 90       	pop	r0
     812:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     816:	0f 90       	pop	r0
     818:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     81c:	0f 90       	pop	r0
     81e:	1f 90       	pop	r1
     820:	18 95       	reti

00000822 <__vector_44>:
ISR(PORTE_INT1_vect) { rWheelsSpeed.calc(); }
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     82a:	0f 92       	push	r0
     82c:	11 24       	eor	r1, r1
     82e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     832:	0f 92       	push	r0
     834:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     838:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     83c:	0f 92       	push	r0
     83e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     842:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     846:	0f 92       	push	r0
     848:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     84c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     850:	0f 92       	push	r0
     852:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	83 ec       	ldi	r24, 0xC3	; 195
     878:	93 e2       	ldi	r25, 0x23	; 35
     87a:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZN10WheelSpeed4calcEv>
     87e:	00 00       	nop
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	ff 91       	pop	r31
     886:	ef 91       	pop	r30
     888:	bf 91       	pop	r27
     88a:	af 91       	pop	r26
     88c:	9f 91       	pop	r25
     88e:	8f 91       	pop	r24
     890:	7f 91       	pop	r23
     892:	6f 91       	pop	r22
     894:	5f 91       	pop	r21
     896:	4f 91       	pop	r20
     898:	3f 91       	pop	r19
     89a:	2f 91       	pop	r18
     89c:	0f 90       	pop	r0
     89e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8a2:	0f 90       	pop	r0
     8a4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8a8:	0f 90       	pop	r0
     8aa:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     8ae:	0f 90       	pop	r0
     8b0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8b4:	0f 90       	pop	r0
     8b6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8ba:	0f 90       	pop	r0
     8bc:	1f 90       	pop	r1
     8be:	18 95       	reti

000008c0 <__vector_49>:

ISR(TCE0_CCA_vect) {
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8c8:	0f 92       	push	r0
     8ca:	11 24       	eor	r1, r1
     8cc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8d0:	0f 92       	push	r0
     8d2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8d6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8da:	0f 92       	push	r0
     8dc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8e0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8e4:	0f 92       	push	r0
     8e6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8ea:	2f 93       	push	r18
     8ec:	3f 93       	push	r19
     8ee:	4f 93       	push	r20
     8f0:	5f 93       	push	r21
     8f2:	8f 93       	push	r24
     8f4:	9f 93       	push	r25
     8f6:	ef 93       	push	r30
     8f8:	ff 93       	push	r31
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
	eCalc = true;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	80 93 f5 23 	sts	0x23F5, r24	; 0x8023f5 <eCalc>
	pCalc = true;
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 f6 23 	sts	0x23F6, r24	; 0x8023f6 <pCalc>
	sCalc = true;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 f7 23 	sts	0x23F7, r24	; 0x8023f7 <sCalc>
	TCC0_CCA += CONTROLLER_SPEED;
     914:	88 e2       	ldi	r24, 0x28	; 40
     916:	98 e0       	ldi	r25, 0x08	; 8
     918:	28 e2       	ldi	r18, 0x28	; 40
     91a:	38 e0       	ldi	r19, 0x08	; 8
     91c:	f9 01       	movw	r30, r18
     91e:	40 81       	ld	r20, Z
     920:	51 81       	ldd	r21, Z+1	; 0x01
     922:	20 e1       	ldi	r18, 0x10	; 16
     924:	37 e2       	ldi	r19, 0x27	; 39
     926:	24 0f       	add	r18, r20
     928:	35 1f       	adc	r19, r21
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18
     92e:	31 83       	std	Z+1, r19	; 0x01
}
     930:	00 00       	nop
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	5f 91       	pop	r21
     940:	4f 91       	pop	r20
     942:	3f 91       	pop	r19
     944:	2f 91       	pop	r18
     946:	0f 90       	pop	r0
     948:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     94c:	0f 90       	pop	r0
     94e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     952:	0f 90       	pop	r0
     954:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     958:	0f 90       	pop	r0
     95a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     95e:	0f 90       	pop	r0
     960:	1f 90       	pop	r1
     962:	18 95       	reti

00000964 <_Z4eCVTv>:



/* **TASKS** */

void eCVT() {
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
	//#ifdef DEBUG
	//Serial.print("eState: ");
	//Serial.println(eState);
	//#endif

	switch (eState) {
     96c:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <eState>
     970:	88 2f       	mov	r24, r24
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	91 05       	cpc	r25, r1
     978:	59 f1       	breq	.+86     	; 0x9d0 <_Z4eCVTv+0x6c>
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	91 05       	cpc	r25, r1
     97e:	1c f4       	brge	.+6      	; 0x986 <_Z4eCVTv+0x22>
     980:	89 2b       	or	r24, r25
     982:	49 f0       	breq	.+18     	; 0x996 <_Z4eCVTv+0x32>
     984:	e0 c0       	rjmp	.+448    	; 0xb46 <_Z4eCVTv+0x1e2>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	91 05       	cpc	r25, r1
     98a:	09 f4       	brne	.+2      	; 0x98e <_Z4eCVTv+0x2a>
     98c:	66 c0       	rjmp	.+204    	; 0xa5a <_Z4eCVTv+0xf6>
     98e:	03 97       	sbiw	r24, 0x03	; 3
     990:	09 f4       	brne	.+2      	; 0x994 <_Z4eCVTv+0x30>
     992:	82 c0       	rjmp	.+260    	; 0xa98 <_Z4eCVTv+0x134>
     994:	d8 c0       	rjmp	.+432    	; 0xb46 <_Z4eCVTv+0x1e2>

		// INITIALIZE
		case 0:

			// PID Controller Setup
			ePID.setSetpoint(SHIFT_SPEED);
     996:	48 e4       	ldi	r20, 0x48	; 72
     998:	5d e0       	ldi	r21, 0x0D	; 13
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	88 eb       	ldi	r24, 0xB8	; 184
     9a0:	91 e2       	ldi	r25, 0x21	; 33
     9a2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN13PIDController11setSetpointEl>
			ePID.setLoSat(0);
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	88 eb       	ldi	r24, 0xB8	; 184
     9aa:	91 e2       	ldi	r25, 0x21	; 33
     9ac:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN13PIDController8setLoSatEa>
			ePID.setHiSat(100);
     9b0:	64 e6       	ldi	r22, 0x64	; 100
     9b2:	88 eb       	ldi	r24, 0xB8	; 184
     9b4:	91 e2       	ldi	r25, 0x21	; 33
     9b6:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN13PIDController8setHiSatEa>
			ePID.reset();
     9ba:	88 eb       	ldi	r24, 0xB8	; 184
     9bc:	91 e2       	ldi	r25, 0x21	; 33
     9be:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN13PIDController5resetEv>

			// Run
			run = true;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 f4 23 	sts	0x23F4, r24	; 0x8023f4 <run>

			// State Changes
			eState = 1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <eState>
			return;
     9ce:	bb c0       	rjmp	.+374    	; 0xb46 <_Z4eCVTv+0x1e2>

		// DISENGAGED
		case 1:
			pTicks = 0;
     9d0:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <pTicks>
     9d4:	10 92 f9 23 	sts	0x23F9, r1	; 0x8023f9 <pTicks+0x1>
     9d8:	10 92 fa 23 	sts	0x23FA, r1	; 0x8023fa <pTicks+0x2>
     9dc:	10 92 fb 23 	sts	0x23FB, r1	; 0x8023fb <pTicks+0x3>
     9e0:	10 92 fc 23 	sts	0x23FC, r1	; 0x8023fc <pTicks+0x4>
     9e4:	10 92 fd 23 	sts	0x23FD, r1	; 0x8023fd <pTicks+0x5>
     9e8:	10 92 fe 23 	sts	0x23FE, r1	; 0x8023fe <pTicks+0x6>
     9ec:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <pTicks+0x7>
			sTicks = sRatioToTicks(100);
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	88 ec       	ldi	r24, 0xC8	; 200
     9f6:	92 e4       	ldi	r25, 0x42	; 66
     9f8:	0e 94 80 03 	call	0x700	; 0x700 <_Z13sRatioToTicksf>
     9fc:	9c 01       	movw	r18, r24
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	cb 01       	movw	r24, r22
     a08:	20 93 00 24 	sts	0x2400, r18	; 0x802400 <sTicks>
     a0c:	30 93 01 24 	sts	0x2401, r19	; 0x802401 <sTicks+0x1>
     a10:	40 93 02 24 	sts	0x2402, r20	; 0x802402 <sTicks+0x2>
     a14:	50 93 03 24 	sts	0x2403, r21	; 0x802403 <sTicks+0x3>
     a18:	60 93 04 24 	sts	0x2404, r22	; 0x802404 <sTicks+0x4>
     a1c:	70 93 05 24 	sts	0x2405, r23	; 0x802405 <sTicks+0x5>
     a20:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <sTicks+0x6>
     a24:	90 93 07 24 	sts	0x2407, r25	; 0x802407 <sTicks+0x7>

			// State Changes
			if (engineSpeed.get() > ENGAGE_SPEED && run) {
     a28:	8d e2       	ldi	r24, 0x2D	; 45
     a2a:	92 e2       	ldi	r25, 0x22	; 34
     a2c:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN11EngineSpeed3getEv>
     a30:	81 3f       	cpi	r24, 0xF1	; 241
     a32:	9a 40       	sbci	r25, 0x0A	; 10
     a34:	30 f0       	brcs	.+12     	; 0xa42 <_Z4eCVTv+0xde>
     a36:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <run>
     a3a:	88 23       	and	r24, r24
     a3c:	11 f0       	breq	.+4      	; 0xa42 <_Z4eCVTv+0xde>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <_Z4eCVTv+0xe0>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	88 23       	and	r24, r24
     a46:	09 f4       	brne	.+2      	; 0xa4a <_Z4eCVTv+0xe6>
     a48:	7b c0       	rjmp	.+246    	; 0xb40 <_Z4eCVTv+0x1dc>
				ePID.reset();
     a4a:	88 eb       	ldi	r24, 0xB8	; 184
     a4c:	91 e2       	ldi	r25, 0x21	; 33
     a4e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN13PIDController5resetEv>
				eState = 2;
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <eState>
			}
			return;
     a58:	73 c0       	rjmp	.+230    	; 0xb40 <_Z4eCVTv+0x1dc>

		// ENGAGED, PID CONTROLLER - REST
		case 2:
			// State Changes
			if (engineSpeed.get() < ENGAGE_SPEED || !run) {
     a5a:	8d e2       	ldi	r24, 0x2D	; 45
     a5c:	92 e2       	ldi	r25, 0x22	; 34
     a5e:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN11EngineSpeed3getEv>
     a62:	80 3f       	cpi	r24, 0xF0	; 240
     a64:	9a 40       	sbci	r25, 0x0A	; 10
     a66:	30 f0       	brcs	.+12     	; 0xa74 <_Z4eCVTv+0x110>
     a68:	90 91 f4 23 	lds	r25, 0x23F4	; 0x8023f4 <run>
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	89 27       	eor	r24, r25
     a70:	88 23       	and	r24, r24
     a72:	11 f0       	breq	.+4      	; 0xa78 <_Z4eCVTv+0x114>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <_Z4eCVTv+0x116>
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	88 23       	and	r24, r24
     a7c:	21 f0       	breq	.+8      	; 0xa86 <_Z4eCVTv+0x122>
				eState = 1;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <eState>
			} else if (eCalc) {
				eState = 3;
			}
			return;
     a84:	5f c0       	rjmp	.+190    	; 0xb44 <_Z4eCVTv+0x1e0>
		// ENGAGED, PID CONTROLLER - REST
		case 2:
			// State Changes
			if (engineSpeed.get() < ENGAGE_SPEED || !run) {
				eState = 1;
			} else if (eCalc) {
     a86:	80 91 f5 23 	lds	r24, 0x23F5	; 0x8023f5 <eCalc>
     a8a:	88 23       	and	r24, r24
     a8c:	09 f4       	brne	.+2      	; 0xa90 <_Z4eCVTv+0x12c>
     a8e:	5a c0       	rjmp	.+180    	; 0xb44 <_Z4eCVTv+0x1e0>
				eState = 3;
     a90:	83 e0       	ldi	r24, 0x03	; 3
     a92:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <eState>
			}
			return;
     a96:	56 c0       	rjmp	.+172    	; 0xb44 <_Z4eCVTv+0x1e0>

		// ENGAGED, PID CONTROLLER - UPDATE
		case 3:
			ePID.calc(engineSpeed.get());
     a98:	8d e2       	ldi	r24, 0x2D	; 45
     a9a:	92 e2       	ldi	r25, 0x22	; 34
     a9c:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN11EngineSpeed3getEv>
     aa0:	cc 01       	movw	r24, r24
     aa2:	a0 e0       	ldi	r26, 0x00	; 0
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	ac 01       	movw	r20, r24
     aa8:	bd 01       	movw	r22, r26
     aaa:	88 eb       	ldi	r24, 0xB8	; 184
     aac:	91 e2       	ldi	r25, 0x21	; 33
     aae:	0e 94 a4 09 	call	0x1348	; 0x1348 <_ZN13PIDController4calcEl>
			pTicks = pRatioToTicks(ePID.get());
     ab2:	88 eb       	ldi	r24, 0xB8	; 184
     ab4:	91 e2       	ldi	r25, 0x21	; 33
     ab6:	0e 94 25 0a 	call	0x144a	; 0x144a <_ZN13PIDController3getEv>
     aba:	dc 01       	movw	r26, r24
     abc:	cb 01       	movw	r24, r22
     abe:	bc 01       	movw	r22, r24
     ac0:	cd 01       	movw	r24, r26
     ac2:	0e 94 3e 03 	call	0x67c	; 0x67c <_Z13pRatioToTicksf>
     ac6:	9c 01       	movw	r18, r24
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	50 e0       	ldi	r21, 0x00	; 0
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	cb 01       	movw	r24, r22
     ad2:	20 93 f8 23 	sts	0x23F8, r18	; 0x8023f8 <pTicks>
     ad6:	30 93 f9 23 	sts	0x23F9, r19	; 0x8023f9 <pTicks+0x1>
     ada:	40 93 fa 23 	sts	0x23FA, r20	; 0x8023fa <pTicks+0x2>
     ade:	50 93 fb 23 	sts	0x23FB, r21	; 0x8023fb <pTicks+0x3>
     ae2:	60 93 fc 23 	sts	0x23FC, r22	; 0x8023fc <pTicks+0x4>
     ae6:	70 93 fd 23 	sts	0x23FD, r23	; 0x8023fd <pTicks+0x5>
     aea:	80 93 fe 23 	sts	0x23FE, r24	; 0x8023fe <pTicks+0x6>
     aee:	90 93 ff 23 	sts	0x23FF, r25	; 0x8023ff <pTicks+0x7>
			sTicks = sRatioToTicks(ePID.get());
     af2:	88 eb       	ldi	r24, 0xB8	; 184
     af4:	91 e2       	ldi	r25, 0x21	; 33
     af6:	0e 94 25 0a 	call	0x144a	; 0x144a <_ZN13PIDController3getEv>
     afa:	dc 01       	movw	r26, r24
     afc:	cb 01       	movw	r24, r22
     afe:	bc 01       	movw	r22, r24
     b00:	cd 01       	movw	r24, r26
     b02:	0e 94 80 03 	call	0x700	; 0x700 <_Z13sRatioToTicksf>
     b06:	9c 01       	movw	r18, r24
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	cb 01       	movw	r24, r22
     b12:	20 93 00 24 	sts	0x2400, r18	; 0x802400 <sTicks>
     b16:	30 93 01 24 	sts	0x2401, r19	; 0x802401 <sTicks+0x1>
     b1a:	40 93 02 24 	sts	0x2402, r20	; 0x802402 <sTicks+0x2>
     b1e:	50 93 03 24 	sts	0x2403, r21	; 0x802403 <sTicks+0x3>
     b22:	60 93 04 24 	sts	0x2404, r22	; 0x802404 <sTicks+0x4>
     b26:	70 93 05 24 	sts	0x2405, r23	; 0x802405 <sTicks+0x5>
     b2a:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <sTicks+0x6>
     b2e:	90 93 07 24 	sts	0x2407, r25	; 0x802407 <sTicks+0x7>
			//Serial.print("ePID: ");
			//Serial.println(ePID.get());
			//#endif

			// State Changes
			eCalc = false;
     b32:	10 92 f5 23 	sts	0x23F5, r1	; 0x8023f5 <eCalc>
			eState = 2;
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <eState>
			return;
     b3c:	00 00       	nop
     b3e:	03 c0       	rjmp	.+6      	; 0xb46 <_Z4eCVTv+0x1e2>
			// State Changes
			if (engineSpeed.get() > ENGAGE_SPEED && run) {
				ePID.reset();
				eState = 2;
			}
			return;
     b40:	00 00       	nop
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <_Z4eCVTv+0x1e2>
			if (engineSpeed.get() < ENGAGE_SPEED || !run) {
				eState = 1;
			} else if (eCalc) {
				eState = 3;
			}
			return;
     b44:	00 00       	nop
			// State Changes
			eCalc = false;
			eState = 2;
			return;
	}
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <_Z7primaryv>:



void primary() {
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
	// #ifdef DEBUG
	// Serial.print("pState: ");
	// Serial.println(pState);
	// #endif
	
	switch (pState) {
     b5c:	80 91 09 24 	lds	r24, 0x2409	; 0x802409 <pState>
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	91 05       	cpc	r25, r1
     b68:	e1 f1       	breq	.+120    	; 0xbe2 <_Z7primaryv+0x96>
     b6a:	83 30       	cpi	r24, 0x03	; 3
     b6c:	91 05       	cpc	r25, r1
     b6e:	2c f4       	brge	.+10     	; 0xb7a <_Z7primaryv+0x2e>
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	59 f0       	breq	.+22     	; 0xb8a <_Z7primaryv+0x3e>
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	01 f1       	breq	.+64     	; 0xbb8 <_Z7primaryv+0x6c>
     b78:	9e c0       	rjmp	.+316    	; 0xcb6 <_Z7primaryv+0x16a>
     b7a:	83 30       	cpi	r24, 0x03	; 3
     b7c:	91 05       	cpc	r25, r1
     b7e:	09 f4       	brne	.+2      	; 0xb82 <_Z7primaryv+0x36>
     b80:	56 c0       	rjmp	.+172    	; 0xc2e <_Z7primaryv+0xe2>
     b82:	04 97       	sbiw	r24, 0x04	; 4
     b84:	09 f4       	brne	.+2      	; 0xb88 <_Z7primaryv+0x3c>
     b86:	5a c0       	rjmp	.+180    	; 0xc3c <_Z7primaryv+0xf0>
     b88:	96 c0       	rjmp	.+300    	; 0xcb6 <_Z7primaryv+0x16a>
		// INITIALIZE
		case 0:
			// Setup Motor
			pMot.init();
     b8a:	8c ec       	ldi	r24, 0xCC	; 204
     b8c:	93 e2       	ldi	r25, 0x23	; 35
     b8e:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN5Motor4initEv>

			// Setup PID Controller
			pPID.setLoSat(-100);
     b92:	6c e9       	ldi	r22, 0x9C	; 156
     b94:	8f ed       	ldi	r24, 0xDF	; 223
     b96:	91 e2       	ldi	r25, 0x21	; 33
     b98:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN13PIDController8setLoSatEa>
			pPID.setHiSat( 100);
     b9c:	64 e6       	ldi	r22, 0x64	; 100
     b9e:	8f ed       	ldi	r24, 0xDF	; 223
     ba0:	91 e2       	ldi	r25, 0x21	; 33
     ba2:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN13PIDController8setHiSatEa>
			pMot.setDutyCycle(0);
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	8c ec       	ldi	r24, 0xCC	; 204
     baa:	93 e2       	ldi	r25, 0x23	; 35
     bac:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN5Motor12setDutyCycleEa>

			// State Changes
			pState = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pState>
			return;
     bb6:	7f c0       	rjmp	.+254    	; 0xcb6 <_Z7primaryv+0x16a>

		// CALIBRATE - OPEN SHEAVES
		case 1:
			pMot.setDutyCycle(-5);
     bb8:	6b ef       	ldi	r22, 0xFB	; 251
     bba:	8c ec       	ldi	r24, 0xCC	; 204
     bbc:	93 e2       	ldi	r25, 0x23	; 35
     bbe:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN5Motor12setDutyCycleEa>
			pCalTime = micros();
     bc2:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	80 93 ec 23 	sts	0x23EC, r24	; 0x8023ec <pCalTime>
     bce:	90 93 ed 23 	sts	0x23ED, r25	; 0x8023ed <pCalTime+0x1>
     bd2:	a0 93 ee 23 	sts	0x23EE, r26	; 0x8023ee <pCalTime+0x2>
     bd6:	b0 93 ef 23 	sts	0x23EF, r27	; 0x8023ef <pCalTime+0x3>
			// State Changes
			pState = 2;
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pState>
			return;
     be0:	6a c0       	rjmp	.+212    	; 0xcb6 <_Z7primaryv+0x16a>

		// CALIBRATE - ZERO ENCODER
		case 2:
			if (micros() - pCalTime > CALIBRATION_DELAY) {
     be2:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
     be6:	9b 01       	movw	r18, r22
     be8:	ac 01       	movw	r20, r24
     bea:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <pCalTime>
     bee:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <pCalTime+0x1>
     bf2:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <pCalTime+0x2>
     bf6:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <pCalTime+0x3>
     bfa:	79 01       	movw	r14, r18
     bfc:	8a 01       	movw	r16, r20
     bfe:	e8 1a       	sub	r14, r24
     c00:	f9 0a       	sbc	r15, r25
     c02:	0a 0b       	sbc	r16, r26
     c04:	1b 0b       	sbc	r17, r27
     c06:	d8 01       	movw	r26, r16
     c08:	c7 01       	movw	r24, r14
     c0a:	21 e0       	ldi	r18, 0x01	; 1
     c0c:	81 34       	cpi	r24, 0x41	; 65
     c0e:	92 44       	sbci	r25, 0x42	; 66
     c10:	af 40       	sbci	r26, 0x0F	; 15
     c12:	b1 05       	cpc	r27, r1
     c14:	08 f4       	brcc	.+2      	; 0xc18 <_Z7primaryv+0xcc>
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	22 23       	and	r18, r18
     c1a:	09 f4       	brne	.+2      	; 0xc1e <_Z7primaryv+0xd2>
     c1c:	4b c0       	rjmp	.+150    	; 0xcb4 <_Z7primaryv+0x168>
				pEnc.zero();
     c1e:	80 ee       	ldi	r24, 0xE0	; 224
     c20:	93 e2       	ldi	r25, 0x23	; 35
     c22:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN7Encoder4zeroEv>

				// State Changes
				pState = 3;
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pState>
			}
			return;
     c2c:	43 c0       	rjmp	.+134    	; 0xcb4 <_Z7primaryv+0x168>

		// P-ONLY CONTROLLER - REST
		case 3:
			// State Changes
			if (pCalc) {
     c2e:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <pCalc>
     c32:	88 23       	and	r24, r24
     c34:	19 f0       	breq	.+6      	; 0xc3c <_Z7primaryv+0xf0>
				pState = 4;
     c36:	84 e0       	ldi	r24, 0x04	; 4
     c38:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pState>
			}

		// P-ONLY CONTROLLER - UPDATE
		case 4:
			pPID.setSetpoint(pTicks);
     c3c:	20 91 f8 23 	lds	r18, 0x23F8	; 0x8023f8 <pTicks>
     c40:	30 91 f9 23 	lds	r19, 0x23F9	; 0x8023f9 <pTicks+0x1>
     c44:	40 91 fa 23 	lds	r20, 0x23FA	; 0x8023fa <pTicks+0x2>
     c48:	50 91 fb 23 	lds	r21, 0x23FB	; 0x8023fb <pTicks+0x3>
     c4c:	60 91 fc 23 	lds	r22, 0x23FC	; 0x8023fc <pTicks+0x4>
     c50:	70 91 fd 23 	lds	r23, 0x23FD	; 0x8023fd <pTicks+0x5>
     c54:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <pTicks+0x6>
     c58:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <pTicks+0x7>
     c5c:	da 01       	movw	r26, r20
     c5e:	c9 01       	movw	r24, r18
     c60:	ac 01       	movw	r20, r24
     c62:	bd 01       	movw	r22, r26
     c64:	8f ed       	ldi	r24, 0xDF	; 223
     c66:	91 e2       	ldi	r25, 0x21	; 33
     c68:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN13PIDController11setSetpointEl>
			pPID.calc(pEnc.read());
     c6c:	80 ee       	ldi	r24, 0xE0	; 224
     c6e:	93 e2       	ldi	r25, 0x23	; 35
     c70:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN7Encoder4readEv>
     c74:	cc 01       	movw	r24, r24
     c76:	a0 e0       	ldi	r26, 0x00	; 0
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	ac 01       	movw	r20, r24
     c7c:	bd 01       	movw	r22, r26
     c7e:	8f ed       	ldi	r24, 0xDF	; 223
     c80:	91 e2       	ldi	r25, 0x21	; 33
     c82:	0e 94 a4 09 	call	0x1348	; 0x1348 <_ZN13PIDController4calcEl>
			pMot.setDutyCycle(pPID.get());
     c86:	8f ed       	ldi	r24, 0xDF	; 223
     c88:	91 e2       	ldi	r25, 0x21	; 33
     c8a:	0e 94 25 0a 	call	0x144a	; 0x144a <_ZN13PIDController3getEv>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	bc 01       	movw	r22, r24
     c94:	cd 01       	movw	r24, r26
     c96:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fixsfsi>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	68 2f       	mov	r22, r24
     ca0:	8c ec       	ldi	r24, 0xCC	; 204
     ca2:	93 e2       	ldi	r25, 0x23	; 35
     ca4:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN5Motor12setDutyCycleEa>
			// Serial.print("pPID: ");
			// Serial.println(pPID.get());
			// #endif

			// State Changes
			pCalc = false;
     ca8:	10 92 f6 23 	sts	0x23F6, r1	; 0x8023f6 <pCalc>
			pState = 3;
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pState>
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <_Z7primaryv+0x16a>
				pEnc.zero();

				// State Changes
				pState = 3;
			}
			return;
     cb4:	00 00       	nop

			// State Changes
			pCalc = false;
			pState = 3;
	}
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	08 95       	ret

00000cc4 <_Z9secondaryv>:



void secondary() {
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	// Serial.print("sState: ");
	// Serial.println(sState);
	// Serial.println(sEnc.read());
	// #endif
	
	switch (sState) {
     cd4:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <sState>
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	82 30       	cpi	r24, 0x02	; 2
     cde:	91 05       	cpc	r25, r1
     ce0:	e1 f1       	breq	.+120    	; 0xd5a <_Z9secondaryv+0x96>
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	91 05       	cpc	r25, r1
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <_Z9secondaryv+0x2e>
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	59 f0       	breq	.+22     	; 0xd02 <_Z9secondaryv+0x3e>
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	01 f1       	breq	.+64     	; 0xd30 <_Z9secondaryv+0x6c>
     cf0:	9e c0       	rjmp	.+316    	; 0xe2e <_Z9secondaryv+0x16a>
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <_Z9secondaryv+0x36>
     cf8:	56 c0       	rjmp	.+172    	; 0xda6 <_Z9secondaryv+0xe2>
     cfa:	04 97       	sbiw	r24, 0x04	; 4
     cfc:	09 f4       	brne	.+2      	; 0xd00 <_Z9secondaryv+0x3c>
     cfe:	5a c0       	rjmp	.+180    	; 0xdb4 <_Z9secondaryv+0xf0>
     d00:	96 c0       	rjmp	.+300    	; 0xe2e <_Z9secondaryv+0x16a>
		// INITIALIZE
		case 0:
			// Setup Motor
			sMot.init();
     d02:	86 ed       	ldi	r24, 0xD6	; 214
     d04:	93 e2       	ldi	r25, 0x23	; 35
     d06:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN5Motor4initEv>

			// Setup PID Controller
			sPID.setLoSat(-100);
     d0a:	6c e9       	ldi	r22, 0x9C	; 156
     d0c:	86 e0       	ldi	r24, 0x06	; 6
     d0e:	92 e2       	ldi	r25, 0x22	; 34
     d10:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN13PIDController8setLoSatEa>
			sPID.setHiSat( 100);
     d14:	64 e6       	ldi	r22, 0x64	; 100
     d16:	86 e0       	ldi	r24, 0x06	; 6
     d18:	92 e2       	ldi	r25, 0x22	; 34
     d1a:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN13PIDController8setHiSatEa>
			sMot.setDutyCycle(0);
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	86 ed       	ldi	r24, 0xD6	; 214
     d22:	93 e2       	ldi	r25, 0x23	; 35
     d24:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN5Motor12setDutyCycleEa>

			// State Changes
			sState = 1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 0a 24 	sts	0x240A, r24	; 0x80240a <sState>
			return;
     d2e:	7f c0       	rjmp	.+254    	; 0xe2e <_Z9secondaryv+0x16a>

		// CALIBRATE - OPEN SHEAVES
		case 1:
			sMot.setDutyCycle(-5);
     d30:	6b ef       	ldi	r22, 0xFB	; 251
     d32:	86 ed       	ldi	r24, 0xD6	; 214
     d34:	93 e2       	ldi	r25, 0x23	; 35
     d36:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN5Motor12setDutyCycleEa>
			sCalTime = micros();
     d3a:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	80 93 f0 23 	sts	0x23F0, r24	; 0x8023f0 <sCalTime>
     d46:	90 93 f1 23 	sts	0x23F1, r25	; 0x8023f1 <sCalTime+0x1>
     d4a:	a0 93 f2 23 	sts	0x23F2, r26	; 0x8023f2 <sCalTime+0x2>
     d4e:	b0 93 f3 23 	sts	0x23F3, r27	; 0x8023f3 <sCalTime+0x3>
			// State Changes
			sState = 2;
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	80 93 0a 24 	sts	0x240A, r24	; 0x80240a <sState>
			return;
     d58:	6a c0       	rjmp	.+212    	; 0xe2e <_Z9secondaryv+0x16a>

		// CALIBRATE - ZERO ENCODER
		case 2:
			if (micros() - sCalTime > CALIBRATION_DELAY) {
     d5a:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
     d5e:	9b 01       	movw	r18, r22
     d60:	ac 01       	movw	r20, r24
     d62:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <sCalTime>
     d66:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <sCalTime+0x1>
     d6a:	a0 91 f2 23 	lds	r26, 0x23F2	; 0x8023f2 <sCalTime+0x2>
     d6e:	b0 91 f3 23 	lds	r27, 0x23F3	; 0x8023f3 <sCalTime+0x3>
     d72:	79 01       	movw	r14, r18
     d74:	8a 01       	movw	r16, r20
     d76:	e8 1a       	sub	r14, r24
     d78:	f9 0a       	sbc	r15, r25
     d7a:	0a 0b       	sbc	r16, r26
     d7c:	1b 0b       	sbc	r17, r27
     d7e:	d8 01       	movw	r26, r16
     d80:	c7 01       	movw	r24, r14
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	81 34       	cpi	r24, 0x41	; 65
     d86:	92 44       	sbci	r25, 0x42	; 66
     d88:	af 40       	sbci	r26, 0x0F	; 15
     d8a:	b1 05       	cpc	r27, r1
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <_Z9secondaryv+0xcc>
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	22 23       	and	r18, r18
     d92:	09 f4       	brne	.+2      	; 0xd96 <_Z9secondaryv+0xd2>
     d94:	4b c0       	rjmp	.+150    	; 0xe2c <_Z9secondaryv+0x168>
				sEnc.zero();
     d96:	86 ee       	ldi	r24, 0xE6	; 230
     d98:	93 e2       	ldi	r25, 0x23	; 35
     d9a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN7Encoder4zeroEv>

				// State Changes
				sState = 3;
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	80 93 0a 24 	sts	0x240A, r24	; 0x80240a <sState>
			}
			return;
     da4:	43 c0       	rjmp	.+134    	; 0xe2c <_Z9secondaryv+0x168>

		// P-ONLY CONTROLLER - REST
		case 3:
			// State Changes
			if (sCalc) {
     da6:	80 91 f7 23 	lds	r24, 0x23F7	; 0x8023f7 <sCalc>
     daa:	88 23       	and	r24, r24
     dac:	19 f0       	breq	.+6      	; 0xdb4 <_Z9secondaryv+0xf0>
				sState = 4;
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	80 93 0a 24 	sts	0x240A, r24	; 0x80240a <sState>
			}

		// P-ONLY CONTROLLER - UPDATE
		case 4:
			sPID.setSetpoint(sTicks);
     db4:	20 91 00 24 	lds	r18, 0x2400	; 0x802400 <sTicks>
     db8:	30 91 01 24 	lds	r19, 0x2401	; 0x802401 <sTicks+0x1>
     dbc:	40 91 02 24 	lds	r20, 0x2402	; 0x802402 <sTicks+0x2>
     dc0:	50 91 03 24 	lds	r21, 0x2403	; 0x802403 <sTicks+0x3>
     dc4:	60 91 04 24 	lds	r22, 0x2404	; 0x802404 <sTicks+0x4>
     dc8:	70 91 05 24 	lds	r23, 0x2405	; 0x802405 <sTicks+0x5>
     dcc:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <sTicks+0x6>
     dd0:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <sTicks+0x7>
     dd4:	da 01       	movw	r26, r20
     dd6:	c9 01       	movw	r24, r18
     dd8:	ac 01       	movw	r20, r24
     dda:	bd 01       	movw	r22, r26
     ddc:	86 e0       	ldi	r24, 0x06	; 6
     dde:	92 e2       	ldi	r25, 0x22	; 34
     de0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN13PIDController11setSetpointEl>
			sPID.calc(sEnc.read());
     de4:	86 ee       	ldi	r24, 0xE6	; 230
     de6:	93 e2       	ldi	r25, 0x23	; 35
     de8:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN7Encoder4readEv>
     dec:	cc 01       	movw	r24, r24
     dee:	a0 e0       	ldi	r26, 0x00	; 0
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ac 01       	movw	r20, r24
     df4:	bd 01       	movw	r22, r26
     df6:	86 e0       	ldi	r24, 0x06	; 6
     df8:	92 e2       	ldi	r25, 0x22	; 34
     dfa:	0e 94 a4 09 	call	0x1348	; 0x1348 <_ZN13PIDController4calcEl>
			sMot.setDutyCycle(sPID.get());
     dfe:	86 e0       	ldi	r24, 0x06	; 6
     e00:	92 e2       	ldi	r25, 0x22	; 34
     e02:	0e 94 25 0a 	call	0x144a	; 0x144a <_ZN13PIDController3getEv>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	bc 01       	movw	r22, r24
     e0c:	cd 01       	movw	r24, r26
     e0e:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fixsfsi>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	68 2f       	mov	r22, r24
     e18:	86 ed       	ldi	r24, 0xD6	; 214
     e1a:	93 e2       	ldi	r25, 0x23	; 35
     e1c:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN5Motor12setDutyCycleEa>
			// Serial.print("sPID: ");
			// Serial.println(sPID.get());
			// #endif

			// State Changes
			sCalc = false;
     e20:	10 92 f7 23 	sts	0x23F7, r1	; 0x8023f7 <sCalc>
			sState = 3;
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	80 93 0a 24 	sts	0x240A, r24	; 0x80240a <sState>
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <_Z9secondaryv+0x16a>
				sEnc.zero();

				// State Changes
				sState = 3;
			}
			return;
     e2c:	00 00       	nop

			// State Changes
			sCalc = false;
			sState = 3;
	}
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	08 95       	ret

00000e3c <main>:



/* ** MAIN ** */
int main(void) {
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	// #ifdef DEBUG
	// Serial.begin(9600);
	// #endif
	
	// TEMPORARY //
	eCalc = true;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 f5 23 	sts	0x23F5, r24	; 0x8023f5 <eCalc>
	pCalc = true;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	80 93 f6 23 	sts	0x23F6, r24	; 0x8023f6 <pCalc>
	sCalc = true;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	80 93 f7 23 	sts	0x23F7, r24	; 0x8023f7 <sCalc>
	
	/* ** INPUT/OUTPUT CONFIGURATIONS ** */
	IO_Init();
     e56:	0e 94 0a 03 	call	0x614	; 0x614 <_Z7IO_Initv>
	// ** TIMER/COUNTER CONFIGURATIONS **
	TC_Init();
     e5a:	0e 94 19 0b 	call	0x1632	; 0x1632 <_Z7TC_Initv>
	
	while (true) {
		eCVT();
     e5e:	0e 94 b2 04 	call	0x964	; 0x964 <_Z4eCVTv>
		primary();
     e62:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_Z7primaryv>
		secondary();
     e66:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z9secondaryv>
	/* ** INPUT/OUTPUT CONFIGURATIONS ** */
	IO_Init();
	// ** TIMER/COUNTER CONFIGURATIONS **
	TC_Init();
	
	while (true) {
     e6a:	f9 cf       	rjmp	.-14     	; 0xe5e <main+0x22>

00000e6c <_Z41__static_initialization_and_destruction_0ii>:
		eCVT();
		primary();
		secondary();
	}
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <_Z41__static_initialization_and_destruction_0ii+0x12>
     e7e:	1f 92       	push	r1
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	6b 83       	std	Y+3, r22	; 0x03
     e8a:	7c 83       	std	Y+4, r23	; 0x04
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	09 f0       	breq	.+2      	; 0xe96 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     e94:	9a c0       	rjmp	.+308    	; 0xfca <_Z41__static_initialization_and_destruction_0ii+0x15e>
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	09 f0       	breq	.+2      	; 0xea0 <_Z41__static_initialization_and_destruction_0ii+0x34>
     e9e:	95 c0       	rjmp	.+298    	; 0xfca <_Z41__static_initialization_and_destruction_0ii+0x15e>
const uint16_t SHIFT_SPEED  = 3400;

const uint16_t SHEAVE_OFFSET = 0;

// PID Controllers
PIDController ePID(1, 1, 0);
     ea0:	c1 2c       	mov	r12, r1
     ea2:	d1 2c       	mov	r13, r1
     ea4:	76 01       	movw	r14, r12
     ea6:	00 e0       	ldi	r16, 0x00	; 0
     ea8:	10 e0       	ldi	r17, 0x00	; 0
     eaa:	20 e8       	ldi	r18, 0x80	; 128
     eac:	3f e3       	ldi	r19, 0x3F	; 63
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	60 e8       	ldi	r22, 0x80	; 128
     eb4:	7f e3       	ldi	r23, 0x3F	; 63
     eb6:	88 eb       	ldi	r24, 0xB8	; 184
     eb8:	91 e2       	ldi	r25, 0x21	; 33
     eba:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN13PIDControllerC1Efff>
PIDController pPID(0.01, 0, 0);
     ebe:	c1 2c       	mov	r12, r1
     ec0:	d1 2c       	mov	r13, r1
     ec2:	76 01       	movw	r14, r12
     ec4:	00 e0       	ldi	r16, 0x00	; 0
     ec6:	10 e0       	ldi	r17, 0x00	; 0
     ec8:	98 01       	movw	r18, r16
     eca:	4a e0       	ldi	r20, 0x0A	; 10
     ecc:	57 ed       	ldi	r21, 0xD7	; 215
     ece:	63 e2       	ldi	r22, 0x23	; 35
     ed0:	7c e3       	ldi	r23, 0x3C	; 60
     ed2:	8f ed       	ldi	r24, 0xDF	; 223
     ed4:	91 e2       	ldi	r25, 0x21	; 33
     ed6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN13PIDControllerC1Efff>
PIDController sPID(0.01, 0, 0);
     eda:	c1 2c       	mov	r12, r1
     edc:	d1 2c       	mov	r13, r1
     ede:	76 01       	movw	r14, r12
     ee0:	00 e0       	ldi	r16, 0x00	; 0
     ee2:	10 e0       	ldi	r17, 0x00	; 0
     ee4:	98 01       	movw	r18, r16
     ee6:	4a e0       	ldi	r20, 0x0A	; 10
     ee8:	57 ed       	ldi	r21, 0xD7	; 215
     eea:	63 e2       	ldi	r22, 0x23	; 35
     eec:	7c e3       	ldi	r23, 0x3C	; 60
     eee:	86 e0       	ldi	r24, 0x06	; 6
     ef0:	92 e2       	ldi	r25, 0x22	; 34
     ef2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN13PIDControllerC1Efff>

// Hall Effect Sensors
EngineSpeed engineSpeed(8);
     ef6:	68 e0       	ldi	r22, 0x08	; 8
     ef8:	8d e2       	ldi	r24, 0x2D	; 45
     efa:	92 e2       	ldi	r25, 0x22	; 34
     efc:	0e 94 03 02 	call	0x406	; 0x406 <_ZN11EngineSpeedC1Eh>
WheelSpeed rWheelsSpeed(8);
     f00:	68 e0       	ldi	r22, 0x08	; 8
     f02:	83 ec       	ldi	r24, 0xC3	; 195
     f04:	93 e2       	ldi	r25, 0x23	; 35
     f06:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN10WheelSpeedC1Eh>

// Motors
Motor pMot(P_MOT_INA, P_MOT_INB, P_MOT_PWM);
     f0a:	e0 90 0c 20 	lds	r14, 0x200C	; 0x80200c <_ZL9P_MOT_PWM>
     f0e:	f0 90 0d 20 	lds	r15, 0x200D	; 0x80200d <_ZL9P_MOT_PWM+0x1>
     f12:	00 91 0e 20 	lds	r16, 0x200E	; 0x80200e <_ZL9P_MOT_PWM+0x2>
     f16:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <_ZL9P_MOT_INB>
     f1a:	30 91 0a 20 	lds	r19, 0x200A	; 0x80200a <_ZL9P_MOT_INB+0x1>
     f1e:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <_ZL9P_MOT_INB+0x2>
     f22:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZL9P_MOT_INA>
     f26:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZL9P_MOT_INA+0x1>
     f2a:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <_ZL9P_MOT_INA+0x2>
     f2e:	67 01       	movw	r12, r14
     f30:	e0 2e       	mov	r14, r16
     f32:	89 01       	movw	r16, r18
     f34:	24 2f       	mov	r18, r20
     f36:	ac 01       	movw	r20, r24
     f38:	6a 2f       	mov	r22, r26
     f3a:	8c ec       	ldi	r24, 0xCC	; 204
     f3c:	93 e2       	ldi	r25, 0x23	; 35
     f3e:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN5MotorC1E3PinS0_S0_>
Motor sMot(S_MOT_INA, S_MOT_INB, S_MOT_PWM);
     f42:	e0 90 1b 20 	lds	r14, 0x201B	; 0x80201b <_ZL9S_MOT_PWM>
     f46:	f0 90 1c 20 	lds	r15, 0x201C	; 0x80201c <_ZL9S_MOT_PWM+0x1>
     f4a:	00 91 1d 20 	lds	r16, 0x201D	; 0x80201d <_ZL9S_MOT_PWM+0x2>
     f4e:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <_ZL9S_MOT_INB>
     f52:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <_ZL9S_MOT_INB+0x1>
     f56:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <_ZL9S_MOT_INB+0x2>
     f5a:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <_ZL9S_MOT_INA>
     f5e:	90 91 16 20 	lds	r25, 0x2016	; 0x802016 <_ZL9S_MOT_INA+0x1>
     f62:	a0 91 17 20 	lds	r26, 0x2017	; 0x802017 <_ZL9S_MOT_INA+0x2>
     f66:	67 01       	movw	r12, r14
     f68:	e0 2e       	mov	r14, r16
     f6a:	89 01       	movw	r16, r18
     f6c:	24 2f       	mov	r18, r20
     f6e:	ac 01       	movw	r20, r24
     f70:	6a 2f       	mov	r22, r26
     f72:	86 ed       	ldi	r24, 0xD6	; 214
     f74:	93 e2       	ldi	r25, 0x23	; 35
     f76:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN5MotorC1E3PinS0_S0_>

// Encoders
Encoder pEnc(P_ENC_A, P_ENC_B);
     f7a:	20 91 12 20 	lds	r18, 0x2012	; 0x802012 <_ZL7P_ENC_B>
     f7e:	30 91 13 20 	lds	r19, 0x2013	; 0x802013 <_ZL7P_ENC_B+0x1>
     f82:	40 91 14 20 	lds	r20, 0x2014	; 0x802014 <_ZL7P_ENC_B+0x2>
     f86:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <_ZL7P_ENC_A>
     f8a:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <_ZL7P_ENC_A+0x1>
     f8e:	a0 91 11 20 	lds	r26, 0x2011	; 0x802011 <_ZL7P_ENC_A+0x2>
     f92:	89 01       	movw	r16, r18
     f94:	24 2f       	mov	r18, r20
     f96:	ac 01       	movw	r20, r24
     f98:	6a 2f       	mov	r22, r26
     f9a:	80 ee       	ldi	r24, 0xE0	; 224
     f9c:	93 e2       	ldi	r25, 0x23	; 35
     f9e:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7EncoderC1E3PinS0_>
Encoder sEnc(S_ENC_A, S_ENC_B);
     fa2:	20 91 21 20 	lds	r18, 0x2021	; 0x802021 <_ZL7S_ENC_B>
     fa6:	30 91 22 20 	lds	r19, 0x2022	; 0x802022 <_ZL7S_ENC_B+0x1>
     faa:	40 91 23 20 	lds	r20, 0x2023	; 0x802023 <_ZL7S_ENC_B+0x2>
     fae:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <_ZL7S_ENC_A>
     fb2:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <_ZL7S_ENC_A+0x1>
     fb6:	a0 91 20 20 	lds	r26, 0x2020	; 0x802020 <_ZL7S_ENC_A+0x2>
     fba:	89 01       	movw	r16, r18
     fbc:	24 2f       	mov	r18, r20
     fbe:	ac 01       	movw	r20, r24
     fc0:	6a 2f       	mov	r22, r26
     fc2:	86 ee       	ldi	r24, 0xE6	; 230
     fc4:	93 e2       	ldi	r25, 0x23	; 35
     fc6:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7EncoderC1E3PinS0_>
	while (true) {
		eCVT();
		primary();
		secondary();
	}
     fca:	00 00       	nop
     fcc:	24 96       	adiw	r28, 0x04	; 4
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	08 95       	ret

00000fe4 <_GLOBAL__sub_I_ePID>:
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	6f ef       	ldi	r22, 0xFF	; 255
     fee:	7f ef       	ldi	r23, 0xFF	; 255
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 36 07 	call	0xe6c	; 0xe6c <_Z41__static_initialization_and_destruction_0ii>
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	08 95       	ret

00000ffe <_ZN5MotorC1E3PinS0_S0_>:
 *  @details	This constructor creates a motor object with the given pins.
 *  @param		INA The first direction pin of the motor driver.
 *	@param		INB The second direction pin of the motor driver.
 *	@param		PWM The duty cycle pin of the motor driver.
 */
Motor::Motor(Pin INA, Pin INB, Pin PWM) {
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	2b 97       	sbiw	r28, 0x0b	; 11
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	4b 83       	std	Y+3, r20	; 0x03
    101c:	5c 83       	std	Y+4, r21	; 0x04
    101e:	6d 83       	std	Y+5, r22	; 0x05
    1020:	0e 83       	std	Y+6, r16	; 0x06
    1022:	1f 83       	std	Y+7, r17	; 0x07
    1024:	28 87       	std	Y+8, r18	; 0x08
    1026:	c9 86       	std	Y+9, r12	; 0x09
    1028:	da 86       	std	Y+10, r13	; 0x0a
    102a:	eb 86       	std	Y+11, r14	; 0x0b
	this->INA = INA;
    102c:	29 81       	ldd	r18, Y+1	; 0x01
    102e:	3a 81       	ldd	r19, Y+2	; 0x02
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	ad 81       	ldd	r26, Y+5	; 0x05
    1036:	f9 01       	movw	r30, r18
    1038:	80 83       	st	Z, r24
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	a2 83       	std	Z+2, r26	; 0x02
	this->INB = INB;
    103e:	29 81       	ldd	r18, Y+1	; 0x01
    1040:	3a 81       	ldd	r19, Y+2	; 0x02
    1042:	8e 81       	ldd	r24, Y+6	; 0x06
    1044:	9f 81       	ldd	r25, Y+7	; 0x07
    1046:	a8 85       	ldd	r26, Y+8	; 0x08
    1048:	f9 01       	movw	r30, r18
    104a:	83 83       	std	Z+3, r24	; 0x03
    104c:	94 83       	std	Z+4, r25	; 0x04
    104e:	a5 83       	std	Z+5, r26	; 0x05
	this->PWM = PWM;
    1050:	29 81       	ldd	r18, Y+1	; 0x01
    1052:	3a 81       	ldd	r19, Y+2	; 0x02
    1054:	89 85       	ldd	r24, Y+9	; 0x09
    1056:	9a 85       	ldd	r25, Y+10	; 0x0a
    1058:	ab 85       	ldd	r26, Y+11	; 0x0b
    105a:	f9 01       	movw	r30, r18
    105c:	86 83       	std	Z+6, r24	; 0x06
    105e:	97 83       	std	Z+7, r25	; 0x07
    1060:	a0 87       	std	Z+8, r26	; 0x08
}
    1062:	00 00       	nop
    1064:	2b 96       	adiw	r28, 0x0b	; 11
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	cf 90       	pop	r12
    1078:	08 95       	ret

0000107a <_ZN5Motor4initEv>:

/** @brief		Configures the pins.
 *  @details	This function configures the direction pins (that is, INA and
 *				INB) and duty cycle pin (that is, PWM) as output pins.
 */
void Motor::init() {
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	1f 92       	push	r1
    1080:	1f 92       	push	r1
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	9a 83       	std	Y+2, r25	; 0x02
	INA.PORT->DIRSET = INA.PIN_BM | INB.PIN_BM;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	fc 01       	movw	r30, r24
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	29 81       	ldd	r18, Y+1	; 0x01
    1096:	3a 81       	ldd	r19, Y+2	; 0x02
    1098:	f9 01       	movw	r30, r18
    109a:	42 81       	ldd	r20, Z+2	; 0x02
    109c:	29 81       	ldd	r18, Y+1	; 0x01
    109e:	3a 81       	ldd	r19, Y+2	; 0x02
    10a0:	f9 01       	movw	r30, r18
    10a2:	25 81       	ldd	r18, Z+5	; 0x05
    10a4:	24 2b       	or	r18, r20
    10a6:	fc 01       	movw	r30, r24
    10a8:	21 83       	std	Z+1, r18	; 0x01
	PWM.PORT->DIRSET = PWM.PIN_BM;
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	fc 01       	movw	r30, r24
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	97 81       	ldd	r25, Z+7	; 0x07
    10b4:	29 81       	ldd	r18, Y+1	; 0x01
    10b6:	3a 81       	ldd	r19, Y+2	; 0x02
    10b8:	f9 01       	movw	r30, r18
    10ba:	20 85       	ldd	r18, Z+8	; 0x08
    10bc:	fc 01       	movw	r30, r24
    10be:	21 83       	std	Z+1, r18	; 0x01
}
    10c0:	00 00       	nop
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <_ZN5Motor12setDutyCycleEa>:
 *				the direction pins depending on the sign of the duty cycle and
 *				scales the absolute value of the provided duty cycle to the PWM
 *				pin.
 *  @param		dutyCycle the duty cycle the motor is set to 
 */
void Motor::setDutyCycle(int8_t dutyCycle) {
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <_ZN5Motor12setDutyCycleEa+0x6>
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	6b 83       	std	Y+3, r22	; 0x03
	// Normalize duty cycle, determine direction
	if (dutyCycle < 0) {
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	88 23       	and	r24, r24
    10e0:	4c f4       	brge	.+18     	; 0x10f4 <_ZN5Motor12setDutyCycleEa+0x28>
		dutyCycle *= -1;
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	81 95       	neg	r24
    10e6:	8b 83       	std	Y+3, r24	; 0x03
		negative = true;
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	21 e0       	ldi	r18, 0x01	; 1
    10ee:	fc 01       	movw	r30, r24
    10f0:	21 87       	std	Z+9, r18	; 0x09
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <_ZN5Motor12setDutyCycleEa+0x30>
	} else {
		negative = false;
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	fc 01       	movw	r30, r24
    10fa:	11 86       	std	Z+9, r1	; 0x09
	}

	// Saturate duty cycle
	if (dutyCycle > 100) {
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	85 36       	cpi	r24, 0x65	; 101
    1100:	14 f0       	brlt	.+4      	; 0x1106 <_ZN5Motor12setDutyCycleEa+0x3a>
		dutyCycle = 100;
    1102:	84 e6       	ldi	r24, 0x64	; 100
    1104:	8b 83       	std	Y+3, r24	; 0x03
	}

	// Write PWM, scale 100 to 255
	analogWrite(PWM, dutyCycle);
    1106:	2b 81       	ldd	r18, Y+3	; 0x03
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	9a 81       	ldd	r25, Y+2	; 0x02
    110c:	fc 01       	movw	r30, r24
    110e:	86 81       	ldd	r24, Z+6	; 0x06
    1110:	97 81       	ldd	r25, Z+7	; 0x07
    1112:	a0 85       	ldd	r26, Z+8	; 0x08
    1114:	42 2f       	mov	r20, r18
    1116:	bc 01       	movw	r22, r24
    1118:	8a 2f       	mov	r24, r26
    111a:	0e 94 b5 0b 	call	0x176a	; 0x176a <_Z11analogWrite3Pinh>

	// Coast (indpendent of direction)
	if (dutyCycle == 0) {
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 23       	and	r24, r24
    1122:	b9 f4       	brne	.+46     	; 0x1152 <_ZN5Motor12setDutyCycleEa+0x86>
		INA.PORT->OUTCLR = INA.PIN_BM;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	fc 01       	movw	r30, r24
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	29 81       	ldd	r18, Y+1	; 0x01
    1130:	3a 81       	ldd	r19, Y+2	; 0x02
    1132:	f9 01       	movw	r30, r18
    1134:	22 81       	ldd	r18, Z+2	; 0x02
    1136:	fc 01       	movw	r30, r24
    1138:	26 83       	std	Z+6, r18	; 0x06
		INB.PORT->OUTCLR = INB.PIN_BM;
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	fc 01       	movw	r30, r24
    1140:	83 81       	ldd	r24, Z+3	; 0x03
    1142:	94 81       	ldd	r25, Z+4	; 0x04
    1144:	29 81       	ldd	r18, Y+1	; 0x01
    1146:	3a 81       	ldd	r19, Y+2	; 0x02
    1148:	f9 01       	movw	r30, r18
    114a:	25 81       	ldd	r18, Z+5	; 0x05
    114c:	fc 01       	movw	r30, r24
    114e:	26 83       	std	Z+6, r18	; 0x06
	// Positive
	} else {
		INA.PORT->OUTSET = INA.PIN_BM;
		INB.PORT->OUTCLR = INB.PIN_BM;
	}
    1150:	33 c0       	rjmp	.+102    	; 0x11b8 <_ZN5Motor12setDutyCycleEa+0xec>
	// Coast (indpendent of direction)
	if (dutyCycle == 0) {
		INA.PORT->OUTCLR = INA.PIN_BM;
		INB.PORT->OUTCLR = INB.PIN_BM;
	// Negative
	} else if (negative) {
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	fc 01       	movw	r30, r24
    1158:	81 85       	ldd	r24, Z+9	; 0x09
    115a:	88 23       	and	r24, r24
    115c:	b9 f0       	breq	.+46     	; 0x118c <_ZN5Motor12setDutyCycleEa+0xc0>
		INA.PORT->OUTCLR = INA.PIN_BM;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	fc 01       	movw	r30, r24
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	29 81       	ldd	r18, Y+1	; 0x01
    116a:	3a 81       	ldd	r19, Y+2	; 0x02
    116c:	f9 01       	movw	r30, r18
    116e:	22 81       	ldd	r18, Z+2	; 0x02
    1170:	fc 01       	movw	r30, r24
    1172:	26 83       	std	Z+6, r18	; 0x06
		INB.PORT->OUTSET = INB.PIN_BM;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	fc 01       	movw	r30, r24
    117a:	83 81       	ldd	r24, Z+3	; 0x03
    117c:	94 81       	ldd	r25, Z+4	; 0x04
    117e:	29 81       	ldd	r18, Y+1	; 0x01
    1180:	3a 81       	ldd	r19, Y+2	; 0x02
    1182:	f9 01       	movw	r30, r18
    1184:	25 81       	ldd	r18, Z+5	; 0x05
    1186:	fc 01       	movw	r30, r24
    1188:	25 83       	std	Z+5, r18	; 0x05
	// Positive
	} else {
		INA.PORT->OUTSET = INA.PIN_BM;
		INB.PORT->OUTCLR = INB.PIN_BM;
	}
    118a:	16 c0       	rjmp	.+44     	; 0x11b8 <_ZN5Motor12setDutyCycleEa+0xec>
	} else if (negative) {
		INA.PORT->OUTCLR = INA.PIN_BM;
		INB.PORT->OUTSET = INB.PIN_BM;
	// Positive
	} else {
		INA.PORT->OUTSET = INA.PIN_BM;
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	fc 01       	movw	r30, r24
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	29 81       	ldd	r18, Y+1	; 0x01
    1198:	3a 81       	ldd	r19, Y+2	; 0x02
    119a:	f9 01       	movw	r30, r18
    119c:	22 81       	ldd	r18, Z+2	; 0x02
    119e:	fc 01       	movw	r30, r24
    11a0:	25 83       	std	Z+5, r18	; 0x05
		INB.PORT->OUTCLR = INB.PIN_BM;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	fc 01       	movw	r30, r24
    11a8:	83 81       	ldd	r24, Z+3	; 0x03
    11aa:	94 81       	ldd	r25, Z+4	; 0x04
    11ac:	29 81       	ldd	r18, Y+1	; 0x01
    11ae:	3a 81       	ldd	r19, Y+2	; 0x02
    11b0:	f9 01       	movw	r30, r18
    11b2:	25 81       	ldd	r18, Z+5	; 0x05
    11b4:	fc 01       	movw	r30, r24
    11b6:	26 83       	std	Z+6, r18	; 0x06
	}
    11b8:	00 00       	nop
    11ba:	23 96       	adiw	r28, 0x03	; 3
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <_ZN13PIDControllerC1Efff>:
/** @brief		Updates the derivative gain.
 *  @details	This function updates the derivative gain to a new value
 *				during use.
 *  @param		Kd The new derivative gain for the controller.
 */
void PIDController::setKd(float Kd) { this->Kd = Kd; }
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	2e 97       	sbiw	r28, 0x0e	; 14
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	4b 83       	std	Y+3, r20	; 0x03
    11e6:	5c 83       	std	Y+4, r21	; 0x04
    11e8:	6d 83       	std	Y+5, r22	; 0x05
    11ea:	7e 83       	std	Y+6, r23	; 0x06
    11ec:	0f 83       	std	Y+7, r16	; 0x07
    11ee:	18 87       	std	Y+8, r17	; 0x08
    11f0:	29 87       	std	Y+9, r18	; 0x09
    11f2:	3a 87       	std	Y+10, r19	; 0x0a
    11f4:	cb 86       	std	Y+11, r12	; 0x0b
    11f6:	dc 86       	std	Y+12, r13	; 0x0c
    11f8:	ed 86       	std	Y+13, r14	; 0x0d
    11fa:	fe 86       	std	Y+14, r15	; 0x0e
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	fc 01       	movw	r30, r24
    1202:	10 82       	st	Z, r1
    1204:	11 82       	std	Z+1, r1	; 0x01
    1206:	12 82       	std	Z+2, r1	; 0x02
    1208:	13 82       	std	Z+3, r1	; 0x03
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	fc 01       	movw	r30, r24
    1210:	14 82       	std	Z+4, r1	; 0x04
    1212:	15 82       	std	Z+5, r1	; 0x05
    1214:	16 82       	std	Z+6, r1	; 0x06
    1216:	17 82       	std	Z+7, r1	; 0x07
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	fc 01       	movw	r30, r24
    121e:	10 86       	std	Z+8, r1	; 0x08
    1220:	11 86       	std	Z+9, r1	; 0x09
    1222:	12 86       	std	Z+10, r1	; 0x0a
    1224:	13 86       	std	Z+11, r1	; 0x0b
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	fc 01       	movw	r30, r24
    122c:	14 86       	std	Z+12, r1	; 0x0c
    122e:	15 86       	std	Z+13, r1	; 0x0d
    1230:	16 86       	std	Z+14, r1	; 0x0e
    1232:	17 86       	std	Z+15, r1	; 0x0f
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	fc 01       	movw	r30, r24
    123a:	10 8a       	std	Z+16, r1	; 0x10
    123c:	11 8a       	std	Z+17, r1	; 0x11
    123e:	12 8a       	std	Z+18, r1	; 0x12
    1240:	13 8a       	std	Z+19, r1	; 0x13
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	9a 81       	ldd	r25, Y+2	; 0x02
    1246:	fc 01       	movw	r30, r24
    1248:	14 8a       	std	Z+20, r1	; 0x14
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	fc 01       	movw	r30, r24
    1250:	15 8a       	std	Z+21, r1	; 0x15
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	fc 01       	movw	r30, r24
    1258:	13 a2       	std	Z+35, r1	; 0x23
    125a:	14 a2       	std	Z+36, r1	; 0x24
    125c:	15 a2       	std	Z+37, r1	; 0x25
    125e:	16 a2       	std	Z+38, r1	; 0x26
    1260:	29 81       	ldd	r18, Y+1	; 0x01
    1262:	3a 81       	ldd	r19, Y+2	; 0x02
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	ad 81       	ldd	r26, Y+5	; 0x05
    126a:	be 81       	ldd	r27, Y+6	; 0x06
    126c:	f9 01       	movw	r30, r18
    126e:	87 8b       	std	Z+23, r24	; 0x17
    1270:	90 8f       	std	Z+24, r25	; 0x18
    1272:	a1 8f       	std	Z+25, r26	; 0x19
    1274:	b2 8f       	std	Z+26, r27	; 0x1a
    1276:	29 81       	ldd	r18, Y+1	; 0x01
    1278:	3a 81       	ldd	r19, Y+2	; 0x02
    127a:	8f 81       	ldd	r24, Y+7	; 0x07
    127c:	98 85       	ldd	r25, Y+8	; 0x08
    127e:	a9 85       	ldd	r26, Y+9	; 0x09
    1280:	ba 85       	ldd	r27, Y+10	; 0x0a
    1282:	f9 01       	movw	r30, r18
    1284:	83 8f       	std	Z+27, r24	; 0x1b
    1286:	94 8f       	std	Z+28, r25	; 0x1c
    1288:	a5 8f       	std	Z+29, r26	; 0x1d
    128a:	b6 8f       	std	Z+30, r27	; 0x1e
    128c:	29 81       	ldd	r18, Y+1	; 0x01
    128e:	3a 81       	ldd	r19, Y+2	; 0x02
    1290:	8b 85       	ldd	r24, Y+11	; 0x0b
    1292:	9c 85       	ldd	r25, Y+12	; 0x0c
    1294:	ad 85       	ldd	r26, Y+13	; 0x0d
    1296:	be 85       	ldd	r27, Y+14	; 0x0e
    1298:	f9 01       	movw	r30, r18
    129a:	87 8f       	std	Z+31, r24	; 0x1f
    129c:	90 a3       	std	Z+32, r25	; 0x20
    129e:	a1 a3       	std	Z+33, r26	; 0x21
    12a0:	b2 a3       	std	Z+34, r27	; 0x22
    12a2:	00 00       	nop
    12a4:	2e 96       	adiw	r28, 0x0e	; 14
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	df 90       	pop	r13
    12b8:	cf 90       	pop	r12
    12ba:	08 95       	ret

000012bc <_ZN13PIDController11setSetpointEl>:
// Mutator Methods
/** @brief		Updates the setpoint.
 *  @details	This function updates the setpoint to a new value during use.
 *  @param		setpoint The new proportional gain for the controller.
 */
void PIDController::setSetpoint(int32_t setpoint) { this->setpoint = setpoint; }
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <_ZN13PIDController11setSetpointEl+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <_ZN13PIDController11setSetpointEl+0x8>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	4b 83       	std	Y+3, r20	; 0x03
    12ce:	5c 83       	std	Y+4, r21	; 0x04
    12d0:	6d 83       	std	Y+5, r22	; 0x05
    12d2:	7e 83       	std	Y+6, r23	; 0x06
    12d4:	29 81       	ldd	r18, Y+1	; 0x01
    12d6:	3a 81       	ldd	r19, Y+2	; 0x02
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	ad 81       	ldd	r26, Y+5	; 0x05
    12de:	be 81       	ldd	r27, Y+6	; 0x06
    12e0:	f9 01       	movw	r30, r18
    12e2:	80 83       	st	Z, r24
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	a2 83       	std	Z+2, r26	; 0x02
    12e8:	b3 83       	std	Z+3, r27	; 0x03
    12ea:	00 00       	nop
    12ec:	26 96       	adiw	r28, 0x06	; 6
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <_ZN13PIDController8setLoSatEa>:
/** @brief		Updates the low saturation limit.
 *  @details	This function updates the low saturation limit to a new value
 *				during use.
 *  @param		loSat The new low saturation limit for the controller.
 */
void PIDController::setLoSat(int8_t loSat) { this->loSat = loSat; }
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <_ZN13PIDController8setLoSatEa+0x6>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	6b 83       	std	Y+3, r22	; 0x03
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	9a 81       	ldd	r25, Y+2	; 0x02
    130c:	2b 81       	ldd	r18, Y+3	; 0x03
    130e:	fc 01       	movw	r30, r24
    1310:	24 8b       	std	Z+20, r18	; 0x14
    1312:	00 00       	nop
    1314:	23 96       	adiw	r28, 0x03	; 3
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <_ZN13PIDController8setHiSatEa>:
/** @brief		Updates the high saturation limit.
 *  @details	This function updates the high saturation limit to a new value
 *				during use.
 *  @param		hiSat The new high saturation limit for the controller.
 */
void PIDController::setHiSat(int8_t hiSat) { this->hiSat = hiSat; }
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	00 d0       	rcall	.+0      	; 0x1326 <_ZN13PIDController8setHiSatEa+0x6>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	6b 83       	std	Y+3, r22	; 0x03
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	2b 81       	ldd	r18, Y+3	; 0x03
    1336:	fc 01       	movw	r30, r24
    1338:	25 8b       	std	Z+21, r18	; 0x15
    133a:	00 00       	nop
    133c:	23 96       	adiw	r28, 0x03	; 3
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <_ZN13PIDController4calcEl>:
 *				derivative values. These values can be used to calculate the
 *				PID output and saturation status, but this calculation is left
 *				until the get() function is called to minimize the time spent
 *				in the interrupt service routine.
 */
void PIDController::calc(int32_t measurement) {
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	00 d0       	rcall	.+0      	; 0x1356 <_ZN13PIDController4calcEl+0xe>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <_ZN13PIDController4calcEl+0x10>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	4b 83       	std	Y+3, r20	; 0x03
    1362:	5c 83       	std	Y+4, r21	; 0x04
    1364:	6d 83       	std	Y+5, r22	; 0x05
    1366:	7e 83       	std	Y+6, r23	; 0x06
	// Store previous error
	prev = error;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	fc 01       	movw	r30, r24
    136e:	80 85       	ldd	r24, Z+8	; 0x08
    1370:	91 85       	ldd	r25, Z+9	; 0x09
    1372:	a2 85       	ldd	r26, Z+10	; 0x0a
    1374:	b3 85       	ldd	r27, Z+11	; 0x0b
    1376:	29 81       	ldd	r18, Y+1	; 0x01
    1378:	3a 81       	ldd	r19, Y+2	; 0x02
    137a:	f9 01       	movw	r30, r18
    137c:	84 83       	std	Z+4, r24	; 0x04
    137e:	95 83       	std	Z+5, r25	; 0x05
    1380:	a6 83       	std	Z+6, r26	; 0x06
    1382:	b7 83       	std	Z+7, r27	; 0x07
	// P
	error = setpoint - measurement;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	fc 01       	movw	r30, r24
    138a:	20 81       	ld	r18, Z
    138c:	31 81       	ldd	r19, Z+1	; 0x01
    138e:	42 81       	ldd	r20, Z+2	; 0x02
    1390:	53 81       	ldd	r21, Z+3	; 0x03
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	ad 81       	ldd	r26, Y+5	; 0x05
    1398:	be 81       	ldd	r27, Y+6	; 0x06
    139a:	79 01       	movw	r14, r18
    139c:	8a 01       	movw	r16, r20
    139e:	e8 1a       	sub	r14, r24
    13a0:	f9 0a       	sbc	r15, r25
    13a2:	0a 0b       	sbc	r16, r26
    13a4:	1b 0b       	sbc	r17, r27
    13a6:	d8 01       	movw	r26, r16
    13a8:	c7 01       	movw	r24, r14
    13aa:	29 81       	ldd	r18, Y+1	; 0x01
    13ac:	3a 81       	ldd	r19, Y+2	; 0x02
    13ae:	f9 01       	movw	r30, r18
    13b0:	80 87       	std	Z+8, r24	; 0x08
    13b2:	91 87       	std	Z+9, r25	; 0x09
    13b4:	a2 87       	std	Z+10, r26	; 0x0a
    13b6:	b3 87       	std	Z+11, r27	; 0x0b
	// I
	if (!saturated) {
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	9a 81       	ldd	r25, Y+2	; 0x02
    13bc:	fc 01       	movw	r30, r24
    13be:	96 89       	ldd	r25, Z+22	; 0x16
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	89 27       	eor	r24, r25
    13c4:	88 23       	and	r24, r24
    13c6:	c9 f0       	breq	.+50     	; 0x13fa <_ZN13PIDController4calcEl+0xb2>
		integral += error;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	9a 81       	ldd	r25, Y+2	; 0x02
    13cc:	fc 01       	movw	r30, r24
    13ce:	24 85       	ldd	r18, Z+12	; 0x0c
    13d0:	35 85       	ldd	r19, Z+13	; 0x0d
    13d2:	46 85       	ldd	r20, Z+14	; 0x0e
    13d4:	57 85       	ldd	r21, Z+15	; 0x0f
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	fc 01       	movw	r30, r24
    13dc:	80 85       	ldd	r24, Z+8	; 0x08
    13de:	91 85       	ldd	r25, Z+9	; 0x09
    13e0:	a2 85       	ldd	r26, Z+10	; 0x0a
    13e2:	b3 85       	ldd	r27, Z+11	; 0x0b
    13e4:	82 0f       	add	r24, r18
    13e6:	93 1f       	adc	r25, r19
    13e8:	a4 1f       	adc	r26, r20
    13ea:	b5 1f       	adc	r27, r21
    13ec:	29 81       	ldd	r18, Y+1	; 0x01
    13ee:	3a 81       	ldd	r19, Y+2	; 0x02
    13f0:	f9 01       	movw	r30, r18
    13f2:	84 87       	std	Z+12, r24	; 0x0c
    13f4:	95 87       	std	Z+13, r25	; 0x0d
    13f6:	a6 87       	std	Z+14, r26	; 0x0e
    13f8:	b7 87       	std	Z+15, r27	; 0x0f
	}
	// D
	derivative = error - prev;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
    13fe:	fc 01       	movw	r30, r24
    1400:	20 85       	ldd	r18, Z+8	; 0x08
    1402:	31 85       	ldd	r19, Z+9	; 0x09
    1404:	42 85       	ldd	r20, Z+10	; 0x0a
    1406:	53 85       	ldd	r21, Z+11	; 0x0b
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	9a 81       	ldd	r25, Y+2	; 0x02
    140c:	fc 01       	movw	r30, r24
    140e:	84 81       	ldd	r24, Z+4	; 0x04
    1410:	95 81       	ldd	r25, Z+5	; 0x05
    1412:	a6 81       	ldd	r26, Z+6	; 0x06
    1414:	b7 81       	ldd	r27, Z+7	; 0x07
    1416:	79 01       	movw	r14, r18
    1418:	8a 01       	movw	r16, r20
    141a:	e8 1a       	sub	r14, r24
    141c:	f9 0a       	sbc	r15, r25
    141e:	0a 0b       	sbc	r16, r26
    1420:	1b 0b       	sbc	r17, r27
    1422:	d8 01       	movw	r26, r16
    1424:	c7 01       	movw	r24, r14
    1426:	29 81       	ldd	r18, Y+1	; 0x01
    1428:	3a 81       	ldd	r19, Y+2	; 0x02
    142a:	f9 01       	movw	r30, r18
    142c:	80 8b       	std	Z+16, r24	; 0x10
    142e:	91 8b       	std	Z+17, r25	; 0x11
    1430:	a2 8b       	std	Z+18, r26	; 0x12
    1432:	b3 8b       	std	Z+19, r27	; 0x13
}
    1434:	00 00       	nop
    1436:	26 96       	adiw	r28, 0x06	; 6
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	08 95       	ret

0000144a <_ZN13PIDController3getEv>:
 *				saturation limit. If the PID output is outside of the
 *				saturation limits, the saturation status is set to true, else
 *				it is set to false. The PID output is then returned.
 *  @return		get The PID output as a float.
 */
float PIDController::get() {
    144a:	8f 92       	push	r8
    144c:	9f 92       	push	r9
    144e:	af 92       	push	r10
    1450:	bf 92       	push	r11
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	1f 92       	push	r1
    1460:	1f 92       	push	r1
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	9a 83       	std	Y+2, r25	; 0x02
	// Calculate output
	output = Kp * error + Ki * integral + Kd * derivative;
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	fc 01       	movw	r30, r24
    1470:	c7 88       	ldd	r12, Z+23	; 0x17
    1472:	d0 8c       	ldd	r13, Z+24	; 0x18
    1474:	e1 8c       	ldd	r14, Z+25	; 0x19
    1476:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	fc 01       	movw	r30, r24
    147e:	80 85       	ldd	r24, Z+8	; 0x08
    1480:	91 85       	ldd	r25, Z+9	; 0x09
    1482:	a2 85       	ldd	r26, Z+10	; 0x0a
    1484:	b3 85       	ldd	r27, Z+11	; 0x0b
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__floatsisf>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9c 01       	movw	r18, r24
    1494:	ad 01       	movw	r20, r26
    1496:	c7 01       	movw	r24, r14
    1498:	b6 01       	movw	r22, r12
    149a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	4c 01       	movw	r8, r24
    14a4:	5d 01       	movw	r10, r26
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	fc 01       	movw	r30, r24
    14ac:	c3 8c       	ldd	r12, Z+27	; 0x1b
    14ae:	d4 8c       	ldd	r13, Z+28	; 0x1c
    14b0:	e5 8c       	ldd	r14, Z+29	; 0x1d
    14b2:	f6 8c       	ldd	r15, Z+30	; 0x1e
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	fc 01       	movw	r30, r24
    14ba:	84 85       	ldd	r24, Z+12	; 0x0c
    14bc:	95 85       	ldd	r25, Z+13	; 0x0d
    14be:	a6 85       	ldd	r26, Z+14	; 0x0e
    14c0:	b7 85       	ldd	r27, Z+15	; 0x0f
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__floatsisf>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	9c 01       	movw	r18, r24
    14d0:	ad 01       	movw	r20, r26
    14d2:	c7 01       	movw	r24, r14
    14d4:	b6 01       	movw	r22, r12
    14d6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9c 01       	movw	r18, r24
    14e0:	ad 01       	movw	r20, r26
    14e2:	c5 01       	movw	r24, r10
    14e4:	b4 01       	movw	r22, r8
    14e6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__addsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	4c 01       	movw	r8, r24
    14f0:	5d 01       	movw	r10, r26
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	fc 01       	movw	r30, r24
    14f8:	c7 8c       	ldd	r12, Z+31	; 0x1f
    14fa:	d0 a0       	ldd	r13, Z+32	; 0x20
    14fc:	e1 a0       	ldd	r14, Z+33	; 0x21
    14fe:	f2 a0       	ldd	r15, Z+34	; 0x22
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	fc 01       	movw	r30, r24
    1506:	80 89       	ldd	r24, Z+16	; 0x10
    1508:	91 89       	ldd	r25, Z+17	; 0x11
    150a:	a2 89       	ldd	r26, Z+18	; 0x12
    150c:	b3 89       	ldd	r27, Z+19	; 0x13
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__floatsisf>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9c 01       	movw	r18, r24
    151c:	ad 01       	movw	r20, r26
    151e:	c7 01       	movw	r24, r14
    1520:	b6 01       	movw	r22, r12
    1522:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9c 01       	movw	r18, r24
    152c:	ad 01       	movw	r20, r26
    152e:	c5 01       	movw	r24, r10
    1530:	b4 01       	movw	r22, r8
    1532:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__addsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	29 81       	ldd	r18, Y+1	; 0x01
    153c:	3a 81       	ldd	r19, Y+2	; 0x02
    153e:	f9 01       	movw	r30, r18
    1540:	83 a3       	std	Z+35, r24	; 0x23
    1542:	94 a3       	std	Z+36, r25	; 0x24
    1544:	a5 a3       	std	Z+37, r26	; 0x25
    1546:	b6 a3       	std	Z+38, r27	; 0x26
	// Test if saturated
	saturated = output < loSat || output > hiSat;
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	fc 01       	movw	r30, r24
    154e:	c3 a0       	ldd	r12, Z+35	; 0x23
    1550:	d4 a0       	ldd	r13, Z+36	; 0x24
    1552:	e5 a0       	ldd	r14, Z+37	; 0x25
    1554:	f6 a0       	ldd	r15, Z+38	; 0x26
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	fc 01       	movw	r30, r24
    155c:	84 89       	ldd	r24, Z+20	; 0x14
    155e:	08 2e       	mov	r0, r24
    1560:	00 0c       	add	r0, r0
    1562:	99 0b       	sbc	r25, r25
    1564:	aa 0b       	sbc	r26, r26
    1566:	bb 0b       	sbc	r27, r27
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__floatsisf>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9c 01       	movw	r18, r24
    1576:	ad 01       	movw	r20, r26
    1578:	c7 01       	movw	r24, r14
    157a:	b6 01       	movw	r22, r12
    157c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__cmpsf2>
    1580:	88 23       	and	r24, r24
    1582:	f4 f0       	brlt	.+60     	; 0x15c0 <_ZN13PIDController3getEv+0x176>
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	fc 01       	movw	r30, r24
    158a:	c3 a0       	ldd	r12, Z+35	; 0x23
    158c:	d4 a0       	ldd	r13, Z+36	; 0x24
    158e:	e5 a0       	ldd	r14, Z+37	; 0x25
    1590:	f6 a0       	ldd	r15, Z+38	; 0x26
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	fc 01       	movw	r30, r24
    1598:	85 89       	ldd	r24, Z+21	; 0x15
    159a:	08 2e       	mov	r0, r24
    159c:	00 0c       	add	r0, r0
    159e:	99 0b       	sbc	r25, r25
    15a0:	aa 0b       	sbc	r26, r26
    15a2:	bb 0b       	sbc	r27, r27
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__floatsisf>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	9c 01       	movw	r18, r24
    15b2:	ad 01       	movw	r20, r26
    15b4:	c7 01       	movw	r24, r14
    15b6:	b6 01       	movw	r22, r12
    15b8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__gesf2>
    15bc:	18 16       	cp	r1, r24
    15be:	14 f4       	brge	.+4      	; 0x15c4 <_ZN13PIDController3getEv+0x17a>
    15c0:	21 e0       	ldi	r18, 0x01	; 1
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <_ZN13PIDController3getEv+0x17c>
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	fc 01       	movw	r30, r24
    15cc:	26 8b       	std	Z+22, r18	; 0x16
	// Return output
	return output;
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	fc 01       	movw	r30, r24
    15d4:	83 a1       	ldd	r24, Z+35	; 0x23
    15d6:	94 a1       	ldd	r25, Z+36	; 0x24
    15d8:	a5 a1       	ldd	r26, Z+37	; 0x25
    15da:	b6 a1       	ldd	r27, Z+38	; 0x26
}
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	bf 90       	pop	r11
    15f2:	af 90       	pop	r10
    15f4:	9f 90       	pop	r9
    15f6:	8f 90       	pop	r8
    15f8:	08 95       	ret

000015fa <_ZN13PIDController5resetEv>:

/** @brief		Reset the calculated integral and derivative to zero.
 *  @details	This function resets the calculated integral and derivative
 *				to zero so that the PID controller can be re-entered without
 *				an affect from old data.
 */void PIDController::reset() {
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	1f 92       	push	r1
    1600:	1f 92       	push	r1
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	9a 83       	std	Y+2, r25	; 0x02
	integral = 0;
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	9a 81       	ldd	r25, Y+2	; 0x02
    160e:	fc 01       	movw	r30, r24
    1610:	14 86       	std	Z+12, r1	; 0x0c
    1612:	15 86       	std	Z+13, r1	; 0x0d
    1614:	16 86       	std	Z+14, r1	; 0x0e
    1616:	17 86       	std	Z+15, r1	; 0x0f
	derivative = 0;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	fc 01       	movw	r30, r24
    161e:	10 8a       	std	Z+16, r1	; 0x10
    1620:	11 8a       	std	Z+17, r1	; 0x11
    1622:	12 8a       	std	Z+18, r1	; 0x12
    1624:	13 8a       	std	Z+19, r1	; 0x13
    1626:	00 00       	nop
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <_Z7TC_Initv>:

/** @brief		Sets up the timer configuration.
 *  @details	This function sets up the system clock timer, timer interrupt,
 *				encoder counters, and PWM output.
 */
void TC_Init(){
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	// micros() Initialization
	/* Use peripheral clock prescaler 16 as input for event channel 0. */
	EVSYS_CH0MUX = EVSYS_CHMUX_PRESCALER_16_gc;
    163a:	80 e8       	ldi	r24, 0x80	; 128
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	24 e8       	ldi	r18, 0x84	; 132
    1640:	fc 01       	movw	r30, r24
    1642:	20 83       	st	Z, r18
	/* Use event channel 0 as clock source for TCC0. */
	TCC0_CTRLA = (TCC0_CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_EVCH0_gc;
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	98 e0       	ldi	r25, 0x08	; 8
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	38 e0       	ldi	r19, 0x08	; 8
    164c:	f9 01       	movw	r30, r18
    164e:	20 81       	ld	r18, Z
    1650:	20 7f       	andi	r18, 0xF0	; 240
    1652:	28 60       	ori	r18, 0x08	; 8
    1654:	fc 01       	movw	r30, r24
    1656:	20 83       	st	Z, r18
	/* Use TCC0 overflow as input for event channel 1. */
	EVSYS_CH1MUX = EVSYS_CHMUX_TCC0_OVF_gc;	
    1658:	81 e8       	ldi	r24, 0x81	; 129
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	20 ec       	ldi	r18, 0xC0	; 192
    165e:	fc 01       	movw	r30, r24
    1660:	20 83       	st	Z, r18
	/* Use event channel 1 as clock source for TCC1. */
	TCC1_CTRLA = (TCC1_CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_EVCH1_gc;
    1662:	80 e4       	ldi	r24, 0x40	; 64
    1664:	98 e0       	ldi	r25, 0x08	; 8
    1666:	20 e4       	ldi	r18, 0x40	; 64
    1668:	38 e0       	ldi	r19, 0x08	; 8
    166a:	f9 01       	movw	r30, r18
    166c:	20 81       	ld	r18, Z
    166e:	20 7f       	andi	r18, 0xF0	; 240
    1670:	29 60       	ori	r18, 0x09	; 9
    1672:	fc 01       	movw	r30, r24
    1674:	20 83       	st	Z, r18
	// /* Start the timer/counter and enable interrupts. */
	// TCD0.CTRLA = TC_CLKSEL_DIV8_gc;

	// Timer Interrupt Initialization
	/* Enable Compare channel A. */
	TCC0_CTRLB |= TC0_CCAEN_bm;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	98 e0       	ldi	r25, 0x08	; 8
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	38 e0       	ldi	r19, 0x08	; 8
    167e:	f9 01       	movw	r30, r18
    1680:	20 81       	ld	r18, Z
    1682:	20 61       	ori	r18, 0x10	; 16
    1684:	fc 01       	movw	r30, r24
    1686:	20 83       	st	Z, r18
	/* Set level for compare channel interrupt. */
	TCC0_INTCTRLB = TC_CCAINTLVL_HI_gc;
    1688:	87 e0       	ldi	r24, 0x07	; 7
    168a:	98 e0       	ldi	r25, 0x08	; 8
    168c:	23 e0       	ldi	r18, 0x03	; 3
    168e:	fc 01       	movw	r30, r24
    1690:	20 83       	st	Z, r18

	// Encoder Initialization
	/* Configure TC as a quadrature counter. */
	TCD0_CTRLD = (uint8_t) TC_EVACT_QDEC_gc | EVSYS_CH2MUX;
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	99 e0       	ldi	r25, 0x09	; 9
    1696:	22 e8       	ldi	r18, 0x82	; 130
    1698:	31 e0       	ldi	r19, 0x01	; 1
    169a:	f9 01       	movw	r30, r18
    169c:	20 81       	ld	r18, Z
    169e:	20 66       	ori	r18, 0x60	; 96
    16a0:	fc 01       	movw	r30, r24
    16a2:	20 83       	st	Z, r18
	// TCD0.PER = (3584 * 4) - 1;
	TCD0_CTRLA = TC_CLKSEL_DIV1_gc;	 
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	99 e0       	ldi	r25, 0x09	; 9
    16a8:	21 e0       	ldi	r18, 0x01	; 1
    16aa:	fc 01       	movw	r30, r24
    16ac:	20 83       	st	Z, r18
	/* Configure TC as a quadrature counter. */
	TCD1_CTRLD = (uint8_t) TC_EVACT_QDEC_gc | EVSYS_CH3MUX;
    16ae:	83 e4       	ldi	r24, 0x43	; 67
    16b0:	99 e0       	ldi	r25, 0x09	; 9
    16b2:	23 e8       	ldi	r18, 0x83	; 131
    16b4:	31 e0       	ldi	r19, 0x01	; 1
    16b6:	f9 01       	movw	r30, r18
    16b8:	20 81       	ld	r18, Z
    16ba:	20 66       	ori	r18, 0x60	; 96
    16bc:	fc 01       	movw	r30, r24
    16be:	20 83       	st	Z, r18
	// TCD1.PER = (3584 * 4) - 1;
	TCD1_CTRLA = TC_CLKSEL_DIV1_gc;
    16c0:	80 e4       	ldi	r24, 0x40	; 64
    16c2:	99 e0       	ldi	r25, 0x09	; 9
    16c4:	21 e0       	ldi	r18, 0x01	; 1
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 83       	st	Z, r18

	// PWM Output Initialization
	/* Set the TC period. */
	TCE0_PER = 20000;
    16ca:	86 e2       	ldi	r24, 0x26	; 38
    16cc:	9a e0       	ldi	r25, 0x0A	; 10
    16ce:	20 e2       	ldi	r18, 0x20	; 32
    16d0:	3e e4       	ldi	r19, 0x4E	; 78
    16d2:	fc 01       	movw	r30, r24
    16d4:	20 83       	st	Z, r18
    16d6:	31 83       	std	Z+1, r19	; 0x01
	/* Configure the TC for single slope mode. */
	TCE0_CTRLB |= TC_WGMODE_SINGLESLOPE_gc;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	9a e0       	ldi	r25, 0x0A	; 10
    16dc:	21 e0       	ldi	r18, 0x01	; 1
    16de:	3a e0       	ldi	r19, 0x0A	; 10
    16e0:	f9 01       	movw	r30, r18
    16e2:	20 81       	ld	r18, Z
    16e4:	23 60       	ori	r18, 0x03	; 3
    16e6:	fc 01       	movw	r30, r24
    16e8:	20 83       	st	Z, r18
	/* Enable Compare channel C and D. */
	TCE0_CTRLB |= TC0_CCCEN_bm;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	9a e0       	ldi	r25, 0x0A	; 10
    16ee:	21 e0       	ldi	r18, 0x01	; 1
    16f0:	3a e0       	ldi	r19, 0x0A	; 10
    16f2:	f9 01       	movw	r30, r18
    16f4:	20 81       	ld	r18, Z
    16f6:	20 64       	ori	r18, 0x40	; 64
    16f8:	fc 01       	movw	r30, r24
    16fa:	20 83       	st	Z, r18
	TCE0_CTRLB |= TC0_CCDEN_bm;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	9a e0       	ldi	r25, 0x0A	; 10
    1700:	21 e0       	ldi	r18, 0x01	; 1
    1702:	3a e0       	ldi	r19, 0x0A	; 10
    1704:	f9 01       	movw	r30, r18
    1706:	20 81       	ld	r18, Z
    1708:	20 68       	ori	r18, 0x80	; 128
    170a:	fc 01       	movw	r30, r24
    170c:	20 83       	st	Z, r18
	/* Start timer by selecting a clock source. */
	TCE0_CTRLA = (TCE0_CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1_gc;
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	9a e0       	ldi	r25, 0x0A	; 10
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	3a e0       	ldi	r19, 0x0A	; 10
    1716:	f9 01       	movw	r30, r18
    1718:	20 81       	ld	r18, Z
    171a:	20 7f       	andi	r18, 0xF0	; 240
    171c:	21 60       	ori	r18, 0x01	; 1
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
}
    1722:	00 00       	nop
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <_Z6microsv>:
/** @brief		Returns the system time.
 *  @details	This function concatenates the values of two 16-bit timers to
 *				return the system time as a 32-bit timer.
 *	@return		The system time in microseconds as an unsigned 32-bit number.
 */
uint32_t micros() {
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	return ((uint32_t)TCC1_CNT << 16) | TCC0_CNT;
    1732:	80 e6       	ldi	r24, 0x60	; 96
    1734:	98 e0       	ldi	r25, 0x08	; 8
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	cc 01       	movw	r24, r24
    173e:	a0 e0       	ldi	r26, 0x00	; 0
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ac 01       	movw	r20, r24
    1744:	33 27       	eor	r19, r19
    1746:	22 27       	eor	r18, r18
    1748:	80 e2       	ldi	r24, 0x20	; 32
    174a:	98 e0       	ldi	r25, 0x08	; 8
    174c:	fc 01       	movw	r30, r24
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	cc 01       	movw	r24, r24
    1754:	a0 e0       	ldi	r26, 0x00	; 0
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	82 2b       	or	r24, r18
    175a:	93 2b       	or	r25, r19
    175c:	a4 2b       	or	r26, r20
    175e:	b5 2b       	or	r27, r21
}
    1760:	bc 01       	movw	r22, r24
    1762:	cd 01       	movw	r24, r26
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <_Z11analogWrite3Pinh>:
 *  @details	This function concatenates the values of two 16-bit timers to
 *				return the system time as a 32-bit timer.
 *	@param		pin The pin to write the PWM duty cycle to.
 *	@param		dutyCycle The duty cycle to write, between -100 and 100.
 */
void analogWrite(Pin pin, uint8_t dutyCycle) {
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	00 d0       	rcall	.+0      	; 0x1770 <_Z11analogWrite3Pinh+0x6>
    1770:	1f 92       	push	r1
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	69 83       	std	Y+1, r22	; 0x01
    1778:	7a 83       	std	Y+2, r23	; 0x02
    177a:	8b 83       	std	Y+3, r24	; 0x03
    177c:	4c 83       	std	Y+4, r20	; 0x04
	// Primary Motor
	if (pin.PIN_BM == P_MOT_PWM.PIN_BM) {
    177e:	9b 81       	ldd	r25, Y+3	; 0x03
    1780:	84 e0       	ldi	r24, 0x04	; 4
    1782:	98 17       	cp	r25, r24
    1784:	71 f4       	brne	.+28     	; 0x17a2 <_Z11analogWrite3Pinh+0x38>
		TCE0_CCC = ((uint16_t)dutyCycle) * 200;
    1786:	8c e2       	ldi	r24, 0x2C	; 44
    1788:	9a e0       	ldi	r25, 0x0A	; 10
    178a:	2c 81       	ldd	r18, Y+4	; 0x04
    178c:	42 2f       	mov	r20, r18
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	68 ec       	ldi	r22, 0xC8	; 200
    1792:	64 9f       	mul	r22, r20
    1794:	90 01       	movw	r18, r0
    1796:	65 9f       	mul	r22, r21
    1798:	30 0d       	add	r19, r0
    179a:	11 24       	eor	r1, r1
    179c:	fc 01       	movw	r30, r24
    179e:	20 83       	st	Z, r18
    17a0:	31 83       	std	Z+1, r19	; 0x01
	}
	// Secondary Motor
	if (pin.PIN_BM == S_MOT_PWM.PIN_BM) {
    17a2:	9b 81       	ldd	r25, Y+3	; 0x03
    17a4:	88 e0       	ldi	r24, 0x08	; 8
    17a6:	98 17       	cp	r25, r24
    17a8:	71 f4       	brne	.+28     	; 0x17c6 <_Z11analogWrite3Pinh+0x5c>
		TCE0_CCD = ((uint16_t)dutyCycle) * 200;
    17aa:	8e e2       	ldi	r24, 0x2E	; 46
    17ac:	9a e0       	ldi	r25, 0x0A	; 10
    17ae:	2c 81       	ldd	r18, Y+4	; 0x04
    17b0:	42 2f       	mov	r20, r18
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	68 ec       	ldi	r22, 0xC8	; 200
    17b6:	64 9f       	mul	r22, r20
    17b8:	90 01       	movw	r18, r0
    17ba:	65 9f       	mul	r22, r21
    17bc:	30 0d       	add	r19, r0
    17be:	11 24       	eor	r1, r1
    17c0:	fc 01       	movw	r30, r24
    17c2:	20 83       	st	Z, r18
    17c4:	31 83       	std	Z+1, r19	; 0x01
	}
}
    17c6:	00 00       	nop
    17c8:	24 96       	adiw	r28, 0x04	; 4
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <_ZN10WheelSpeedC1Eh>:
 *  @details	This constructor creates an wheel speed object with the given
 *				number of triggers. It saves the number of triggers and
 *				initializes the "previous" and "current" times.
 *  @param		triggers The number of triggers per wheel revolution.
 */
WheelSpeed::WheelSpeed(uint8_t triggers) {
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	00 d0       	rcall	.+0      	; 0x17da <_ZN10WheelSpeedC1Eh+0x6>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	6b 83       	std	Y+3, r22	; 0x03
	// Initialize variables
	this->triggers = triggers;
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ea:	fc 01       	movw	r30, r24
    17ec:	20 83       	st	Z, r18
	prevTime = micros();
    17ee:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	29 81       	ldd	r18, Y+1	; 0x01
    17f8:	3a 81       	ldd	r19, Y+2	; 0x02
    17fa:	f9 01       	movw	r30, r18
    17fc:	81 83       	std	Z+1, r24	; 0x01
    17fe:	92 83       	std	Z+2, r25	; 0x02
    1800:	a3 83       	std	Z+3, r26	; 0x03
    1802:	b4 83       	std	Z+4, r27	; 0x04
	currTime = micros();
    1804:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	29 81       	ldd	r18, Y+1	; 0x01
    180e:	3a 81       	ldd	r19, Y+2	; 0x02
    1810:	f9 01       	movw	r30, r18
    1812:	85 83       	std	Z+5, r24	; 0x05
    1814:	96 83       	std	Z+6, r25	; 0x06
    1816:	a7 83       	std	Z+7, r26	; 0x07
    1818:	b0 87       	std	Z+8, r27	; 0x08
}
    181a:	00 00       	nop
    181c:	23 96       	adiw	r28, 0x03	; 3
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <_ZN10WheelSpeed4calcEv>:
 *				and assign the current time to current time. These values can
 *				be used to calculate the wheel speed, but this calculation is
 *				left until the get() function is called to minimize the time
 *				spent in the interrupt service routing.
 */
void WheelSpeed::calc() {
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	1f 92       	push	r1
    182e:	1f 92       	push	r1
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	9a 83       	std	Y+2, r25	; 0x02
	prevTime = currTime;
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	fc 01       	movw	r30, r24
    183e:	85 81       	ldd	r24, Z+5	; 0x05
    1840:	96 81       	ldd	r25, Z+6	; 0x06
    1842:	a7 81       	ldd	r26, Z+7	; 0x07
    1844:	b0 85       	ldd	r27, Z+8	; 0x08
    1846:	29 81       	ldd	r18, Y+1	; 0x01
    1848:	3a 81       	ldd	r19, Y+2	; 0x02
    184a:	f9 01       	movw	r30, r18
    184c:	81 83       	std	Z+1, r24	; 0x01
    184e:	92 83       	std	Z+2, r25	; 0x02
    1850:	a3 83       	std	Z+3, r26	; 0x03
    1852:	b4 83       	std	Z+4, r27	; 0x04
	currTime = micros();
    1854:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z6microsv>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	29 81       	ldd	r18, Y+1	; 0x01
    185e:	3a 81       	ldd	r19, Y+2	; 0x02
    1860:	f9 01       	movw	r30, r18
    1862:	85 83       	std	Z+5, r24	; 0x05
    1864:	96 83       	std	Z+6, r25	; 0x06
    1866:	a7 83       	std	Z+7, r26	; 0x07
    1868:	b0 87       	std	Z+8, r27	; 0x08
}
    186a:	00 00       	nop
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <__subsf3>:
    1876:	50 58       	subi	r21, 0x80	; 128

00001878 <__addsf3>:
    1878:	bb 27       	eor	r27, r27
    187a:	aa 27       	eor	r26, r26
    187c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__addsf3x>
    1880:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__fp_round>
    1884:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__fp_pscA>
    1888:	38 f0       	brcs	.+14     	; 0x1898 <__addsf3+0x20>
    188a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_pscB>
    188e:	20 f0       	brcs	.+8      	; 0x1898 <__addsf3+0x20>
    1890:	39 f4       	brne	.+14     	; 0x18a0 <__addsf3+0x28>
    1892:	9f 3f       	cpi	r25, 0xFF	; 255
    1894:	19 f4       	brne	.+6      	; 0x189c <__addsf3+0x24>
    1896:	26 f4       	brtc	.+8      	; 0x18a0 <__addsf3+0x28>
    1898:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__fp_nan>
    189c:	0e f4       	brtc	.+2      	; 0x18a0 <__addsf3+0x28>
    189e:	e0 95       	com	r30
    18a0:	e7 fb       	bst	r30, 7
    18a2:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__fp_inf>

000018a6 <__addsf3x>:
    18a6:	e9 2f       	mov	r30, r25
    18a8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fp_split3>
    18ac:	58 f3       	brcs	.-42     	; 0x1884 <__addsf3+0xc>
    18ae:	ba 17       	cp	r27, r26
    18b0:	62 07       	cpc	r22, r18
    18b2:	73 07       	cpc	r23, r19
    18b4:	84 07       	cpc	r24, r20
    18b6:	95 07       	cpc	r25, r21
    18b8:	20 f0       	brcs	.+8      	; 0x18c2 <__addsf3x+0x1c>
    18ba:	79 f4       	brne	.+30     	; 0x18da <__addsf3x+0x34>
    18bc:	a6 f5       	brtc	.+104    	; 0x1926 <__addsf3x+0x80>
    18be:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__fp_zero>
    18c2:	0e f4       	brtc	.+2      	; 0x18c6 <__addsf3x+0x20>
    18c4:	e0 95       	com	r30
    18c6:	0b 2e       	mov	r0, r27
    18c8:	ba 2f       	mov	r27, r26
    18ca:	a0 2d       	mov	r26, r0
    18cc:	0b 01       	movw	r0, r22
    18ce:	b9 01       	movw	r22, r18
    18d0:	90 01       	movw	r18, r0
    18d2:	0c 01       	movw	r0, r24
    18d4:	ca 01       	movw	r24, r20
    18d6:	a0 01       	movw	r20, r0
    18d8:	11 24       	eor	r1, r1
    18da:	ff 27       	eor	r31, r31
    18dc:	59 1b       	sub	r21, r25
    18de:	99 f0       	breq	.+38     	; 0x1906 <__addsf3x+0x60>
    18e0:	59 3f       	cpi	r21, 0xF9	; 249
    18e2:	50 f4       	brcc	.+20     	; 0x18f8 <__addsf3x+0x52>
    18e4:	50 3e       	cpi	r21, 0xE0	; 224
    18e6:	68 f1       	brcs	.+90     	; 0x1942 <__addsf3x+0x9c>
    18e8:	1a 16       	cp	r1, r26
    18ea:	f0 40       	sbci	r31, 0x00	; 0
    18ec:	a2 2f       	mov	r26, r18
    18ee:	23 2f       	mov	r18, r19
    18f0:	34 2f       	mov	r19, r20
    18f2:	44 27       	eor	r20, r20
    18f4:	58 5f       	subi	r21, 0xF8	; 248
    18f6:	f3 cf       	rjmp	.-26     	; 0x18de <__addsf3x+0x38>
    18f8:	46 95       	lsr	r20
    18fa:	37 95       	ror	r19
    18fc:	27 95       	ror	r18
    18fe:	a7 95       	ror	r26
    1900:	f0 40       	sbci	r31, 0x00	; 0
    1902:	53 95       	inc	r21
    1904:	c9 f7       	brne	.-14     	; 0x18f8 <__addsf3x+0x52>
    1906:	7e f4       	brtc	.+30     	; 0x1926 <__addsf3x+0x80>
    1908:	1f 16       	cp	r1, r31
    190a:	ba 0b       	sbc	r27, r26
    190c:	62 0b       	sbc	r22, r18
    190e:	73 0b       	sbc	r23, r19
    1910:	84 0b       	sbc	r24, r20
    1912:	ba f0       	brmi	.+46     	; 0x1942 <__addsf3x+0x9c>
    1914:	91 50       	subi	r25, 0x01	; 1
    1916:	a1 f0       	breq	.+40     	; 0x1940 <__addsf3x+0x9a>
    1918:	ff 0f       	add	r31, r31
    191a:	bb 1f       	adc	r27, r27
    191c:	66 1f       	adc	r22, r22
    191e:	77 1f       	adc	r23, r23
    1920:	88 1f       	adc	r24, r24
    1922:	c2 f7       	brpl	.-16     	; 0x1914 <__addsf3x+0x6e>
    1924:	0e c0       	rjmp	.+28     	; 0x1942 <__addsf3x+0x9c>
    1926:	ba 0f       	add	r27, r26
    1928:	62 1f       	adc	r22, r18
    192a:	73 1f       	adc	r23, r19
    192c:	84 1f       	adc	r24, r20
    192e:	48 f4       	brcc	.+18     	; 0x1942 <__addsf3x+0x9c>
    1930:	87 95       	ror	r24
    1932:	77 95       	ror	r23
    1934:	67 95       	ror	r22
    1936:	b7 95       	ror	r27
    1938:	f7 95       	ror	r31
    193a:	9e 3f       	cpi	r25, 0xFE	; 254
    193c:	08 f0       	brcs	.+2      	; 0x1940 <__addsf3x+0x9a>
    193e:	b0 cf       	rjmp	.-160    	; 0x18a0 <__addsf3+0x28>
    1940:	93 95       	inc	r25
    1942:	88 0f       	add	r24, r24
    1944:	08 f0       	brcs	.+2      	; 0x1948 <__addsf3x+0xa2>
    1946:	99 27       	eor	r25, r25
    1948:	ee 0f       	add	r30, r30
    194a:	97 95       	ror	r25
    194c:	87 95       	ror	r24
    194e:	08 95       	ret

00001950 <__cmpsf2>:
    1950:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__fp_cmp>
    1954:	08 f4       	brcc	.+2      	; 0x1958 <__cmpsf2+0x8>
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	08 95       	ret

0000195a <__fixsfsi>:
    195a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixunssfsi>
    195e:	68 94       	set
    1960:	b1 11       	cpse	r27, r1
    1962:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__fp_szero>
    1966:	08 95       	ret

00001968 <__fixunssfsi>:
    1968:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__fp_splitA>
    196c:	88 f0       	brcs	.+34     	; 0x1990 <__fixunssfsi+0x28>
    196e:	9f 57       	subi	r25, 0x7F	; 127
    1970:	98 f0       	brcs	.+38     	; 0x1998 <__fixunssfsi+0x30>
    1972:	b9 2f       	mov	r27, r25
    1974:	99 27       	eor	r25, r25
    1976:	b7 51       	subi	r27, 0x17	; 23
    1978:	b0 f0       	brcs	.+44     	; 0x19a6 <__fixunssfsi+0x3e>
    197a:	e1 f0       	breq	.+56     	; 0x19b4 <__fixunssfsi+0x4c>
    197c:	66 0f       	add	r22, r22
    197e:	77 1f       	adc	r23, r23
    1980:	88 1f       	adc	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	1a f0       	brmi	.+6      	; 0x198c <__fixunssfsi+0x24>
    1986:	ba 95       	dec	r27
    1988:	c9 f7       	brne	.-14     	; 0x197c <__fixunssfsi+0x14>
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <__fixunssfsi+0x4c>
    198c:	b1 30       	cpi	r27, 0x01	; 1
    198e:	91 f0       	breq	.+36     	; 0x19b4 <__fixunssfsi+0x4c>
    1990:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fp_zero>
    1994:	b1 e0       	ldi	r27, 0x01	; 1
    1996:	08 95       	ret
    1998:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__fp_zero>
    199c:	67 2f       	mov	r22, r23
    199e:	78 2f       	mov	r23, r24
    19a0:	88 27       	eor	r24, r24
    19a2:	b8 5f       	subi	r27, 0xF8	; 248
    19a4:	39 f0       	breq	.+14     	; 0x19b4 <__fixunssfsi+0x4c>
    19a6:	b9 3f       	cpi	r27, 0xF9	; 249
    19a8:	cc f3       	brlt	.-14     	; 0x199c <__fixunssfsi+0x34>
    19aa:	86 95       	lsr	r24
    19ac:	77 95       	ror	r23
    19ae:	67 95       	ror	r22
    19b0:	b3 95       	inc	r27
    19b2:	d9 f7       	brne	.-10     	; 0x19aa <__fixunssfsi+0x42>
    19b4:	3e f4       	brtc	.+14     	; 0x19c4 <__fixunssfsi+0x5c>
    19b6:	90 95       	com	r25
    19b8:	80 95       	com	r24
    19ba:	70 95       	com	r23
    19bc:	61 95       	neg	r22
    19be:	7f 4f       	sbci	r23, 0xFF	; 255
    19c0:	8f 4f       	sbci	r24, 0xFF	; 255
    19c2:	9f 4f       	sbci	r25, 0xFF	; 255
    19c4:	08 95       	ret

000019c6 <__floatunsisf>:
    19c6:	e8 94       	clt
    19c8:	09 c0       	rjmp	.+18     	; 0x19dc <__floatsisf+0x12>

000019ca <__floatsisf>:
    19ca:	97 fb       	bst	r25, 7
    19cc:	3e f4       	brtc	.+14     	; 0x19dc <__floatsisf+0x12>
    19ce:	90 95       	com	r25
    19d0:	80 95       	com	r24
    19d2:	70 95       	com	r23
    19d4:	61 95       	neg	r22
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8f 4f       	sbci	r24, 0xFF	; 255
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	99 23       	and	r25, r25
    19de:	a9 f0       	breq	.+42     	; 0x1a0a <__floatsisf+0x40>
    19e0:	f9 2f       	mov	r31, r25
    19e2:	96 e9       	ldi	r25, 0x96	; 150
    19e4:	bb 27       	eor	r27, r27
    19e6:	93 95       	inc	r25
    19e8:	f6 95       	lsr	r31
    19ea:	87 95       	ror	r24
    19ec:	77 95       	ror	r23
    19ee:	67 95       	ror	r22
    19f0:	b7 95       	ror	r27
    19f2:	f1 11       	cpse	r31, r1
    19f4:	f8 cf       	rjmp	.-16     	; 0x19e6 <__floatsisf+0x1c>
    19f6:	fa f4       	brpl	.+62     	; 0x1a36 <__floatsisf+0x6c>
    19f8:	bb 0f       	add	r27, r27
    19fa:	11 f4       	brne	.+4      	; 0x1a00 <__floatsisf+0x36>
    19fc:	60 ff       	sbrs	r22, 0
    19fe:	1b c0       	rjmp	.+54     	; 0x1a36 <__floatsisf+0x6c>
    1a00:	6f 5f       	subi	r22, 0xFF	; 255
    1a02:	7f 4f       	sbci	r23, 0xFF	; 255
    1a04:	8f 4f       	sbci	r24, 0xFF	; 255
    1a06:	9f 4f       	sbci	r25, 0xFF	; 255
    1a08:	16 c0       	rjmp	.+44     	; 0x1a36 <__floatsisf+0x6c>
    1a0a:	88 23       	and	r24, r24
    1a0c:	11 f0       	breq	.+4      	; 0x1a12 <__floatsisf+0x48>
    1a0e:	96 e9       	ldi	r25, 0x96	; 150
    1a10:	11 c0       	rjmp	.+34     	; 0x1a34 <__floatsisf+0x6a>
    1a12:	77 23       	and	r23, r23
    1a14:	21 f0       	breq	.+8      	; 0x1a1e <__floatsisf+0x54>
    1a16:	9e e8       	ldi	r25, 0x8E	; 142
    1a18:	87 2f       	mov	r24, r23
    1a1a:	76 2f       	mov	r23, r22
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <__floatsisf+0x5e>
    1a1e:	66 23       	and	r22, r22
    1a20:	71 f0       	breq	.+28     	; 0x1a3e <__floatsisf+0x74>
    1a22:	96 e8       	ldi	r25, 0x86	; 134
    1a24:	86 2f       	mov	r24, r22
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	2a f0       	brmi	.+10     	; 0x1a36 <__floatsisf+0x6c>
    1a2c:	9a 95       	dec	r25
    1a2e:	66 0f       	add	r22, r22
    1a30:	77 1f       	adc	r23, r23
    1a32:	88 1f       	adc	r24, r24
    1a34:	da f7       	brpl	.-10     	; 0x1a2c <__floatsisf+0x62>
    1a36:	88 0f       	add	r24, r24
    1a38:	96 95       	lsr	r25
    1a3a:	87 95       	ror	r24
    1a3c:	97 f9       	bld	r25, 7
    1a3e:	08 95       	ret

00001a40 <__fp_cmp>:
    1a40:	99 0f       	add	r25, r25
    1a42:	00 08       	sbc	r0, r0
    1a44:	55 0f       	add	r21, r21
    1a46:	aa 0b       	sbc	r26, r26
    1a48:	e0 e8       	ldi	r30, 0x80	; 128
    1a4a:	fe ef       	ldi	r31, 0xFE	; 254
    1a4c:	16 16       	cp	r1, r22
    1a4e:	17 06       	cpc	r1, r23
    1a50:	e8 07       	cpc	r30, r24
    1a52:	f9 07       	cpc	r31, r25
    1a54:	c0 f0       	brcs	.+48     	; 0x1a86 <__fp_cmp+0x46>
    1a56:	12 16       	cp	r1, r18
    1a58:	13 06       	cpc	r1, r19
    1a5a:	e4 07       	cpc	r30, r20
    1a5c:	f5 07       	cpc	r31, r21
    1a5e:	98 f0       	brcs	.+38     	; 0x1a86 <__fp_cmp+0x46>
    1a60:	62 1b       	sub	r22, r18
    1a62:	73 0b       	sbc	r23, r19
    1a64:	84 0b       	sbc	r24, r20
    1a66:	95 0b       	sbc	r25, r21
    1a68:	39 f4       	brne	.+14     	; 0x1a78 <__fp_cmp+0x38>
    1a6a:	0a 26       	eor	r0, r26
    1a6c:	61 f0       	breq	.+24     	; 0x1a86 <__fp_cmp+0x46>
    1a6e:	23 2b       	or	r18, r19
    1a70:	24 2b       	or	r18, r20
    1a72:	25 2b       	or	r18, r21
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <__fp_cmp+0x3e>
    1a76:	08 95       	ret
    1a78:	0a 26       	eor	r0, r26
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <__fp_cmp+0x3e>
    1a7c:	a1 40       	sbci	r26, 0x01	; 1
    1a7e:	a6 95       	lsr	r26
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	81 1d       	adc	r24, r1
    1a84:	81 1d       	adc	r24, r1
    1a86:	08 95       	ret

00001a88 <__fp_inf>:
    1a88:	97 f9       	bld	r25, 7
    1a8a:	9f 67       	ori	r25, 0x7F	; 127
    1a8c:	80 e8       	ldi	r24, 0x80	; 128
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	08 95       	ret

00001a94 <__fp_nan>:
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
    1a96:	80 ec       	ldi	r24, 0xC0	; 192
    1a98:	08 95       	ret

00001a9a <__fp_pscA>:
    1a9a:	00 24       	eor	r0, r0
    1a9c:	0a 94       	dec	r0
    1a9e:	16 16       	cp	r1, r22
    1aa0:	17 06       	cpc	r1, r23
    1aa2:	18 06       	cpc	r1, r24
    1aa4:	09 06       	cpc	r0, r25
    1aa6:	08 95       	ret

00001aa8 <__fp_pscB>:
    1aa8:	00 24       	eor	r0, r0
    1aaa:	0a 94       	dec	r0
    1aac:	12 16       	cp	r1, r18
    1aae:	13 06       	cpc	r1, r19
    1ab0:	14 06       	cpc	r1, r20
    1ab2:	05 06       	cpc	r0, r21
    1ab4:	08 95       	ret

00001ab6 <__fp_round>:
    1ab6:	09 2e       	mov	r0, r25
    1ab8:	03 94       	inc	r0
    1aba:	00 0c       	add	r0, r0
    1abc:	11 f4       	brne	.+4      	; 0x1ac2 <__fp_round+0xc>
    1abe:	88 23       	and	r24, r24
    1ac0:	52 f0       	brmi	.+20     	; 0x1ad6 <__fp_round+0x20>
    1ac2:	bb 0f       	add	r27, r27
    1ac4:	40 f4       	brcc	.+16     	; 0x1ad6 <__fp_round+0x20>
    1ac6:	bf 2b       	or	r27, r31
    1ac8:	11 f4       	brne	.+4      	; 0x1ace <__fp_round+0x18>
    1aca:	60 ff       	sbrs	r22, 0
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <__fp_round+0x20>
    1ace:	6f 5f       	subi	r22, 0xFF	; 255
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad6:	08 95       	ret

00001ad8 <__fp_split3>:
    1ad8:	57 fd       	sbrc	r21, 7
    1ada:	90 58       	subi	r25, 0x80	; 128
    1adc:	44 0f       	add	r20, r20
    1ade:	55 1f       	adc	r21, r21
    1ae0:	59 f0       	breq	.+22     	; 0x1af8 <__fp_splitA+0x10>
    1ae2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae4:	71 f0       	breq	.+28     	; 0x1b02 <__fp_splitA+0x1a>
    1ae6:	47 95       	ror	r20

00001ae8 <__fp_splitA>:
    1ae8:	88 0f       	add	r24, r24
    1aea:	97 fb       	bst	r25, 7
    1aec:	99 1f       	adc	r25, r25
    1aee:	61 f0       	breq	.+24     	; 0x1b08 <__fp_splitA+0x20>
    1af0:	9f 3f       	cpi	r25, 0xFF	; 255
    1af2:	79 f0       	breq	.+30     	; 0x1b12 <__fp_splitA+0x2a>
    1af4:	87 95       	ror	r24
    1af6:	08 95       	ret
    1af8:	12 16       	cp	r1, r18
    1afa:	13 06       	cpc	r1, r19
    1afc:	14 06       	cpc	r1, r20
    1afe:	55 1f       	adc	r21, r21
    1b00:	f2 cf       	rjmp	.-28     	; 0x1ae6 <__fp_split3+0xe>
    1b02:	46 95       	lsr	r20
    1b04:	f1 df       	rcall	.-30     	; 0x1ae8 <__fp_splitA>
    1b06:	08 c0       	rjmp	.+16     	; 0x1b18 <__fp_splitA+0x30>
    1b08:	16 16       	cp	r1, r22
    1b0a:	17 06       	cpc	r1, r23
    1b0c:	18 06       	cpc	r1, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	f1 cf       	rjmp	.-30     	; 0x1af4 <__fp_splitA+0xc>
    1b12:	86 95       	lsr	r24
    1b14:	71 05       	cpc	r23, r1
    1b16:	61 05       	cpc	r22, r1
    1b18:	08 94       	sec
    1b1a:	08 95       	ret

00001b1c <__fp_zero>:
    1b1c:	e8 94       	clt

00001b1e <__fp_szero>:
    1b1e:	bb 27       	eor	r27, r27
    1b20:	66 27       	eor	r22, r22
    1b22:	77 27       	eor	r23, r23
    1b24:	cb 01       	movw	r24, r22
    1b26:	97 f9       	bld	r25, 7
    1b28:	08 95       	ret

00001b2a <__gesf2>:
    1b2a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__fp_cmp>
    1b2e:	08 f4       	brcc	.+2      	; 0x1b32 <__gesf2+0x8>
    1b30:	8f ef       	ldi	r24, 0xFF	; 255
    1b32:	08 95       	ret

00001b34 <__mulsf3>:
    1b34:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__mulsf3x>
    1b38:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__fp_round>
    1b3c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__fp_pscA>
    1b40:	38 f0       	brcs	.+14     	; 0x1b50 <__mulsf3+0x1c>
    1b42:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_pscB>
    1b46:	20 f0       	brcs	.+8      	; 0x1b50 <__mulsf3+0x1c>
    1b48:	95 23       	and	r25, r21
    1b4a:	11 f0       	breq	.+4      	; 0x1b50 <__mulsf3+0x1c>
    1b4c:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__fp_inf>
    1b50:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__fp_nan>
    1b54:	11 24       	eor	r1, r1
    1b56:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__fp_szero>

00001b5a <__mulsf3x>:
    1b5a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fp_split3>
    1b5e:	70 f3       	brcs	.-36     	; 0x1b3c <__mulsf3+0x8>

00001b60 <__mulsf3_pse>:
    1b60:	95 9f       	mul	r25, r21
    1b62:	c1 f3       	breq	.-16     	; 0x1b54 <__mulsf3+0x20>
    1b64:	95 0f       	add	r25, r21
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	55 1f       	adc	r21, r21
    1b6a:	62 9f       	mul	r22, r18
    1b6c:	f0 01       	movw	r30, r0
    1b6e:	72 9f       	mul	r23, r18
    1b70:	bb 27       	eor	r27, r27
    1b72:	f0 0d       	add	r31, r0
    1b74:	b1 1d       	adc	r27, r1
    1b76:	63 9f       	mul	r22, r19
    1b78:	aa 27       	eor	r26, r26
    1b7a:	f0 0d       	add	r31, r0
    1b7c:	b1 1d       	adc	r27, r1
    1b7e:	aa 1f       	adc	r26, r26
    1b80:	64 9f       	mul	r22, r20
    1b82:	66 27       	eor	r22, r22
    1b84:	b0 0d       	add	r27, r0
    1b86:	a1 1d       	adc	r26, r1
    1b88:	66 1f       	adc	r22, r22
    1b8a:	82 9f       	mul	r24, r18
    1b8c:	22 27       	eor	r18, r18
    1b8e:	b0 0d       	add	r27, r0
    1b90:	a1 1d       	adc	r26, r1
    1b92:	62 1f       	adc	r22, r18
    1b94:	73 9f       	mul	r23, r19
    1b96:	b0 0d       	add	r27, r0
    1b98:	a1 1d       	adc	r26, r1
    1b9a:	62 1f       	adc	r22, r18
    1b9c:	83 9f       	mul	r24, r19
    1b9e:	a0 0d       	add	r26, r0
    1ba0:	61 1d       	adc	r22, r1
    1ba2:	22 1f       	adc	r18, r18
    1ba4:	74 9f       	mul	r23, r20
    1ba6:	33 27       	eor	r19, r19
    1ba8:	a0 0d       	add	r26, r0
    1baa:	61 1d       	adc	r22, r1
    1bac:	23 1f       	adc	r18, r19
    1bae:	84 9f       	mul	r24, r20
    1bb0:	60 0d       	add	r22, r0
    1bb2:	21 1d       	adc	r18, r1
    1bb4:	82 2f       	mov	r24, r18
    1bb6:	76 2f       	mov	r23, r22
    1bb8:	6a 2f       	mov	r22, r26
    1bba:	11 24       	eor	r1, r1
    1bbc:	9f 57       	subi	r25, 0x7F	; 127
    1bbe:	50 40       	sbci	r21, 0x00	; 0
    1bc0:	9a f0       	brmi	.+38     	; 0x1be8 <__mulsf3_pse+0x88>
    1bc2:	f1 f0       	breq	.+60     	; 0x1c00 <__mulsf3_pse+0xa0>
    1bc4:	88 23       	and	r24, r24
    1bc6:	4a f0       	brmi	.+18     	; 0x1bda <__mulsf3_pse+0x7a>
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	bb 1f       	adc	r27, r27
    1bce:	66 1f       	adc	r22, r22
    1bd0:	77 1f       	adc	r23, r23
    1bd2:	88 1f       	adc	r24, r24
    1bd4:	91 50       	subi	r25, 0x01	; 1
    1bd6:	50 40       	sbci	r21, 0x00	; 0
    1bd8:	a9 f7       	brne	.-22     	; 0x1bc4 <__mulsf3_pse+0x64>
    1bda:	9e 3f       	cpi	r25, 0xFE	; 254
    1bdc:	51 05       	cpc	r21, r1
    1bde:	80 f0       	brcs	.+32     	; 0x1c00 <__mulsf3_pse+0xa0>
    1be0:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__fp_inf>
    1be4:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__fp_szero>
    1be8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bea:	e4 f3       	brlt	.-8      	; 0x1be4 <__mulsf3_pse+0x84>
    1bec:	98 3e       	cpi	r25, 0xE8	; 232
    1bee:	d4 f3       	brlt	.-12     	; 0x1be4 <__mulsf3_pse+0x84>
    1bf0:	86 95       	lsr	r24
    1bf2:	77 95       	ror	r23
    1bf4:	67 95       	ror	r22
    1bf6:	b7 95       	ror	r27
    1bf8:	f7 95       	ror	r31
    1bfa:	e7 95       	ror	r30
    1bfc:	9f 5f       	subi	r25, 0xFF	; 255
    1bfe:	c1 f7       	brne	.-16     	; 0x1bf0 <__mulsf3_pse+0x90>
    1c00:	fe 2b       	or	r31, r30
    1c02:	88 0f       	add	r24, r24
    1c04:	91 1d       	adc	r25, r1
    1c06:	96 95       	lsr	r25
    1c08:	87 95       	ror	r24
    1c0a:	97 f9       	bld	r25, 7
    1c0c:	08 95       	ret

00001c0e <__udivmodsi4>:
    1c0e:	a1 e2       	ldi	r26, 0x21	; 33
    1c10:	1a 2e       	mov	r1, r26
    1c12:	aa 1b       	sub	r26, r26
    1c14:	bb 1b       	sub	r27, r27
    1c16:	fd 01       	movw	r30, r26
    1c18:	0d c0       	rjmp	.+26     	; 0x1c34 <__udivmodsi4_ep>

00001c1a <__udivmodsi4_loop>:
    1c1a:	aa 1f       	adc	r26, r26
    1c1c:	bb 1f       	adc	r27, r27
    1c1e:	ee 1f       	adc	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	a2 17       	cp	r26, r18
    1c24:	b3 07       	cpc	r27, r19
    1c26:	e4 07       	cpc	r30, r20
    1c28:	f5 07       	cpc	r31, r21
    1c2a:	20 f0       	brcs	.+8      	; 0x1c34 <__udivmodsi4_ep>
    1c2c:	a2 1b       	sub	r26, r18
    1c2e:	b3 0b       	sbc	r27, r19
    1c30:	e4 0b       	sbc	r30, r20
    1c32:	f5 0b       	sbc	r31, r21

00001c34 <__udivmodsi4_ep>:
    1c34:	66 1f       	adc	r22, r22
    1c36:	77 1f       	adc	r23, r23
    1c38:	88 1f       	adc	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	1a 94       	dec	r1
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <__udivmodsi4_loop>
    1c40:	60 95       	com	r22
    1c42:	70 95       	com	r23
    1c44:	80 95       	com	r24
    1c46:	90 95       	com	r25
    1c48:	9b 01       	movw	r18, r22
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	bd 01       	movw	r22, r26
    1c4e:	cf 01       	movw	r24, r30
    1c50:	08 95       	ret

00001c52 <__tablejump2__>:
    1c52:	ee 0f       	add	r30, r30
    1c54:	ff 1f       	adc	r31, r31
    1c56:	88 1f       	adc	r24, r24
    1c58:	8b bf       	out	0x3b, r24	; 59
    1c5a:	07 90       	elpm	r0, Z+
    1c5c:	f6 91       	elpm	r31, Z
    1c5e:	e0 2d       	mov	r30, r0
    1c60:	1b be       	out	0x3b, r1	; 59
    1c62:	19 94       	eijmp

00001c64 <_exit>:
    1c64:	f8 94       	cli

00001c66 <__stop_program>:
    1c66:	ff cf       	rjmp	.-2      	; 0x1c66 <__stop_program>
