
eCVT 507.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00802000  00000e0e  00000ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000237  00802024  00802024  00000ec6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007234  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033d7  00000000  00000000  00008354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001503  00000000  00000000  0000b72b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f8  00000000  00000000  0000cc30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000036f5  00000000  00000000  0000d328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e41  00000000  00000000  00010a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0001185e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
   4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  38:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  40:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  44:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  4c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  58:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  5c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  60:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  64:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  68:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  6c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  70:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  74:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  78:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  7c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  80:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  84:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  88:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  8c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  90:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  94:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  98:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  9c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  ac:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_43>
  b0:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_44>
  b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  c4:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_49>
  c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 100:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 104:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 108:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 10c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 110:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 114:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 118:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 11c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 120:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 124:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 128:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 12c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 130:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 134:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 138:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 13c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 140:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 144:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 148:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 14c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 150:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 154:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 158:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 15c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 160:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 164:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 168:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 16c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 170:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 174:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 178:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 17c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 180:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 184:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 188:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 18c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 190:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 194:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 198:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 19c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

000001fc <__trampolines_start>:
 1fc:	0c 94 43 04 	jmp	0x886	; 0x886 <_GLOBAL__sub_I_ePID>

00000200 <__ctors_start>:
 200:	43 04       	cpc	r4, r3

00000202 <__ctors_end>:
 202:	11 24       	eor	r1, r1
 204:	1f be       	out	0x3f, r1	; 63
 206:	cf ef       	ldi	r28, 0xFF	; 255
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	df e3       	ldi	r29, 0x3F	; 63
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	00 e0       	ldi	r16, 0x00	; 0
 210:	0c bf       	out	0x3c, r16	; 60
 212:	18 be       	out	0x38, r1	; 56
 214:	19 be       	out	0x39, r1	; 57
 216:	1a be       	out	0x3a, r1	; 58
 218:	1b be       	out	0x3b, r1	; 59

0000021a <__do_copy_data>:
 21a:	10 e2       	ldi	r17, 0x20	; 32
 21c:	a0 e0       	ldi	r26, 0x00	; 0
 21e:	b0 e2       	ldi	r27, 0x20	; 32
 220:	ee e0       	ldi	r30, 0x0E	; 14
 222:	fe e0       	ldi	r31, 0x0E	; 14
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	0b bf       	out	0x3b, r16	; 59
 228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
 22a:	07 90       	elpm	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	a4 32       	cpi	r26, 0x24	; 36
 230:	b1 07       	cpc	r27, r17
 232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>
 234:	1b be       	out	0x3b, r1	; 59

00000236 <__do_clear_bss>:
 236:	22 e2       	ldi	r18, 0x22	; 34
 238:	a4 e2       	ldi	r26, 0x24	; 36
 23a:	b0 e2       	ldi	r27, 0x20	; 32
 23c:	01 c0       	rjmp	.+2      	; 0x240 <.do_clear_bss_start>

0000023e <.do_clear_bss_loop>:
 23e:	1d 92       	st	X+, r1

00000240 <.do_clear_bss_start>:
 240:	ab 35       	cpi	r26, 0x5B	; 91
 242:	b2 07       	cpc	r27, r18
 244:	e1 f7       	brne	.-8      	; 0x23e <.do_clear_bss_loop>

00000246 <__do_global_ctors>:
 246:	11 e0       	ldi	r17, 0x01	; 1
 248:	c1 e0       	ldi	r28, 0x01	; 1
 24a:	d1 e0       	ldi	r29, 0x01	; 1
 24c:	00 e0       	ldi	r16, 0x00	; 0
 24e:	06 c0       	rjmp	.+12     	; 0x25c <__do_global_ctors+0x16>
 250:	21 97       	sbiw	r28, 0x01	; 1
 252:	01 09       	sbc	r16, r1
 254:	80 2f       	mov	r24, r16
 256:	fe 01       	movw	r30, r28
 258:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__tablejump2__>
 25c:	c0 30       	cpi	r28, 0x00	; 0
 25e:	d1 07       	cpc	r29, r17
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 07       	cpc	r16, r24
 264:	a9 f7       	brne	.-22     	; 0x250 <__do_global_ctors+0xa>
 266:	0e 94 75 03 	call	0x6ea	; 0x6ea <main>
 26a:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <_exit>

0000026e <__bad_interrupt>:
 26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <_ZN7EncoderC1E3PinS0_>:
#include "IO_Config.h"
#include "TC_Config.h"
#include "Pin.h"

// Constructor
Encoder::Encoder(Pin ENC_A, Pin ENC_B) {
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	2a 97       	sbiw	r28, 0x0a	; 10
 280:	cd bf       	out	0x3d, r28	; 61
 282:	de bf       	out	0x3e, r29	; 62
 284:	8b 83       	std	Y+3, r24	; 0x03
 286:	9c 83       	std	Y+4, r25	; 0x04
 288:	4d 83       	std	Y+5, r20	; 0x05
 28a:	5e 83       	std	Y+6, r21	; 0x06
 28c:	6f 83       	std	Y+7, r22	; 0x07
 28e:	08 87       	std	Y+8, r16	; 0x08
 290:	19 87       	std	Y+9, r17	; 0x09
 292:	2a 87       	std	Y+10, r18	; 0x0a

	this->ENC_A = ENC_A;
 294:	2b 81       	ldd	r18, Y+3	; 0x03
 296:	3c 81       	ldd	r19, Y+4	; 0x04
 298:	8d 81       	ldd	r24, Y+5	; 0x05
 29a:	9e 81       	ldd	r25, Y+6	; 0x06
 29c:	af 81       	ldd	r26, Y+7	; 0x07
 29e:	f9 01       	movw	r30, r18
 2a0:	80 83       	st	Z, r24
 2a2:	91 83       	std	Z+1, r25	; 0x01
 2a4:	a2 83       	std	Z+2, r26	; 0x02
	this->ENC_B = ENC_B;
 2a6:	2b 81       	ldd	r18, Y+3	; 0x03
 2a8:	3c 81       	ldd	r19, Y+4	; 0x04
 2aa:	88 85       	ldd	r24, Y+8	; 0x08
 2ac:	99 85       	ldd	r25, Y+9	; 0x09
 2ae:	aa 85       	ldd	r26, Y+10	; 0x0a
 2b0:	f9 01       	movw	r30, r18
 2b2:	83 83       	std	Z+3, r24	; 0x03
 2b4:	94 83       	std	Z+4, r25	; 0x04
 2b6:	a5 83       	std	Z+5, r26	; 0x05

	// Port Setup
	ENC_A.PORT->DIRCLR = (ENC_A.PIN_BM | ENC_B.PIN_BM);
 2b8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ba:	9e 81       	ldd	r25, Y+6	; 0x06
 2bc:	3f 81       	ldd	r19, Y+7	; 0x07
 2be:	2a 85       	ldd	r18, Y+10	; 0x0a
 2c0:	23 2b       	or	r18, r19
 2c2:	fc 01       	movw	r30, r24
 2c4:	22 83       	std	Z+2, r18	; 0x02

	/* Set QDPH0 and QDPH1 sensing level. */
	PORTCFG.MPCMASK |= (ENC_A.PIN_BM);
 2c6:	80 eb       	ldi	r24, 0xB0	; 176
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	20 eb       	ldi	r18, 0xB0	; 176
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	30 81       	ld	r19, Z
 2d2:	2f 81       	ldd	r18, Y+7	; 0x07
 2d4:	23 2b       	or	r18, r19
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
	PORTCFG.MPCMASK |= (ENC_B.PIN_BM);
 2da:	80 eb       	ldi	r24, 0xB0	; 176
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	20 eb       	ldi	r18, 0xB0	; 176
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	f9 01       	movw	r30, r18
 2e4:	30 81       	ld	r19, Z
 2e6:	2a 85       	ldd	r18, Y+10	; 0x0a
 2e8:	23 2b       	or	r18, r19
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
	ENC_A.PORT->PIN0CTRL = (ENC_A.PORT->PIN0CTRL & ~PORT_ISC_gm) | PORT_ISC_LEVEL_gc
 2ee:	8d 81       	ldd	r24, Y+5	; 0x05
 2f0:	9e 81       	ldd	r25, Y+6	; 0x06
 2f2:	2d 81       	ldd	r18, Y+5	; 0x05
 2f4:	3e 81       	ldd	r19, Y+6	; 0x06
 2f6:	f9 01       	movw	r30, r18
 2f8:	20 89       	ldd	r18, Z+16	; 0x10
	                  | (false ? PORT_INVEN_bm : 0);
 2fa:	28 7f       	andi	r18, 0xF8	; 248
 2fc:	23 60       	ori	r18, 0x03	; 3
 2fe:	fc 01       	movw	r30, r24
 300:	20 8b       	std	Z+16, r18	; 0x10

	// Event System Setup
    uint8_t pin = 0;
 302:	19 82       	std	Y+1, r1	; 0x01
    uint8_t pin_bm = ENC_A.PIN_BM;
 304:	8f 81       	ldd	r24, Y+7	; 0x07
 306:	8a 83       	std	Y+2, r24	; 0x02
    while (pin_bm) {
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	88 23       	and	r24, r24
 30c:	51 f0       	breq	.+20     	; 0x322 <_ZN7EncoderC1E3PinS0_+0xb0>
    	pin_bm >>= 1;
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	8a 83       	std	Y+2, r24	; 0x02
    	pin++;
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	89 83       	std	Y+1, r24	; 0x01
	                  | (false ? PORT_INVEN_bm : 0);

	// Event System Setup
    uint8_t pin = 0;
    uint8_t pin_bm = ENC_A.PIN_BM;
    while (pin_bm) {
 320:	f3 cf       	rjmp	.-26     	; 0x308 <_ZN7EncoderC1E3PinS0_+0x96>
    	pin_bm >>= 1;
    	pin++;
    }
	// Primary Encoder
	if (ENC_A.PIN_BM == P_ENC_A.PIN_BM) {
 322:	9f 81       	ldd	r25, Y+7	; 0x07
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	98 17       	cp	r25, r24
 328:	51 f4       	brne	.+20     	; 0x33e <_ZN7EncoderC1E3PinS0_+0xcc>
		EVSYS.CH2MUX = pin;
 32a:	80 e8       	ldi	r24, 0x80	; 128
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	29 81       	ldd	r18, Y+1	; 0x01
 330:	fc 01       	movw	r30, r24
 332:	22 83       	std	Z+2, r18	; 0x02
		EVSYS.CH2CTRL = EVSYS_QDEN_bm | EVSYS_DIGFILT_2SAMPLES_gc;
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	29 e0       	ldi	r18, 0x09	; 9
 33a:	fc 01       	movw	r30, r24
 33c:	22 87       	std	Z+10, r18	; 0x0a
	}
	// Secondary Encoder
	if (ENC_A.PIN_BM == S_ENC_A.PIN_BM) {
 33e:	9f 81       	ldd	r25, Y+7	; 0x07
 340:	80 e4       	ldi	r24, 0x40	; 64
 342:	98 17       	cp	r25, r24
 344:	51 f4       	brne	.+20     	; 0x35a <_ZN7EncoderC1E3PinS0_+0xe8>
		EVSYS.CH3MUX = pin;
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	29 81       	ldd	r18, Y+1	; 0x01
 34c:	fc 01       	movw	r30, r24
 34e:	23 83       	std	Z+3, r18	; 0x03
		EVSYS.CH3CTRL = EVSYS_QDEN_bm | EVSYS_DIGFILT_2SAMPLES_gc;
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	29 e0       	ldi	r18, 0x09	; 9
 356:	fc 01       	movw	r30, r24
 358:	23 87       	std	Z+11, r18	; 0x0b
	}
	
	// TC Setup
	/* Handled in TC_Config files. */

}
 35a:	00 00       	nop
 35c:	2a 96       	adiw	r28, 0x0a	; 10
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	de bf       	out	0x3e, r29	; 62
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <_ZN11EngineSpeedC1Eh>:
#include "TC_Config.h"

const uint32_t TIMEOUT = 1000000;

// Constructor
EngineSpeed::EngineSpeed(uint8_t triggers) {
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	00 d0       	rcall	.+0      	; 0x376 <_ZN11EngineSpeedC1Eh+0xa>
 376:	1f 92       	push	r1
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	8a 83       	std	Y+2, r24	; 0x02
 37e:	9b 83       	std	Y+3, r25	; 0x03
 380:	6c 83       	std	Y+4, r22	; 0x04
 382:	8a 81       	ldd	r24, Y+2	; 0x02
 384:	9b 81       	ldd	r25, Y+3	; 0x03
 386:	fc 01       	movw	r30, r24
 388:	11 82       	std	Z+1, r1	; 0x01
	// Initialize variables
	this->triggers = triggers;
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	9b 81       	ldd	r25, Y+3	; 0x03
 38e:	2c 81       	ldd	r18, Y+4	; 0x04
 390:	fc 01       	movw	r30, r24
 392:	20 83       	st	Z, r18
	for (uint8_t i = 0; i < triggers; i++) {
 394:	19 82       	std	Y+1, r1	; 0x01
 396:	99 81       	ldd	r25, Y+1	; 0x01
 398:	8c 81       	ldd	r24, Y+4	; 0x04
 39a:	98 17       	cp	r25, r24
 39c:	d8 f4       	brcc	.+54     	; 0x3d4 <_ZN11EngineSpeedC1Eh+0x68>
		prevTime[i] = micros();
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	08 2f       	mov	r16, r24
 3a2:	10 e0       	ldi	r17, 0x00	; 0
 3a4:	0e 94 3c 06 	call	0xc78	; 0xc78 <_Z6microsv>
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
 3ac:	4a 81       	ldd	r20, Y+2	; 0x02
 3ae:	5b 81       	ldd	r21, Y+3	; 0x03
 3b0:	98 01       	movw	r18, r16
 3b2:	22 0f       	add	r18, r18
 3b4:	33 1f       	adc	r19, r19
 3b6:	22 0f       	add	r18, r18
 3b8:	33 1f       	adc	r19, r19
 3ba:	24 0f       	add	r18, r20
 3bc:	35 1f       	adc	r19, r21
 3be:	2e 5f       	subi	r18, 0xFE	; 254
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	f9 01       	movw	r30, r18
 3c4:	80 83       	st	Z, r24
 3c6:	91 83       	std	Z+1, r25	; 0x01
 3c8:	a2 83       	std	Z+2, r26	; 0x02
 3ca:	b3 83       	std	Z+3, r27	; 0x03

// Constructor
EngineSpeed::EngineSpeed(uint8_t triggers) {
	// Initialize variables
	this->triggers = triggers;
	for (uint8_t i = 0; i < triggers; i++) {
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	8f 5f       	subi	r24, 0xFF	; 255
 3d0:	89 83       	std	Y+1, r24	; 0x01
 3d2:	e1 cf       	rjmp	.-62     	; 0x396 <_ZN11EngineSpeedC1Eh+0x2a>
		prevTime[i] = micros();
	}
	currTime = micros();
 3d4:	0e 94 3c 06 	call	0xc78	; 0xc78 <_Z6microsv>
 3d8:	dc 01       	movw	r26, r24
 3da:	cb 01       	movw	r24, r22
 3dc:	2a 81       	ldd	r18, Y+2	; 0x02
 3de:	3b 81       	ldd	r19, Y+3	; 0x03
 3e0:	2e 56       	subi	r18, 0x6E	; 110
 3e2:	3e 4f       	sbci	r19, 0xFE	; 254
 3e4:	f9 01       	movw	r30, r18
 3e6:	80 83       	st	Z, r24
 3e8:	91 83       	std	Z+1, r25	; 0x01
 3ea:	a2 83       	std	Z+2, r26	; 0x02
 3ec:	b3 83       	std	Z+3, r27	; 0x03
}
 3ee:	00 00       	nop
 3f0:	24 96       	adiw	r28, 0x04	; 4
 3f2:	cd bf       	out	0x3d, r28	; 61
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	08 95       	ret

00000400 <_ZN11EngineSpeed4calcEv>:

void EngineSpeed::calc() {
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	1f 92       	push	r1
 406:	1f 92       	push	r1
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	89 83       	std	Y+1, r24	; 0x01
 40e:	9a 83       	std	Y+2, r25	; 0x02
	prevTime[pos] = currTime;
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	fc 01       	movw	r30, r24
 416:	81 81       	ldd	r24, Z+1	; 0x01
 418:	28 2f       	mov	r18, r24
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	9a 81       	ldd	r25, Y+2	; 0x02
 420:	8e 56       	subi	r24, 0x6E	; 110
 422:	9e 4f       	sbci	r25, 0xFE	; 254
 424:	fc 01       	movw	r30, r24
 426:	80 81       	ld	r24, Z
 428:	91 81       	ldd	r25, Z+1	; 0x01
 42a:	a2 81       	ldd	r26, Z+2	; 0x02
 42c:	b3 81       	ldd	r27, Z+3	; 0x03
 42e:	49 81       	ldd	r20, Y+1	; 0x01
 430:	5a 81       	ldd	r21, Y+2	; 0x02
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	22 0f       	add	r18, r18
 438:	33 1f       	adc	r19, r19
 43a:	24 0f       	add	r18, r20
 43c:	35 1f       	adc	r19, r21
 43e:	2e 5f       	subi	r18, 0xFE	; 254
 440:	3f 4f       	sbci	r19, 0xFF	; 255
 442:	f9 01       	movw	r30, r18
 444:	80 83       	st	Z, r24
 446:	91 83       	std	Z+1, r25	; 0x01
 448:	a2 83       	std	Z+2, r26	; 0x02
 44a:	b3 83       	std	Z+3, r27	; 0x03
	currTime = micros();
 44c:	0e 94 3c 06 	call	0xc78	; 0xc78 <_Z6microsv>
 450:	dc 01       	movw	r26, r24
 452:	cb 01       	movw	r24, r22
 454:	29 81       	ldd	r18, Y+1	; 0x01
 456:	3a 81       	ldd	r19, Y+2	; 0x02
 458:	2e 56       	subi	r18, 0x6E	; 110
 45a:	3e 4f       	sbci	r19, 0xFE	; 254
 45c:	f9 01       	movw	r30, r18
 45e:	80 83       	st	Z, r24
 460:	91 83       	std	Z+1, r25	; 0x01
 462:	a2 83       	std	Z+2, r26	; 0x02
 464:	b3 83       	std	Z+3, r27	; 0x03
	// Increment position
	pos++;
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	9a 81       	ldd	r25, Y+2	; 0x02
 46a:	fc 01       	movw	r30, r24
 46c:	81 81       	ldd	r24, Z+1	; 0x01
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	28 0f       	add	r18, r24
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	9a 81       	ldd	r25, Y+2	; 0x02
 476:	fc 01       	movw	r30, r24
 478:	21 83       	std	Z+1, r18	; 0x01
	if (pos >= triggers) {
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	9a 81       	ldd	r25, Y+2	; 0x02
 47e:	fc 01       	movw	r30, r24
 480:	21 81       	ldd	r18, Z+1	; 0x01
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	9a 81       	ldd	r25, Y+2	; 0x02
 486:	fc 01       	movw	r30, r24
 488:	80 81       	ld	r24, Z
 48a:	28 17       	cp	r18, r24
 48c:	20 f0       	brcs	.+8      	; 0x496 <_ZN11EngineSpeed4calcEv+0x96>
		pos = 0;
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	9a 81       	ldd	r25, Y+2	; 0x02
 492:	fc 01       	movw	r30, r24
 494:	11 82       	std	Z+1, r1	; 0x01
	}
}
 496:	00 00       	nop
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <_Z7IO_Initv>:

#include "IO_Config.h"
#include <avr/io.h>
#include "Pin.h"

void IO_Init() {
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62

	/* ** INPUT/OUTPUT CONFIGURATION ** */
	// Engine Speed Setup
	ENGINE_SPEED_PIN.PORT->INTCTRL = (ENGINE_SPEED_PIN.PORT->INTCTRL & ~PORT_INT0LVL_gm) | PORT_INT0LVL_MED_gc;
 4aa:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 4ae:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
 4b2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
 4b6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
 4ba:	f9 01       	movw	r30, r18
 4bc:	21 85       	ldd	r18, Z+9	; 0x09
 4be:	2c 7f       	andi	r18, 0xFC	; 252
 4c0:	22 60       	ori	r18, 0x02	; 2
 4c2:	fc 01       	movw	r30, r24
 4c4:	21 87       	std	Z+9, r18	; 0x09
	ENGINE_SPEED_PIN.PORT->INT0MASK = ENGINE_SPEED_PIN.PIN_BM;
 4c6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 4ca:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
 4ce:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__data_start+0x2>
 4d2:	fc 01       	movw	r30, r24
 4d4:	22 87       	std	Z+10, r18	; 0x0a

	// Rear Wheel Speed Setup
	RWHEELS_SPEED_PIN.PORT->INTCTRL = (RWHEELS_SPEED_PIN.PORT->INTCTRL & ~PORT_INT1LVL_gm) | PORT_INT0LVL_MED_gc;
 4d6:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <_ZL17RWHEELS_SPEED_PIN>
 4da:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <_ZL17RWHEELS_SPEED_PIN+0x1>
 4de:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <_ZL17RWHEELS_SPEED_PIN>
 4e2:	30 91 04 20 	lds	r19, 0x2004	; 0x802004 <_ZL17RWHEELS_SPEED_PIN+0x1>
 4e6:	f9 01       	movw	r30, r18
 4e8:	21 85       	ldd	r18, Z+9	; 0x09
 4ea:	21 7f       	andi	r18, 0xF1	; 241
 4ec:	22 60       	ori	r18, 0x02	; 2
 4ee:	fc 01       	movw	r30, r24
 4f0:	21 87       	std	Z+9, r18	; 0x09
	RWHEELS_SPEED_PIN.PORT->INT1MASK = RWHEELS_SPEED_PIN.PIN_BM;
 4f2:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <_ZL17RWHEELS_SPEED_PIN>
 4f6:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <_ZL17RWHEELS_SPEED_PIN+0x1>
 4fa:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <_ZL17RWHEELS_SPEED_PIN+0x2>
 4fe:	fc 01       	movw	r30, r24
 500:	23 87       	std	Z+11, r18	; 0x0b
	/* Handled in Motor files. */

	// Secondary Encoder Setup
	/* Handled in Encoder files. */

 502:	00 00       	nop
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <__vector_43>:

			// State Changes
			sCalc = false;
			sState = 3;
	}
}
 50a:	1f 92       	push	r1
 50c:	0f 92       	push	r0
 50e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 51a:	0f 92       	push	r0
 51c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 520:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 524:	0f 92       	push	r0
 526:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 52a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 52e:	0f 92       	push	r0
 530:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 534:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 538:	0f 92       	push	r0
 53a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 53e:	2f 93       	push	r18
 540:	3f 93       	push	r19
 542:	4f 93       	push	r20
 544:	5f 93       	push	r21
 546:	6f 93       	push	r22
 548:	7f 93       	push	r23
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	89 e9       	ldi	r24, 0x99	; 153
 560:	90 e2       	ldi	r25, 0x20	; 32
 562:	0e 94 00 02 	call	0x400	; 0x400 <_ZN11EngineSpeed4calcEv>
 566:	00 00       	nop
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	0f 90       	pop	r0
 586:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 58a:	0f 90       	pop	r0
 58c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 590:	0f 90       	pop	r0
 592:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 596:	0f 90       	pop	r0
 598:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 59c:	0f 90       	pop	r0
 59e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <__vector_44>:
 5a8:	1f 92       	push	r1
 5aa:	0f 92       	push	r0
 5ac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 5b8:	0f 92       	push	r0
 5ba:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 5be:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 5c2:	0f 92       	push	r0
 5c4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 5c8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 5cc:	0f 92       	push	r0
 5ce:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 5d2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 5d6:	0f 92       	push	r0
 5d8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 5dc:	2f 93       	push	r18
 5de:	3f 93       	push	r19
 5e0:	4f 93       	push	r20
 5e2:	5f 93       	push	r21
 5e4:	6f 93       	push	r22
 5e6:	7f 93       	push	r23
 5e8:	8f 93       	push	r24
 5ea:	9f 93       	push	r25
 5ec:	af 93       	push	r26
 5ee:	bf 93       	push	r27
 5f0:	ef 93       	push	r30
 5f2:	ff 93       	push	r31
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	8f e2       	ldi	r24, 0x2F	; 47
 5fe:	92 e2       	ldi	r25, 0x22	; 34
 600:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN10WheelSpeed4calcEv>
 604:	00 00       	nop
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	ff 91       	pop	r31
 60c:	ef 91       	pop	r30
 60e:	bf 91       	pop	r27
 610:	af 91       	pop	r26
 612:	9f 91       	pop	r25
 614:	8f 91       	pop	r24
 616:	7f 91       	pop	r23
 618:	6f 91       	pop	r22
 61a:	5f 91       	pop	r21
 61c:	4f 91       	pop	r20
 61e:	3f 91       	pop	r19
 620:	2f 91       	pop	r18
 622:	0f 90       	pop	r0
 624:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 628:	0f 90       	pop	r0
 62a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 62e:	0f 90       	pop	r0
 630:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 634:	0f 90       	pop	r0
 636:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 63a:	0f 90       	pop	r0
 63c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 640:	0f 90       	pop	r0
 642:	1f 90       	pop	r1
 644:	18 95       	reti

00000646 <__vector_49>:
 646:	1f 92       	push	r1
 648:	0f 92       	push	r0
 64a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 64e:	0f 92       	push	r0
 650:	11 24       	eor	r1, r1
 652:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 656:	0f 92       	push	r0
 658:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 65c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 660:	0f 92       	push	r0
 662:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 666:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 66a:	0f 92       	push	r0
 66c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 670:	2f 93       	push	r18
 672:	3f 93       	push	r19
 674:	4f 93       	push	r20
 676:	5f 93       	push	r21
 678:	8f 93       	push	r24
 67a:	9f 93       	push	r25
 67c:	ef 93       	push	r30
 67e:	ff 93       	push	r31
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <eCalc>
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	80 93 59 22 	sts	0x2259, r24	; 0x802259 <pCalc>
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <sCalc>
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	98 e0       	ldi	r25, 0x08	; 8
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	38 e0       	ldi	r19, 0x08	; 8
 6a2:	f9 01       	movw	r30, r18
 6a4:	40 a5       	ldd	r20, Z+40	; 0x28
 6a6:	51 a5       	ldd	r21, Z+41	; 0x29
 6a8:	20 e1       	ldi	r18, 0x10	; 16
 6aa:	37 e2       	ldi	r19, 0x27	; 39
 6ac:	24 0f       	add	r18, r20
 6ae:	35 1f       	adc	r19, r21
 6b0:	fc 01       	movw	r30, r24
 6b2:	20 a7       	std	Z+40, r18	; 0x28
 6b4:	31 a7       	std	Z+41, r19	; 0x29
 6b6:	00 00       	nop
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	5f 91       	pop	r21
 6c6:	4f 91       	pop	r20
 6c8:	3f 91       	pop	r19
 6ca:	2f 91       	pop	r18
 6cc:	0f 90       	pop	r0
 6ce:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 6d2:	0f 90       	pop	r0
 6d4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 6d8:	0f 90       	pop	r0
 6da:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 6de:	0f 90       	pop	r0
 6e0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <main>:



/* ** MAIN ** */
int main(void) {
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
	// #ifdef DEBUG
	// Serial.begin(9600);
	// #endif
	
	/* ** INPUT/OUTPUT CONFIGURATIONS ** */
	IO_Init();
 6f2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_Z7IO_Initv>
	 // ** TIMER/COUNTER CONFIGURATIONS ** 
	TC_Init();
 6f6:	0e 94 c0 05 	call	0xb80	; 0xb80 <_Z7TC_Initv>

	pMot.init();
 6fa:	88 e3       	ldi	r24, 0x38	; 56
 6fc:	92 e2       	ldi	r25, 0x22	; 34
 6fe:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN5Motor4initEv>
/*	PORTA.DIRSET = PIN0_bm | PIN1_bm;*/
/*	PORTE.DIRSET = PIN2_bm;*/
	pMot.setDutyCycle(30);
 702:	6e e1       	ldi	r22, 0x1E	; 30
 704:	88 e3       	ldi	r24, 0x38	; 56
 706:	92 e2       	ldi	r25, 0x22	; 34
 708:	0e 94 b7 04 	call	0x96e	; 0x96e <_ZN5Motor12setDutyCycleEa>

	while (true) {
 70c:	ff cf       	rjmp	.-2      	; 0x70c <main+0x22>

0000070e <_Z41__static_initialization_and_destruction_0ii>:
		//eCVT();
		//primary();
		//secondary();
	}

 70e:	cf 92       	push	r12
 710:	df 92       	push	r13
 712:	ef 92       	push	r14
 714:	ff 92       	push	r15
 716:	0f 93       	push	r16
 718:	1f 93       	push	r17
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	00 d0       	rcall	.+0      	; 0x720 <_Z41__static_initialization_and_destruction_0ii+0x12>
 720:	1f 92       	push	r1
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	89 83       	std	Y+1, r24	; 0x01
 728:	9a 83       	std	Y+2, r25	; 0x02
 72a:	6b 83       	std	Y+3, r22	; 0x03
 72c:	7c 83       	std	Y+4, r23	; 0x04
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	9a 81       	ldd	r25, Y+2	; 0x02
 732:	01 97       	sbiw	r24, 0x01	; 1
 734:	09 f0       	breq	.+2      	; 0x738 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 736:	9a c0       	rjmp	.+308    	; 0x86c <_Z41__static_initialization_and_destruction_0ii+0x15e>
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	9c 81       	ldd	r25, Y+4	; 0x04
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	09 f0       	breq	.+2      	; 0x742 <_Z41__static_initialization_and_destruction_0ii+0x34>
 740:	95 c0       	rjmp	.+298    	; 0x86c <_Z41__static_initialization_and_destruction_0ii+0x15e>
const uint16_t SHIFT_SPEED  = 3400;

const uint16_t SHEAVE_OFFSET = 0;

// PID Controllers
PIDController ePID(1, 1, 0);
 742:	c1 2c       	mov	r12, r1
 744:	d1 2c       	mov	r13, r1
 746:	76 01       	movw	r14, r12
 748:	00 e0       	ldi	r16, 0x00	; 0
 74a:	10 e0       	ldi	r17, 0x00	; 0
 74c:	20 e8       	ldi	r18, 0x80	; 128
 74e:	3f e3       	ldi	r19, 0x3F	; 63
 750:	40 e0       	ldi	r20, 0x00	; 0
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	60 e8       	ldi	r22, 0x80	; 128
 756:	7f e3       	ldi	r23, 0x3F	; 63
 758:	84 e2       	ldi	r24, 0x24	; 36
 75a:	90 e2       	ldi	r25, 0x20	; 32
 75c:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN13PIDControllerC1Efff>
PIDController pPID(0.01, 0, 0);
 760:	c1 2c       	mov	r12, r1
 762:	d1 2c       	mov	r13, r1
 764:	76 01       	movw	r14, r12
 766:	00 e0       	ldi	r16, 0x00	; 0
 768:	10 e0       	ldi	r17, 0x00	; 0
 76a:	98 01       	movw	r18, r16
 76c:	4a e0       	ldi	r20, 0x0A	; 10
 76e:	57 ed       	ldi	r21, 0xD7	; 215
 770:	63 e2       	ldi	r22, 0x23	; 35
 772:	7c e3       	ldi	r23, 0x3C	; 60
 774:	8b e4       	ldi	r24, 0x4B	; 75
 776:	90 e2       	ldi	r25, 0x20	; 32
 778:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN13PIDControllerC1Efff>
PIDController sPID(0.01, 0, 0);
 77c:	c1 2c       	mov	r12, r1
 77e:	d1 2c       	mov	r13, r1
 780:	76 01       	movw	r14, r12
 782:	00 e0       	ldi	r16, 0x00	; 0
 784:	10 e0       	ldi	r17, 0x00	; 0
 786:	98 01       	movw	r18, r16
 788:	4a e0       	ldi	r20, 0x0A	; 10
 78a:	57 ed       	ldi	r21, 0xD7	; 215
 78c:	63 e2       	ldi	r22, 0x23	; 35
 78e:	7c e3       	ldi	r23, 0x3C	; 60
 790:	82 e7       	ldi	r24, 0x72	; 114
 792:	90 e2       	ldi	r25, 0x20	; 32
 794:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN13PIDControllerC1Efff>

// Hall Effect Sensors
EngineSpeed engineSpeed(8);
 798:	68 e0       	ldi	r22, 0x08	; 8
 79a:	89 e9       	ldi	r24, 0x99	; 153
 79c:	90 e2       	ldi	r25, 0x20	; 32
 79e:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN11EngineSpeedC1Eh>
WheelSpeed rWheelsSpeed(8);
 7a2:	68 e0       	ldi	r22, 0x08	; 8
 7a4:	8f e2       	ldi	r24, 0x2F	; 47
 7a6:	92 e2       	ldi	r25, 0x22	; 34
 7a8:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN10WheelSpeedC1Eh>

// Motors
Motor pMot(P_MOT_INA, P_MOT_INB, P_MOT_PWM);
 7ac:	e0 90 0c 20 	lds	r14, 0x200C	; 0x80200c <_ZL9P_MOT_PWM>
 7b0:	f0 90 0d 20 	lds	r15, 0x200D	; 0x80200d <_ZL9P_MOT_PWM+0x1>
 7b4:	00 91 0e 20 	lds	r16, 0x200E	; 0x80200e <_ZL9P_MOT_PWM+0x2>
 7b8:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <_ZL9P_MOT_INB>
 7bc:	30 91 0a 20 	lds	r19, 0x200A	; 0x80200a <_ZL9P_MOT_INB+0x1>
 7c0:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <_ZL9P_MOT_INB+0x2>
 7c4:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZL9P_MOT_INA>
 7c8:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZL9P_MOT_INA+0x1>
 7cc:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <_ZL9P_MOT_INA+0x2>
 7d0:	67 01       	movw	r12, r14
 7d2:	e0 2e       	mov	r14, r16
 7d4:	89 01       	movw	r16, r18
 7d6:	24 2f       	mov	r18, r20
 7d8:	ac 01       	movw	r20, r24
 7da:	6a 2f       	mov	r22, r26
 7dc:	88 e3       	ldi	r24, 0x38	; 56
 7de:	92 e2       	ldi	r25, 0x22	; 34
 7e0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN5MotorC1E3PinS0_S0_>
Motor sMot(S_MOT_INA, S_MOT_INB, S_MOT_PWM);
 7e4:	e0 90 1b 20 	lds	r14, 0x201B	; 0x80201b <_ZL9S_MOT_PWM>
 7e8:	f0 90 1c 20 	lds	r15, 0x201C	; 0x80201c <_ZL9S_MOT_PWM+0x1>
 7ec:	00 91 1d 20 	lds	r16, 0x201D	; 0x80201d <_ZL9S_MOT_PWM+0x2>
 7f0:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <_ZL9S_MOT_INB>
 7f4:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <_ZL9S_MOT_INB+0x1>
 7f8:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <_ZL9S_MOT_INB+0x2>
 7fc:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <_ZL9S_MOT_INA>
 800:	90 91 16 20 	lds	r25, 0x2016	; 0x802016 <_ZL9S_MOT_INA+0x1>
 804:	a0 91 17 20 	lds	r26, 0x2017	; 0x802017 <_ZL9S_MOT_INA+0x2>
 808:	67 01       	movw	r12, r14
 80a:	e0 2e       	mov	r14, r16
 80c:	89 01       	movw	r16, r18
 80e:	24 2f       	mov	r18, r20
 810:	ac 01       	movw	r20, r24
 812:	6a 2f       	mov	r22, r26
 814:	82 e4       	ldi	r24, 0x42	; 66
 816:	92 e2       	ldi	r25, 0x22	; 34
 818:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN5MotorC1E3PinS0_S0_>

// Encoders
Encoder pEnc(P_ENC_A, P_ENC_B);
 81c:	20 91 12 20 	lds	r18, 0x2012	; 0x802012 <_ZL7P_ENC_B>
 820:	30 91 13 20 	lds	r19, 0x2013	; 0x802013 <_ZL7P_ENC_B+0x1>
 824:	40 91 14 20 	lds	r20, 0x2014	; 0x802014 <_ZL7P_ENC_B+0x2>
 828:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <_ZL7P_ENC_A>
 82c:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <_ZL7P_ENC_A+0x1>
 830:	a0 91 11 20 	lds	r26, 0x2011	; 0x802011 <_ZL7P_ENC_A+0x2>
 834:	89 01       	movw	r16, r18
 836:	24 2f       	mov	r18, r20
 838:	ac 01       	movw	r20, r24
 83a:	6a 2f       	mov	r22, r26
 83c:	8c e4       	ldi	r24, 0x4C	; 76
 83e:	92 e2       	ldi	r25, 0x22	; 34
 840:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7EncoderC1E3PinS0_>
Encoder sEnc(S_ENC_A, S_ENC_B);
 844:	20 91 21 20 	lds	r18, 0x2021	; 0x802021 <_ZL7S_ENC_B>
 848:	30 91 22 20 	lds	r19, 0x2022	; 0x802022 <_ZL7S_ENC_B+0x1>
 84c:	40 91 23 20 	lds	r20, 0x2023	; 0x802023 <_ZL7S_ENC_B+0x2>
 850:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <_ZL7S_ENC_A>
 854:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <_ZL7S_ENC_A+0x1>
 858:	a0 91 20 20 	lds	r26, 0x2020	; 0x802020 <_ZL7S_ENC_A+0x2>
 85c:	89 01       	movw	r16, r18
 85e:	24 2f       	mov	r18, r20
 860:	ac 01       	movw	r20, r24
 862:	6a 2f       	mov	r22, r26
 864:	82 e5       	ldi	r24, 0x52	; 82
 866:	92 e2       	ldi	r25, 0x22	; 34
 868:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7EncoderC1E3PinS0_>
		//eCVT();
		//primary();
		//secondary();
	}

 86c:	00 00       	nop
 86e:	24 96       	adiw	r28, 0x04	; 4
 870:	cd bf       	out	0x3d, r28	; 61
 872:	de bf       	out	0x3e, r29	; 62
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	ff 90       	pop	r15
 87e:	ef 90       	pop	r14
 880:	df 90       	pop	r13
 882:	cf 90       	pop	r12
 884:	08 95       	ret

00000886 <_GLOBAL__sub_I_ePID>:
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
 88e:	6f ef       	ldi	r22, 0xFF	; 255
 890:	7f ef       	ldi	r23, 0xFF	; 255
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 87 03 	call	0x70e	; 0x70e <_Z41__static_initialization_and_destruction_0ii>
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <_ZN5MotorC1E3PinS0_S0_>:
#include <stdint.h>
#include "TC_Config.h"
#include "Pin.h"

// Constructor
Motor::Motor(Pin INA, Pin INB, Pin PWM) {
 8a0:	cf 92       	push	r12
 8a2:	df 92       	push	r13
 8a4:	ef 92       	push	r14
 8a6:	0f 93       	push	r16
 8a8:	1f 93       	push	r17
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
 8b2:	2b 97       	sbiw	r28, 0x0b	; 11
 8b4:	cd bf       	out	0x3d, r28	; 61
 8b6:	de bf       	out	0x3e, r29	; 62
 8b8:	89 83       	std	Y+1, r24	; 0x01
 8ba:	9a 83       	std	Y+2, r25	; 0x02
 8bc:	4b 83       	std	Y+3, r20	; 0x03
 8be:	5c 83       	std	Y+4, r21	; 0x04
 8c0:	6d 83       	std	Y+5, r22	; 0x05
 8c2:	0e 83       	std	Y+6, r16	; 0x06
 8c4:	1f 83       	std	Y+7, r17	; 0x07
 8c6:	28 87       	std	Y+8, r18	; 0x08
 8c8:	c9 86       	std	Y+9, r12	; 0x09
 8ca:	da 86       	std	Y+10, r13	; 0x0a
 8cc:	eb 86       	std	Y+11, r14	; 0x0b
	this->INA = INA;
 8ce:	29 81       	ldd	r18, Y+1	; 0x01
 8d0:	3a 81       	ldd	r19, Y+2	; 0x02
 8d2:	8b 81       	ldd	r24, Y+3	; 0x03
 8d4:	9c 81       	ldd	r25, Y+4	; 0x04
 8d6:	ad 81       	ldd	r26, Y+5	; 0x05
 8d8:	f9 01       	movw	r30, r18
 8da:	80 83       	st	Z, r24
 8dc:	91 83       	std	Z+1, r25	; 0x01
 8de:	a2 83       	std	Z+2, r26	; 0x02
	this->INB = INB;
 8e0:	29 81       	ldd	r18, Y+1	; 0x01
 8e2:	3a 81       	ldd	r19, Y+2	; 0x02
 8e4:	8e 81       	ldd	r24, Y+6	; 0x06
 8e6:	9f 81       	ldd	r25, Y+7	; 0x07
 8e8:	a8 85       	ldd	r26, Y+8	; 0x08
 8ea:	f9 01       	movw	r30, r18
 8ec:	83 83       	std	Z+3, r24	; 0x03
 8ee:	94 83       	std	Z+4, r25	; 0x04
 8f0:	a5 83       	std	Z+5, r26	; 0x05
	this->PWM = PWM;
 8f2:	29 81       	ldd	r18, Y+1	; 0x01
 8f4:	3a 81       	ldd	r19, Y+2	; 0x02
 8f6:	89 85       	ldd	r24, Y+9	; 0x09
 8f8:	9a 85       	ldd	r25, Y+10	; 0x0a
 8fa:	ab 85       	ldd	r26, Y+11	; 0x0b
 8fc:	f9 01       	movw	r30, r18
 8fe:	86 83       	std	Z+6, r24	; 0x06
 900:	97 83       	std	Z+7, r25	; 0x07
 902:	a0 87       	std	Z+8, r26	; 0x08
}
 904:	00 00       	nop
 906:	2b 96       	adiw	r28, 0x0b	; 11
 908:	cd bf       	out	0x3d, r28	; 61
 90a:	de bf       	out	0x3e, r29	; 62
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	ef 90       	pop	r14
 916:	df 90       	pop	r13
 918:	cf 90       	pop	r12
 91a:	08 95       	ret

0000091c <_ZN5Motor4initEv>:

void Motor::init() {
 91c:	cf 93       	push	r28
 91e:	df 93       	push	r29
 920:	1f 92       	push	r1
 922:	1f 92       	push	r1
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	89 83       	std	Y+1, r24	; 0x01
 92a:	9a 83       	std	Y+2, r25	; 0x02
	INA.PORT->DIRSET = INA.PIN_BM | INB.PIN_BM;
 92c:	89 81       	ldd	r24, Y+1	; 0x01
 92e:	9a 81       	ldd	r25, Y+2	; 0x02
 930:	fc 01       	movw	r30, r24
 932:	80 81       	ld	r24, Z
 934:	91 81       	ldd	r25, Z+1	; 0x01
 936:	29 81       	ldd	r18, Y+1	; 0x01
 938:	3a 81       	ldd	r19, Y+2	; 0x02
 93a:	f9 01       	movw	r30, r18
 93c:	42 81       	ldd	r20, Z+2	; 0x02
 93e:	29 81       	ldd	r18, Y+1	; 0x01
 940:	3a 81       	ldd	r19, Y+2	; 0x02
 942:	f9 01       	movw	r30, r18
 944:	25 81       	ldd	r18, Z+5	; 0x05
 946:	24 2b       	or	r18, r20
 948:	fc 01       	movw	r30, r24
 94a:	21 83       	std	Z+1, r18	; 0x01
	PWM.PORT->DIRSET = PWM.PIN_BM;
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	9a 81       	ldd	r25, Y+2	; 0x02
 950:	fc 01       	movw	r30, r24
 952:	86 81       	ldd	r24, Z+6	; 0x06
 954:	97 81       	ldd	r25, Z+7	; 0x07
 956:	29 81       	ldd	r18, Y+1	; 0x01
 958:	3a 81       	ldd	r19, Y+2	; 0x02
 95a:	f9 01       	movw	r30, r18
 95c:	20 85       	ldd	r18, Z+8	; 0x08
 95e:	fc 01       	movw	r30, r24
 960:	21 83       	std	Z+1, r18	; 0x01
}
 962:	00 00       	nop
 964:	0f 90       	pop	r0
 966:	0f 90       	pop	r0
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	08 95       	ret

0000096e <_ZN5Motor12setDutyCycleEa>:

void Motor::setDutyCycle(int8_t dutyCycle) {
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	00 d0       	rcall	.+0      	; 0x974 <_ZN5Motor12setDutyCycleEa+0x6>
 974:	cd b7       	in	r28, 0x3d	; 61
 976:	de b7       	in	r29, 0x3e	; 62
 978:	89 83       	std	Y+1, r24	; 0x01
 97a:	9a 83       	std	Y+2, r25	; 0x02
 97c:	6b 83       	std	Y+3, r22	; 0x03
	// Normalize duty cycle, determine direction
	if (dutyCycle < 0) {
 97e:	8b 81       	ldd	r24, Y+3	; 0x03
 980:	88 23       	and	r24, r24
 982:	4c f4       	brge	.+18     	; 0x996 <_ZN5Motor12setDutyCycleEa+0x28>
		dutyCycle *= -1;
 984:	8b 81       	ldd	r24, Y+3	; 0x03
 986:	81 95       	neg	r24
 988:	8b 83       	std	Y+3, r24	; 0x03
		negative = true;
 98a:	89 81       	ldd	r24, Y+1	; 0x01
 98c:	9a 81       	ldd	r25, Y+2	; 0x02
 98e:	21 e0       	ldi	r18, 0x01	; 1
 990:	fc 01       	movw	r30, r24
 992:	21 87       	std	Z+9, r18	; 0x09
 994:	04 c0       	rjmp	.+8      	; 0x99e <_ZN5Motor12setDutyCycleEa+0x30>
	} else {
		negative = false;
 996:	89 81       	ldd	r24, Y+1	; 0x01
 998:	9a 81       	ldd	r25, Y+2	; 0x02
 99a:	fc 01       	movw	r30, r24
 99c:	11 86       	std	Z+9, r1	; 0x09
	}

	// Saturate duty cycle
	if (dutyCycle > 100) {
 99e:	8b 81       	ldd	r24, Y+3	; 0x03
 9a0:	85 36       	cpi	r24, 0x65	; 101
 9a2:	14 f0       	brlt	.+4      	; 0x9a8 <_ZN5Motor12setDutyCycleEa+0x3a>
		dutyCycle = 100;
 9a4:	84 e6       	ldi	r24, 0x64	; 100
 9a6:	8b 83       	std	Y+3, r24	; 0x03
	}

	// Write PWM, scale 100 to 255
	analogWrite(PWM, dutyCycle * 255 / 100);
 9a8:	8b 81       	ldd	r24, Y+3	; 0x03
 9aa:	08 2e       	mov	r0, r24
 9ac:	00 0c       	add	r0, r0
 9ae:	99 0b       	sbc	r25, r25
 9b0:	2f ef       	ldi	r18, 0xFF	; 255
 9b2:	28 9f       	mul	r18, r24
 9b4:	a0 01       	movw	r20, r0
 9b6:	29 9f       	mul	r18, r25
 9b8:	50 0d       	add	r21, r0
 9ba:	11 24       	eor	r1, r1
 9bc:	24 e6       	ldi	r18, 0x64	; 100
 9be:	30 e0       	ldi	r19, 0x00	; 0
 9c0:	ca 01       	movw	r24, r20
 9c2:	b9 01       	movw	r22, r18
 9c4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divmodhi4>
 9c8:	cb 01       	movw	r24, r22
 9ca:	28 2f       	mov	r18, r24
 9cc:	89 81       	ldd	r24, Y+1	; 0x01
 9ce:	9a 81       	ldd	r25, Y+2	; 0x02
 9d0:	fc 01       	movw	r30, r24
 9d2:	86 81       	ldd	r24, Z+6	; 0x06
 9d4:	97 81       	ldd	r25, Z+7	; 0x07
 9d6:	a0 85       	ldd	r26, Z+8	; 0x08
 9d8:	42 2f       	mov	r20, r18
 9da:	bc 01       	movw	r22, r24
 9dc:	8a 2f       	mov	r24, r26
 9de:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_Z11analogWrite3Pinh>

	// Coast (indpendent of direction)
	if (dutyCycle == 0) {
 9e2:	8b 81       	ldd	r24, Y+3	; 0x03
 9e4:	88 23       	and	r24, r24
 9e6:	b9 f4       	brne	.+46     	; 0xa16 <_ZN5Motor12setDutyCycleEa+0xa8>
		INA.PORT->OUTCLR = INA.PIN_BM;
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	9a 81       	ldd	r25, Y+2	; 0x02
 9ec:	fc 01       	movw	r30, r24
 9ee:	80 81       	ld	r24, Z
 9f0:	91 81       	ldd	r25, Z+1	; 0x01
 9f2:	29 81       	ldd	r18, Y+1	; 0x01
 9f4:	3a 81       	ldd	r19, Y+2	; 0x02
 9f6:	f9 01       	movw	r30, r18
 9f8:	22 81       	ldd	r18, Z+2	; 0x02
 9fa:	fc 01       	movw	r30, r24
 9fc:	26 83       	std	Z+6, r18	; 0x06
		INB.PORT->OUTCLR = INB.PIN_BM;
 9fe:	89 81       	ldd	r24, Y+1	; 0x01
 a00:	9a 81       	ldd	r25, Y+2	; 0x02
 a02:	fc 01       	movw	r30, r24
 a04:	83 81       	ldd	r24, Z+3	; 0x03
 a06:	94 81       	ldd	r25, Z+4	; 0x04
 a08:	29 81       	ldd	r18, Y+1	; 0x01
 a0a:	3a 81       	ldd	r19, Y+2	; 0x02
 a0c:	f9 01       	movw	r30, r18
 a0e:	25 81       	ldd	r18, Z+5	; 0x05
 a10:	fc 01       	movw	r30, r24
 a12:	26 83       	std	Z+6, r18	; 0x06
	// Positive
	} else {
		INA.PORT->OUTSET = INA.PIN_BM;
		INB.PORT->OUTCLR = INB.PIN_BM;
	}
 a14:	33 c0       	rjmp	.+102    	; 0xa7c <_ZN5Motor12setDutyCycleEa+0x10e>
	// Coast (indpendent of direction)
	if (dutyCycle == 0) {
		INA.PORT->OUTCLR = INA.PIN_BM;
		INB.PORT->OUTCLR = INB.PIN_BM;
	// Negative
	} else if (negative) {
 a16:	89 81       	ldd	r24, Y+1	; 0x01
 a18:	9a 81       	ldd	r25, Y+2	; 0x02
 a1a:	fc 01       	movw	r30, r24
 a1c:	81 85       	ldd	r24, Z+9	; 0x09
 a1e:	88 23       	and	r24, r24
 a20:	b9 f0       	breq	.+46     	; 0xa50 <_ZN5Motor12setDutyCycleEa+0xe2>
		INA.PORT->OUTCLR = INA.PIN_BM;
 a22:	89 81       	ldd	r24, Y+1	; 0x01
 a24:	9a 81       	ldd	r25, Y+2	; 0x02
 a26:	fc 01       	movw	r30, r24
 a28:	80 81       	ld	r24, Z
 a2a:	91 81       	ldd	r25, Z+1	; 0x01
 a2c:	29 81       	ldd	r18, Y+1	; 0x01
 a2e:	3a 81       	ldd	r19, Y+2	; 0x02
 a30:	f9 01       	movw	r30, r18
 a32:	22 81       	ldd	r18, Z+2	; 0x02
 a34:	fc 01       	movw	r30, r24
 a36:	26 83       	std	Z+6, r18	; 0x06
		INB.PORT->OUTSET = INB.PIN_BM;
 a38:	89 81       	ldd	r24, Y+1	; 0x01
 a3a:	9a 81       	ldd	r25, Y+2	; 0x02
 a3c:	fc 01       	movw	r30, r24
 a3e:	83 81       	ldd	r24, Z+3	; 0x03
 a40:	94 81       	ldd	r25, Z+4	; 0x04
 a42:	29 81       	ldd	r18, Y+1	; 0x01
 a44:	3a 81       	ldd	r19, Y+2	; 0x02
 a46:	f9 01       	movw	r30, r18
 a48:	25 81       	ldd	r18, Z+5	; 0x05
 a4a:	fc 01       	movw	r30, r24
 a4c:	25 83       	std	Z+5, r18	; 0x05
	// Positive
	} else {
		INA.PORT->OUTSET = INA.PIN_BM;
		INB.PORT->OUTCLR = INB.PIN_BM;
	}
 a4e:	16 c0       	rjmp	.+44     	; 0xa7c <_ZN5Motor12setDutyCycleEa+0x10e>
	} else if (negative) {
		INA.PORT->OUTCLR = INA.PIN_BM;
		INB.PORT->OUTSET = INB.PIN_BM;
	// Positive
	} else {
		INA.PORT->OUTSET = INA.PIN_BM;
 a50:	89 81       	ldd	r24, Y+1	; 0x01
 a52:	9a 81       	ldd	r25, Y+2	; 0x02
 a54:	fc 01       	movw	r30, r24
 a56:	80 81       	ld	r24, Z
 a58:	91 81       	ldd	r25, Z+1	; 0x01
 a5a:	29 81       	ldd	r18, Y+1	; 0x01
 a5c:	3a 81       	ldd	r19, Y+2	; 0x02
 a5e:	f9 01       	movw	r30, r18
 a60:	22 81       	ldd	r18, Z+2	; 0x02
 a62:	fc 01       	movw	r30, r24
 a64:	25 83       	std	Z+5, r18	; 0x05
		INB.PORT->OUTCLR = INB.PIN_BM;
 a66:	89 81       	ldd	r24, Y+1	; 0x01
 a68:	9a 81       	ldd	r25, Y+2	; 0x02
 a6a:	fc 01       	movw	r30, r24
 a6c:	83 81       	ldd	r24, Z+3	; 0x03
 a6e:	94 81       	ldd	r25, Z+4	; 0x04
 a70:	29 81       	ldd	r18, Y+1	; 0x01
 a72:	3a 81       	ldd	r19, Y+2	; 0x02
 a74:	f9 01       	movw	r30, r18
 a76:	25 81       	ldd	r18, Z+5	; 0x05
 a78:	fc 01       	movw	r30, r24
 a7a:	26 83       	std	Z+6, r18	; 0x06
	}
 a7c:	00 00       	nop
 a7e:	23 96       	adiw	r28, 0x03	; 3
 a80:	cd bf       	out	0x3d, r28	; 61
 a82:	de bf       	out	0x3e, r29	; 62
 a84:	df 91       	pop	r29
 a86:	cf 91       	pop	r28
 a88:	08 95       	ret

00000a8a <_ZN13PIDControllerC1Efff>:

#include "PIDController.h"
#include <stdint.h>

// Constructor
PIDController::PIDController(float Kp, float Ki, float Kd) {
 a8a:	cf 92       	push	r12
 a8c:	df 92       	push	r13
 a8e:	ef 92       	push	r14
 a90:	ff 92       	push	r15
 a92:	0f 93       	push	r16
 a94:	1f 93       	push	r17
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
 a9a:	cd b7       	in	r28, 0x3d	; 61
 a9c:	de b7       	in	r29, 0x3e	; 62
 a9e:	2e 97       	sbiw	r28, 0x0e	; 14
 aa0:	cd bf       	out	0x3d, r28	; 61
 aa2:	de bf       	out	0x3e, r29	; 62
 aa4:	89 83       	std	Y+1, r24	; 0x01
 aa6:	9a 83       	std	Y+2, r25	; 0x02
 aa8:	4b 83       	std	Y+3, r20	; 0x03
 aaa:	5c 83       	std	Y+4, r21	; 0x04
 aac:	6d 83       	std	Y+5, r22	; 0x05
 aae:	7e 83       	std	Y+6, r23	; 0x06
 ab0:	0f 83       	std	Y+7, r16	; 0x07
 ab2:	18 87       	std	Y+8, r17	; 0x08
 ab4:	29 87       	std	Y+9, r18	; 0x09
 ab6:	3a 87       	std	Y+10, r19	; 0x0a
 ab8:	cb 86       	std	Y+11, r12	; 0x0b
 aba:	dc 86       	std	Y+12, r13	; 0x0c
 abc:	ed 86       	std	Y+13, r14	; 0x0d
 abe:	fe 86       	std	Y+14, r15	; 0x0e
 ac0:	89 81       	ldd	r24, Y+1	; 0x01
 ac2:	9a 81       	ldd	r25, Y+2	; 0x02
 ac4:	fc 01       	movw	r30, r24
 ac6:	10 82       	st	Z, r1
 ac8:	11 82       	std	Z+1, r1	; 0x01
 aca:	12 82       	std	Z+2, r1	; 0x02
 acc:	13 82       	std	Z+3, r1	; 0x03
 ace:	89 81       	ldd	r24, Y+1	; 0x01
 ad0:	9a 81       	ldd	r25, Y+2	; 0x02
 ad2:	fc 01       	movw	r30, r24
 ad4:	14 82       	std	Z+4, r1	; 0x04
 ad6:	15 82       	std	Z+5, r1	; 0x05
 ad8:	16 82       	std	Z+6, r1	; 0x06
 ada:	17 82       	std	Z+7, r1	; 0x07
 adc:	89 81       	ldd	r24, Y+1	; 0x01
 ade:	9a 81       	ldd	r25, Y+2	; 0x02
 ae0:	fc 01       	movw	r30, r24
 ae2:	10 86       	std	Z+8, r1	; 0x08
 ae4:	11 86       	std	Z+9, r1	; 0x09
 ae6:	12 86       	std	Z+10, r1	; 0x0a
 ae8:	13 86       	std	Z+11, r1	; 0x0b
 aea:	89 81       	ldd	r24, Y+1	; 0x01
 aec:	9a 81       	ldd	r25, Y+2	; 0x02
 aee:	fc 01       	movw	r30, r24
 af0:	14 86       	std	Z+12, r1	; 0x0c
 af2:	15 86       	std	Z+13, r1	; 0x0d
 af4:	16 86       	std	Z+14, r1	; 0x0e
 af6:	17 86       	std	Z+15, r1	; 0x0f
 af8:	89 81       	ldd	r24, Y+1	; 0x01
 afa:	9a 81       	ldd	r25, Y+2	; 0x02
 afc:	fc 01       	movw	r30, r24
 afe:	10 8a       	std	Z+16, r1	; 0x10
 b00:	11 8a       	std	Z+17, r1	; 0x11
 b02:	12 8a       	std	Z+18, r1	; 0x12
 b04:	13 8a       	std	Z+19, r1	; 0x13
 b06:	89 81       	ldd	r24, Y+1	; 0x01
 b08:	9a 81       	ldd	r25, Y+2	; 0x02
 b0a:	fc 01       	movw	r30, r24
 b0c:	14 8a       	std	Z+20, r1	; 0x14
 b0e:	89 81       	ldd	r24, Y+1	; 0x01
 b10:	9a 81       	ldd	r25, Y+2	; 0x02
 b12:	fc 01       	movw	r30, r24
 b14:	15 8a       	std	Z+21, r1	; 0x15
 b16:	89 81       	ldd	r24, Y+1	; 0x01
 b18:	9a 81       	ldd	r25, Y+2	; 0x02
 b1a:	fc 01       	movw	r30, r24
 b1c:	13 a2       	std	Z+35, r1	; 0x23
 b1e:	14 a2       	std	Z+36, r1	; 0x24
 b20:	15 a2       	std	Z+37, r1	; 0x25
 b22:	16 a2       	std	Z+38, r1	; 0x26
	this->Kp = Kp;
 b24:	29 81       	ldd	r18, Y+1	; 0x01
 b26:	3a 81       	ldd	r19, Y+2	; 0x02
 b28:	8b 81       	ldd	r24, Y+3	; 0x03
 b2a:	9c 81       	ldd	r25, Y+4	; 0x04
 b2c:	ad 81       	ldd	r26, Y+5	; 0x05
 b2e:	be 81       	ldd	r27, Y+6	; 0x06
 b30:	f9 01       	movw	r30, r18
 b32:	87 8b       	std	Z+23, r24	; 0x17
 b34:	90 8f       	std	Z+24, r25	; 0x18
 b36:	a1 8f       	std	Z+25, r26	; 0x19
 b38:	b2 8f       	std	Z+26, r27	; 0x1a
	this->Ki = Ki;
 b3a:	29 81       	ldd	r18, Y+1	; 0x01
 b3c:	3a 81       	ldd	r19, Y+2	; 0x02
 b3e:	8f 81       	ldd	r24, Y+7	; 0x07
 b40:	98 85       	ldd	r25, Y+8	; 0x08
 b42:	a9 85       	ldd	r26, Y+9	; 0x09
 b44:	ba 85       	ldd	r27, Y+10	; 0x0a
 b46:	f9 01       	movw	r30, r18
 b48:	83 8f       	std	Z+27, r24	; 0x1b
 b4a:	94 8f       	std	Z+28, r25	; 0x1c
 b4c:	a5 8f       	std	Z+29, r26	; 0x1d
 b4e:	b6 8f       	std	Z+30, r27	; 0x1e
	this->Kd = Kd;
 b50:	29 81       	ldd	r18, Y+1	; 0x01
 b52:	3a 81       	ldd	r19, Y+2	; 0x02
 b54:	8b 85       	ldd	r24, Y+11	; 0x0b
 b56:	9c 85       	ldd	r25, Y+12	; 0x0c
 b58:	ad 85       	ldd	r26, Y+13	; 0x0d
 b5a:	be 85       	ldd	r27, Y+14	; 0x0e
 b5c:	f9 01       	movw	r30, r18
 b5e:	87 8f       	std	Z+31, r24	; 0x1f
 b60:	90 a3       	std	Z+32, r25	; 0x20
 b62:	a1 a3       	std	Z+33, r26	; 0x21
 b64:	b2 a3       	std	Z+34, r27	; 0x22
}
 b66:	00 00       	nop
 b68:	2e 96       	adiw	r28, 0x0e	; 14
 b6a:	cd bf       	out	0x3d, r28	; 61
 b6c:	de bf       	out	0x3e, r29	; 62
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	1f 91       	pop	r17
 b74:	0f 91       	pop	r16
 b76:	ff 90       	pop	r15
 b78:	ef 90       	pop	r14
 b7a:	df 90       	pop	r13
 b7c:	cf 90       	pop	r12
 b7e:	08 95       	ret

00000b80 <_Z7TC_Initv>:
#include <avr/io.h>
#include <stdint.h>
#include "IO_Config.h"
#include "Pin.h"

void TC_Init(){
 b80:	cf 93       	push	r28
 b82:	df 93       	push	r29
 b84:	cd b7       	in	r28, 0x3d	; 61
 b86:	de b7       	in	r29, 0x3e	; 62
	// micros() Initialization
	/* Use peripheral clock prescaler 16 as input for event channel 0. */
	EVSYS.CH0MUX = EVSYS_CHMUX_PRESCALER_16_gc;
 b88:	80 e8       	ldi	r24, 0x80	; 128
 b8a:	91 e0       	ldi	r25, 0x01	; 1
 b8c:	24 e8       	ldi	r18, 0x84	; 132
 b8e:	fc 01       	movw	r30, r24
 b90:	20 83       	st	Z, r18
	/* Use event channel 0 as clock source for TCC0. */
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_EVCH0_gc;
 b92:	80 e0       	ldi	r24, 0x00	; 0
 b94:	98 e0       	ldi	r25, 0x08	; 8
 b96:	20 e0       	ldi	r18, 0x00	; 0
 b98:	38 e0       	ldi	r19, 0x08	; 8
 b9a:	f9 01       	movw	r30, r18
 b9c:	20 81       	ld	r18, Z
 b9e:	20 7f       	andi	r18, 0xF0	; 240
 ba0:	28 60       	ori	r18, 0x08	; 8
 ba2:	fc 01       	movw	r30, r24
 ba4:	20 83       	st	Z, r18
	/* Use TCC0 overflow as input for event channel 1. */
	EVSYS.CH1MUX = EVSYS_CHMUX_TCC0_OVF_gc;	
 ba6:	80 e8       	ldi	r24, 0x80	; 128
 ba8:	91 e0       	ldi	r25, 0x01	; 1
 baa:	20 ec       	ldi	r18, 0xC0	; 192
 bac:	fc 01       	movw	r30, r24
 bae:	21 83       	std	Z+1, r18	; 0x01
	/* Use event channel 1 as clock source for TCC1. */
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_EVCH1_gc;
 bb0:	80 e4       	ldi	r24, 0x40	; 64
 bb2:	98 e0       	ldi	r25, 0x08	; 8
 bb4:	20 e4       	ldi	r18, 0x40	; 64
 bb6:	38 e0       	ldi	r19, 0x08	; 8
 bb8:	f9 01       	movw	r30, r18
 bba:	20 81       	ld	r18, Z
 bbc:	20 7f       	andi	r18, 0xF0	; 240
 bbe:	29 60       	ori	r18, 0x09	; 9
 bc0:	fc 01       	movw	r30, r24
 bc2:	20 83       	st	Z, r18
	// /* Start the timer/counter and enable interrupts. */
	// TCD0.CTRLA = TC_CLKSEL_DIV8_gc;

	// Timer Interrupt Initialization
	/* Enable Compare channel A. */
	TCC0.CTRLB |= TC0_CCAEN_bm;
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	98 e0       	ldi	r25, 0x08	; 8
 bc8:	20 e0       	ldi	r18, 0x00	; 0
 bca:	38 e0       	ldi	r19, 0x08	; 8
 bcc:	f9 01       	movw	r30, r18
 bce:	21 81       	ldd	r18, Z+1	; 0x01
 bd0:	20 61       	ori	r18, 0x10	; 16
 bd2:	fc 01       	movw	r30, r24
 bd4:	21 83       	std	Z+1, r18	; 0x01
	/* Set level for compare channel interrupt. */
	TCC0.INTCTRLB = TC_CCAINTLVL_MED_gc;
 bd6:	80 e0       	ldi	r24, 0x00	; 0
 bd8:	98 e0       	ldi	r25, 0x08	; 8
 bda:	22 e0       	ldi	r18, 0x02	; 2
 bdc:	fc 01       	movw	r30, r24
 bde:	27 83       	std	Z+7, r18	; 0x07

	// Encoder Initialization
	/* Configure TC as a quadrature counter. */
	TCD0_CTRLD = (uint8_t) TC_EVACT_QDEC_gc | EVSYS.CH2MUX;
 be0:	83 e0       	ldi	r24, 0x03	; 3
 be2:	99 e0       	ldi	r25, 0x09	; 9
 be4:	20 e8       	ldi	r18, 0x80	; 128
 be6:	31 e0       	ldi	r19, 0x01	; 1
 be8:	f9 01       	movw	r30, r18
 bea:	22 81       	ldd	r18, Z+2	; 0x02
 bec:	20 66       	ori	r18, 0x60	; 96
 bee:	fc 01       	movw	r30, r24
 bf0:	20 83       	st	Z, r18
	// TCD0.PER = (3584 * 4) - 1;
	TCD0_CTRLA = TC_CLKSEL_DIV1_gc;	 
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	99 e0       	ldi	r25, 0x09	; 9
 bf6:	21 e0       	ldi	r18, 0x01	; 1
 bf8:	fc 01       	movw	r30, r24
 bfa:	20 83       	st	Z, r18
	/* Configure TC as a quadrature counter. */
	TCD1_CTRLD = (uint8_t) TC_EVACT_QDEC_gc | EVSYS.CH3MUX;
 bfc:	83 e4       	ldi	r24, 0x43	; 67
 bfe:	99 e0       	ldi	r25, 0x09	; 9
 c00:	20 e8       	ldi	r18, 0x80	; 128
 c02:	31 e0       	ldi	r19, 0x01	; 1
 c04:	f9 01       	movw	r30, r18
 c06:	23 81       	ldd	r18, Z+3	; 0x03
 c08:	20 66       	ori	r18, 0x60	; 96
 c0a:	fc 01       	movw	r30, r24
 c0c:	20 83       	st	Z, r18
	// TCD1.PER = (3584 * 4) - 1;
	TCD1_CTRLA = TC_CLKSEL_DIV1_gc;
 c0e:	80 e4       	ldi	r24, 0x40	; 64
 c10:	99 e0       	ldi	r25, 0x09	; 9
 c12:	21 e0       	ldi	r18, 0x01	; 1
 c14:	fc 01       	movw	r30, r24
 c16:	20 83       	st	Z, r18

	// PWM Output Initialization
	/* Set the TC period. */
	TCE0_PER = 20000;
 c18:	86 e2       	ldi	r24, 0x26	; 38
 c1a:	9a e0       	ldi	r25, 0x0A	; 10
 c1c:	20 e2       	ldi	r18, 0x20	; 32
 c1e:	3e e4       	ldi	r19, 0x4E	; 78
 c20:	fc 01       	movw	r30, r24
 c22:	20 83       	st	Z, r18
 c24:	31 83       	std	Z+1, r19	; 0x01
	/* Configure the TC for single slope mode. */
	TCE0_CTRLB |= TC_WGMODE_SINGLESLOPE_gc;
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	9a e0       	ldi	r25, 0x0A	; 10
 c2a:	21 e0       	ldi	r18, 0x01	; 1
 c2c:	3a e0       	ldi	r19, 0x0A	; 10
 c2e:	f9 01       	movw	r30, r18
 c30:	20 81       	ld	r18, Z
 c32:	23 60       	ori	r18, 0x03	; 3
 c34:	fc 01       	movw	r30, r24
 c36:	20 83       	st	Z, r18
	/* Enable Compare channel C and D. */
	TCE0_CTRLB |= TC0_CCCEN_bm;
 c38:	81 e0       	ldi	r24, 0x01	; 1
 c3a:	9a e0       	ldi	r25, 0x0A	; 10
 c3c:	21 e0       	ldi	r18, 0x01	; 1
 c3e:	3a e0       	ldi	r19, 0x0A	; 10
 c40:	f9 01       	movw	r30, r18
 c42:	20 81       	ld	r18, Z
 c44:	20 64       	ori	r18, 0x40	; 64
 c46:	fc 01       	movw	r30, r24
 c48:	20 83       	st	Z, r18
	TCE0_CTRLB |= TC0_CCDEN_bm;
 c4a:	81 e0       	ldi	r24, 0x01	; 1
 c4c:	9a e0       	ldi	r25, 0x0A	; 10
 c4e:	21 e0       	ldi	r18, 0x01	; 1
 c50:	3a e0       	ldi	r19, 0x0A	; 10
 c52:	f9 01       	movw	r30, r18
 c54:	20 81       	ld	r18, Z
 c56:	20 68       	ori	r18, 0x80	; 128
 c58:	fc 01       	movw	r30, r24
 c5a:	20 83       	st	Z, r18
	/* Start timer by selecting a clock source. */
	TCE0_CTRLA = (TCE0_CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1_gc;
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	9a e0       	ldi	r25, 0x0A	; 10
 c60:	20 e0       	ldi	r18, 0x00	; 0
 c62:	3a e0       	ldi	r19, 0x0A	; 10
 c64:	f9 01       	movw	r30, r18
 c66:	20 81       	ld	r18, Z
 c68:	20 7f       	andi	r18, 0xF0	; 240
 c6a:	21 60       	ori	r18, 0x01	; 1
 c6c:	fc 01       	movw	r30, r24
 c6e:	20 83       	st	Z, r18
}
 c70:	00 00       	nop
 c72:	df 91       	pop	r29
 c74:	cf 91       	pop	r28
 c76:	08 95       	ret

00000c78 <_Z6microsv>:

uint32_t micros() {
 c78:	cf 93       	push	r28
 c7a:	df 93       	push	r29
 c7c:	cd b7       	in	r28, 0x3d	; 61
 c7e:	de b7       	in	r29, 0x3e	; 62
	return ((uint32_t)TCC1.CNT << 16) | TCC0.CNT;
 c80:	80 e4       	ldi	r24, 0x40	; 64
 c82:	98 e0       	ldi	r25, 0x08	; 8
 c84:	fc 01       	movw	r30, r24
 c86:	80 a1       	ldd	r24, Z+32	; 0x20
 c88:	91 a1       	ldd	r25, Z+33	; 0x21
 c8a:	cc 01       	movw	r24, r24
 c8c:	a0 e0       	ldi	r26, 0x00	; 0
 c8e:	b0 e0       	ldi	r27, 0x00	; 0
 c90:	ac 01       	movw	r20, r24
 c92:	33 27       	eor	r19, r19
 c94:	22 27       	eor	r18, r18
 c96:	80 e0       	ldi	r24, 0x00	; 0
 c98:	98 e0       	ldi	r25, 0x08	; 8
 c9a:	fc 01       	movw	r30, r24
 c9c:	80 a1       	ldd	r24, Z+32	; 0x20
 c9e:	91 a1       	ldd	r25, Z+33	; 0x21
 ca0:	cc 01       	movw	r24, r24
 ca2:	a0 e0       	ldi	r26, 0x00	; 0
 ca4:	b0 e0       	ldi	r27, 0x00	; 0
 ca6:	82 2b       	or	r24, r18
 ca8:	93 2b       	or	r25, r19
 caa:	a4 2b       	or	r26, r20
 cac:	b5 2b       	or	r27, r21
}
 cae:	bc 01       	movw	r22, r24
 cb0:	cd 01       	movw	r24, r26
 cb2:	df 91       	pop	r29
 cb4:	cf 91       	pop	r28
 cb6:	08 95       	ret

00000cb8 <_Z11analogWrite3Pinh>:

void analogWrite(Pin pin, uint8_t dutyCycle) {
 cb8:	cf 93       	push	r28
 cba:	df 93       	push	r29
 cbc:	00 d0       	rcall	.+0      	; 0xcbe <_Z11analogWrite3Pinh+0x6>
 cbe:	1f 92       	push	r1
 cc0:	cd b7       	in	r28, 0x3d	; 61
 cc2:	de b7       	in	r29, 0x3e	; 62
 cc4:	69 83       	std	Y+1, r22	; 0x01
 cc6:	7a 83       	std	Y+2, r23	; 0x02
 cc8:	8b 83       	std	Y+3, r24	; 0x03
 cca:	4c 83       	std	Y+4, r20	; 0x04
	// Primary Motor
	if (pin.PIN_BM == P_MOT_PWM.PIN_BM) {
 ccc:	9b 81       	ldd	r25, Y+3	; 0x03
 cce:	84 e0       	ldi	r24, 0x04	; 4
 cd0:	98 17       	cp	r25, r24
 cd2:	39 f4       	brne	.+14     	; 0xce2 <_Z11analogWrite3Pinh+0x2a>
		TCE0_CCC = 12000;
 cd4:	8c e2       	ldi	r24, 0x2C	; 44
 cd6:	9a e0       	ldi	r25, 0x0A	; 10
 cd8:	20 ee       	ldi	r18, 0xE0	; 224
 cda:	3e e2       	ldi	r19, 0x2E	; 46
 cdc:	fc 01       	movw	r30, r24
 cde:	20 83       	st	Z, r18
 ce0:	31 83       	std	Z+1, r19	; 0x01
	}
	// Secondary Motor
	if (pin.PIN_BM == S_MOT_PWM.PIN_BM) {
 ce2:	9b 81       	ldd	r25, Y+3	; 0x03
 ce4:	88 e0       	ldi	r24, 0x08	; 8
 ce6:	98 17       	cp	r25, r24
 ce8:	39 f4       	brne	.+14     	; 0xcf8 <_Z11analogWrite3Pinh+0x40>
		TCE0_CCD = 12000;
 cea:	8e e2       	ldi	r24, 0x2E	; 46
 cec:	9a e0       	ldi	r25, 0x0A	; 10
 cee:	20 ee       	ldi	r18, 0xE0	; 224
 cf0:	3e e2       	ldi	r19, 0x2E	; 46
 cf2:	fc 01       	movw	r30, r24
 cf4:	20 83       	st	Z, r18
 cf6:	31 83       	std	Z+1, r19	; 0x01
	}
}
 cf8:	00 00       	nop
 cfa:	24 96       	adiw	r28, 0x04	; 4
 cfc:	cd bf       	out	0x3d, r28	; 61
 cfe:	de bf       	out	0x3e, r29	; 62
 d00:	df 91       	pop	r29
 d02:	cf 91       	pop	r28
 d04:	08 95       	ret

00000d06 <_ZN10WheelSpeedC1Eh>:
#include "TC_Config.h"

const uint32_t TIMEOUT = 1000000;

// Constructor
WheelSpeed::WheelSpeed(uint8_t triggers) {
 d06:	cf 93       	push	r28
 d08:	df 93       	push	r29
 d0a:	00 d0       	rcall	.+0      	; 0xd0c <_ZN10WheelSpeedC1Eh+0x6>
 d0c:	cd b7       	in	r28, 0x3d	; 61
 d0e:	de b7       	in	r29, 0x3e	; 62
 d10:	89 83       	std	Y+1, r24	; 0x01
 d12:	9a 83       	std	Y+2, r25	; 0x02
 d14:	6b 83       	std	Y+3, r22	; 0x03
	// Initialize variables
	this->triggers = triggers;
 d16:	89 81       	ldd	r24, Y+1	; 0x01
 d18:	9a 81       	ldd	r25, Y+2	; 0x02
 d1a:	2b 81       	ldd	r18, Y+3	; 0x03
 d1c:	fc 01       	movw	r30, r24
 d1e:	20 83       	st	Z, r18
	prevTime = micros();
 d20:	0e 94 3c 06 	call	0xc78	; 0xc78 <_Z6microsv>
 d24:	dc 01       	movw	r26, r24
 d26:	cb 01       	movw	r24, r22
 d28:	29 81       	ldd	r18, Y+1	; 0x01
 d2a:	3a 81       	ldd	r19, Y+2	; 0x02
 d2c:	f9 01       	movw	r30, r18
 d2e:	81 83       	std	Z+1, r24	; 0x01
 d30:	92 83       	std	Z+2, r25	; 0x02
 d32:	a3 83       	std	Z+3, r26	; 0x03
 d34:	b4 83       	std	Z+4, r27	; 0x04
	currTime = micros();
 d36:	0e 94 3c 06 	call	0xc78	; 0xc78 <_Z6microsv>
 d3a:	dc 01       	movw	r26, r24
 d3c:	cb 01       	movw	r24, r22
 d3e:	29 81       	ldd	r18, Y+1	; 0x01
 d40:	3a 81       	ldd	r19, Y+2	; 0x02
 d42:	f9 01       	movw	r30, r18
 d44:	85 83       	std	Z+5, r24	; 0x05
 d46:	96 83       	std	Z+6, r25	; 0x06
 d48:	a7 83       	std	Z+7, r26	; 0x07
 d4a:	b0 87       	std	Z+8, r27	; 0x08
}
 d4c:	00 00       	nop
 d4e:	23 96       	adiw	r28, 0x03	; 3
 d50:	cd bf       	out	0x3d, r28	; 61
 d52:	de bf       	out	0x3e, r29	; 62
 d54:	df 91       	pop	r29
 d56:	cf 91       	pop	r28
 d58:	08 95       	ret

00000d5a <_ZN10WheelSpeed4calcEv>:

void WheelSpeed::calc() {
 d5a:	cf 93       	push	r28
 d5c:	df 93       	push	r29
 d5e:	1f 92       	push	r1
 d60:	1f 92       	push	r1
 d62:	cd b7       	in	r28, 0x3d	; 61
 d64:	de b7       	in	r29, 0x3e	; 62
 d66:	89 83       	std	Y+1, r24	; 0x01
 d68:	9a 83       	std	Y+2, r25	; 0x02
	prevTime = currTime;
 d6a:	89 81       	ldd	r24, Y+1	; 0x01
 d6c:	9a 81       	ldd	r25, Y+2	; 0x02
 d6e:	fc 01       	movw	r30, r24
 d70:	85 81       	ldd	r24, Z+5	; 0x05
 d72:	96 81       	ldd	r25, Z+6	; 0x06
 d74:	a7 81       	ldd	r26, Z+7	; 0x07
 d76:	b0 85       	ldd	r27, Z+8	; 0x08
 d78:	29 81       	ldd	r18, Y+1	; 0x01
 d7a:	3a 81       	ldd	r19, Y+2	; 0x02
 d7c:	f9 01       	movw	r30, r18
 d7e:	81 83       	std	Z+1, r24	; 0x01
 d80:	92 83       	std	Z+2, r25	; 0x02
 d82:	a3 83       	std	Z+3, r26	; 0x03
 d84:	b4 83       	std	Z+4, r27	; 0x04
	currTime = micros();
 d86:	0e 94 3c 06 	call	0xc78	; 0xc78 <_Z6microsv>
 d8a:	dc 01       	movw	r26, r24
 d8c:	cb 01       	movw	r24, r22
 d8e:	29 81       	ldd	r18, Y+1	; 0x01
 d90:	3a 81       	ldd	r19, Y+2	; 0x02
 d92:	f9 01       	movw	r30, r18
 d94:	85 83       	std	Z+5, r24	; 0x05
 d96:	96 83       	std	Z+6, r25	; 0x06
 d98:	a7 83       	std	Z+7, r26	; 0x07
 d9a:	b0 87       	std	Z+8, r27	; 0x08
}
 d9c:	00 00       	nop
 d9e:	0f 90       	pop	r0
 da0:	0f 90       	pop	r0
 da2:	df 91       	pop	r29
 da4:	cf 91       	pop	r28
 da6:	08 95       	ret

00000da8 <__divmodhi4>:
 da8:	97 fb       	bst	r25, 7
 daa:	07 2e       	mov	r0, r23
 dac:	16 f4       	brtc	.+4      	; 0xdb2 <__divmodhi4+0xa>
 dae:	00 94       	com	r0
 db0:	07 d0       	rcall	.+14     	; 0xdc0 <__divmodhi4_neg1>
 db2:	77 fd       	sbrc	r23, 7
 db4:	09 d0       	rcall	.+18     	; 0xdc8 <__divmodhi4_neg2>
 db6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__udivmodhi4>
 dba:	07 fc       	sbrc	r0, 7
 dbc:	05 d0       	rcall	.+10     	; 0xdc8 <__divmodhi4_neg2>
 dbe:	3e f4       	brtc	.+14     	; 0xdce <__divmodhi4_exit>

00000dc0 <__divmodhi4_neg1>:
 dc0:	90 95       	com	r25
 dc2:	81 95       	neg	r24
 dc4:	9f 4f       	sbci	r25, 0xFF	; 255
 dc6:	08 95       	ret

00000dc8 <__divmodhi4_neg2>:
 dc8:	70 95       	com	r23
 dca:	61 95       	neg	r22
 dcc:	7f 4f       	sbci	r23, 0xFF	; 255

00000dce <__divmodhi4_exit>:
 dce:	08 95       	ret

00000dd0 <__udivmodhi4>:
 dd0:	aa 1b       	sub	r26, r26
 dd2:	bb 1b       	sub	r27, r27
 dd4:	51 e1       	ldi	r21, 0x11	; 17
 dd6:	07 c0       	rjmp	.+14     	; 0xde6 <__udivmodhi4_ep>

00000dd8 <__udivmodhi4_loop>:
 dd8:	aa 1f       	adc	r26, r26
 dda:	bb 1f       	adc	r27, r27
 ddc:	a6 17       	cp	r26, r22
 dde:	b7 07       	cpc	r27, r23
 de0:	10 f0       	brcs	.+4      	; 0xde6 <__udivmodhi4_ep>
 de2:	a6 1b       	sub	r26, r22
 de4:	b7 0b       	sbc	r27, r23

00000de6 <__udivmodhi4_ep>:
 de6:	88 1f       	adc	r24, r24
 de8:	99 1f       	adc	r25, r25
 dea:	5a 95       	dec	r21
 dec:	a9 f7       	brne	.-22     	; 0xdd8 <__udivmodhi4_loop>
 dee:	80 95       	com	r24
 df0:	90 95       	com	r25
 df2:	bc 01       	movw	r22, r24
 df4:	cd 01       	movw	r24, r26
 df6:	08 95       	ret

00000df8 <__tablejump2__>:
 df8:	ee 0f       	add	r30, r30
 dfa:	ff 1f       	adc	r31, r31
 dfc:	88 1f       	adc	r24, r24
 dfe:	8b bf       	out	0x3b, r24	; 59
 e00:	07 90       	elpm	r0, Z+
 e02:	f6 91       	elpm	r31, Z
 e04:	e0 2d       	mov	r30, r0
 e06:	1b be       	out	0x3b, r1	; 59
 e08:	19 94       	eijmp

00000e0a <_exit>:
 e0a:	f8 94       	cli

00000e0c <__stop_program>:
 e0c:	ff cf       	rjmp	.-2      	; 0xe0c <__stop_program>
