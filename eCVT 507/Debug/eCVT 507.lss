
eCVT 507.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00802000  00000e88  00000f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000237  00802024  00802024  00000f40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b92  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033ad  00000000  00000000  00007d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000154d  00000000  00000000  0000b0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f8  00000000  00000000  0000c624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000367b  00000000  00000000  0000cd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e4d  00000000  00000000  00010397  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
   4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  38:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  40:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  44:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  4c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  58:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  5c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  60:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  64:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  68:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  6c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  70:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  74:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  78:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  7c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  80:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  84:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  88:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  8c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  90:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  94:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  98:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  9c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  ac:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_43>
  b0:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_44>
  b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  c4:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_49>
  c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 100:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 104:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 108:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 10c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 110:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 114:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 118:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 11c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 120:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 124:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 128:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 12c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 130:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 134:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 138:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 13c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 140:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 144:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 148:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 14c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 150:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 154:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 158:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 15c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 160:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 164:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 168:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 16c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 170:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 174:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 178:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 17c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 180:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 184:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 188:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 18c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 190:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 194:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 198:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 19c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
 1f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

000001fc <__trampolines_start>:
 1fc:	0c 94 9b 04 	jmp	0x936	; 0x936 <_GLOBAL__sub_I_ePID>

00000200 <__ctors_start>:
 200:	9b 04       	cpc	r9, r11

00000202 <__ctors_end>:
 202:	11 24       	eor	r1, r1
 204:	1f be       	out	0x3f, r1	; 63
 206:	cf ef       	ldi	r28, 0xFF	; 255
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	df e3       	ldi	r29, 0x3F	; 63
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	00 e0       	ldi	r16, 0x00	; 0
 210:	0c bf       	out	0x3c, r16	; 60
 212:	18 be       	out	0x38, r1	; 56
 214:	19 be       	out	0x39, r1	; 57
 216:	1a be       	out	0x3a, r1	; 58
 218:	1b be       	out	0x3b, r1	; 59

0000021a <__do_copy_data>:
 21a:	10 e2       	ldi	r17, 0x20	; 32
 21c:	a0 e0       	ldi	r26, 0x00	; 0
 21e:	b0 e2       	ldi	r27, 0x20	; 32
 220:	e8 e8       	ldi	r30, 0x88	; 136
 222:	fe e0       	ldi	r31, 0x0E	; 14
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	0b bf       	out	0x3b, r16	; 59
 228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
 22a:	07 90       	elpm	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	a4 32       	cpi	r26, 0x24	; 36
 230:	b1 07       	cpc	r27, r17
 232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>
 234:	1b be       	out	0x3b, r1	; 59

00000236 <__do_clear_bss>:
 236:	22 e2       	ldi	r18, 0x22	; 34
 238:	a4 e2       	ldi	r26, 0x24	; 36
 23a:	b0 e2       	ldi	r27, 0x20	; 32
 23c:	01 c0       	rjmp	.+2      	; 0x240 <.do_clear_bss_start>

0000023e <.do_clear_bss_loop>:
 23e:	1d 92       	st	X+, r1

00000240 <.do_clear_bss_start>:
 240:	ab 35       	cpi	r26, 0x5B	; 91
 242:	b2 07       	cpc	r27, r18
 244:	e1 f7       	brne	.-8      	; 0x23e <.do_clear_bss_loop>

00000246 <__do_global_ctors>:
 246:	11 e0       	ldi	r17, 0x01	; 1
 248:	c1 e0       	ldi	r28, 0x01	; 1
 24a:	d1 e0       	ldi	r29, 0x01	; 1
 24c:	00 e0       	ldi	r16, 0x00	; 0
 24e:	06 c0       	rjmp	.+12     	; 0x25c <__do_global_ctors+0x16>
 250:	21 97       	sbiw	r28, 0x01	; 1
 252:	01 09       	sbc	r16, r1
 254:	80 2f       	mov	r24, r16
 256:	fe 01       	movw	r30, r28
 258:	0e 94 39 07 	call	0xe72	; 0xe72 <__tablejump2__>
 25c:	c0 30       	cpi	r28, 0x00	; 0
 25e:	d1 07       	cpc	r29, r17
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 07       	cpc	r16, r24
 264:	a9 f7       	brne	.-22     	; 0x250 <__do_global_ctors+0xa>
 266:	0e 94 9c 03 	call	0x738	; 0x738 <main>
 26a:	0c 94 42 07 	jmp	0xe84	; 0xe84 <_exit>

0000026e <__bad_interrupt>:
 26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <_ZN7EncoderC1E3PinS0_>:
#include "IO_Config.h"
#include "TC_Config.h"
#include "Pin.h"

// Constructor
Encoder::Encoder(Pin ENC_A, Pin ENC_B) {
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	2a 97       	sbiw	r28, 0x0a	; 10
 280:	cd bf       	out	0x3d, r28	; 61
 282:	de bf       	out	0x3e, r29	; 62
 284:	8b 83       	std	Y+3, r24	; 0x03
 286:	9c 83       	std	Y+4, r25	; 0x04
 288:	4d 83       	std	Y+5, r20	; 0x05
 28a:	5e 83       	std	Y+6, r21	; 0x06
 28c:	6f 83       	std	Y+7, r22	; 0x07
 28e:	08 87       	std	Y+8, r16	; 0x08
 290:	19 87       	std	Y+9, r17	; 0x09
 292:	2a 87       	std	Y+10, r18	; 0x0a

	this->ENC_A = ENC_A;
 294:	2b 81       	ldd	r18, Y+3	; 0x03
 296:	3c 81       	ldd	r19, Y+4	; 0x04
 298:	8d 81       	ldd	r24, Y+5	; 0x05
 29a:	9e 81       	ldd	r25, Y+6	; 0x06
 29c:	af 81       	ldd	r26, Y+7	; 0x07
 29e:	f9 01       	movw	r30, r18
 2a0:	80 83       	st	Z, r24
 2a2:	91 83       	std	Z+1, r25	; 0x01
 2a4:	a2 83       	std	Z+2, r26	; 0x02
	this->ENC_B = ENC_B;
 2a6:	2b 81       	ldd	r18, Y+3	; 0x03
 2a8:	3c 81       	ldd	r19, Y+4	; 0x04
 2aa:	88 85       	ldd	r24, Y+8	; 0x08
 2ac:	99 85       	ldd	r25, Y+9	; 0x09
 2ae:	aa 85       	ldd	r26, Y+10	; 0x0a
 2b0:	f9 01       	movw	r30, r18
 2b2:	83 83       	std	Z+3, r24	; 0x03
 2b4:	94 83       	std	Z+4, r25	; 0x04
 2b6:	a5 83       	std	Z+5, r26	; 0x05

	// Port Setup
	ENC_A.PORT->DIRCLR = (ENC_A.PIN_BM | ENC_B.PIN_BM);
 2b8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ba:	9e 81       	ldd	r25, Y+6	; 0x06
 2bc:	3f 81       	ldd	r19, Y+7	; 0x07
 2be:	2a 85       	ldd	r18, Y+10	; 0x0a
 2c0:	23 2b       	or	r18, r19
 2c2:	fc 01       	movw	r30, r24
 2c4:	22 83       	std	Z+2, r18	; 0x02

	/* Set QDPH0 and QDPH1 sensing level. */
	PORTCFG.MPCMASK |= (ENC_A.PIN_BM);
 2c6:	80 eb       	ldi	r24, 0xB0	; 176
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	20 eb       	ldi	r18, 0xB0	; 176
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	30 81       	ld	r19, Z
 2d2:	2f 81       	ldd	r18, Y+7	; 0x07
 2d4:	23 2b       	or	r18, r19
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
	PORTCFG.MPCMASK |= (ENC_B.PIN_BM);
 2da:	80 eb       	ldi	r24, 0xB0	; 176
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	20 eb       	ldi	r18, 0xB0	; 176
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	f9 01       	movw	r30, r18
 2e4:	30 81       	ld	r19, Z
 2e6:	2a 85       	ldd	r18, Y+10	; 0x0a
 2e8:	23 2b       	or	r18, r19
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
	ENC_A.PORT->PIN0CTRL = (ENC_A.PORT->PIN0CTRL & ~PORT_ISC_gm) | PORT_ISC_LEVEL_gc;
 2ee:	8d 81       	ldd	r24, Y+5	; 0x05
 2f0:	9e 81       	ldd	r25, Y+6	; 0x06
 2f2:	2d 81       	ldd	r18, Y+5	; 0x05
 2f4:	3e 81       	ldd	r19, Y+6	; 0x06
 2f6:	f9 01       	movw	r30, r18
 2f8:	20 89       	ldd	r18, Z+16	; 0x10
 2fa:	28 7f       	andi	r18, 0xF8	; 248
 2fc:	23 60       	ori	r18, 0x03	; 3
 2fe:	fc 01       	movw	r30, r24
 300:	20 8b       	std	Z+16, r18	; 0x10

	// Event System Setup
    uint8_t pin = 0;
 302:	19 82       	std	Y+1, r1	; 0x01
    uint8_t pin_bm = ENC_A.PIN_BM;
 304:	8f 81       	ldd	r24, Y+7	; 0x07
 306:	8a 83       	std	Y+2, r24	; 0x02
    while (pin_bm) {
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	88 23       	and	r24, r24
 30c:	51 f0       	breq	.+20     	; 0x322 <_ZN7EncoderC1E3PinS0_+0xb0>
    	pin_bm >>= 1;
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	8a 83       	std	Y+2, r24	; 0x02
    	pin++;
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	89 83       	std	Y+1, r24	; 0x01
	ENC_A.PORT->PIN0CTRL = (ENC_A.PORT->PIN0CTRL & ~PORT_ISC_gm) | PORT_ISC_LEVEL_gc;

	// Event System Setup
    uint8_t pin = 0;
    uint8_t pin_bm = ENC_A.PIN_BM;
    while (pin_bm) {
 320:	f3 cf       	rjmp	.-26     	; 0x308 <_ZN7EncoderC1E3PinS0_+0x96>
    	pin_bm >>= 1;
    	pin++;
    }
	// Primary Encoder
	if (ENC_A.PIN_BM == P_ENC_A.PIN_BM) {
 322:	9f 81       	ldd	r25, Y+7	; 0x07
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	98 17       	cp	r25, r24
 328:	51 f4       	brne	.+20     	; 0x33e <_ZN7EncoderC1E3PinS0_+0xcc>
		EVSYS.CH2MUX = pin;
 32a:	80 e8       	ldi	r24, 0x80	; 128
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	29 81       	ldd	r18, Y+1	; 0x01
 330:	fc 01       	movw	r30, r24
 332:	22 83       	std	Z+2, r18	; 0x02
		EVSYS.CH2CTRL = EVSYS_QDEN_bm | EVSYS_DIGFILT_2SAMPLES_gc;
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	29 e0       	ldi	r18, 0x09	; 9
 33a:	fc 01       	movw	r30, r24
 33c:	22 87       	std	Z+10, r18	; 0x0a
	}
	// Secondary Encoder
	if (ENC_A.PIN_BM == S_ENC_A.PIN_BM) {
 33e:	9f 81       	ldd	r25, Y+7	; 0x07
 340:	80 e4       	ldi	r24, 0x40	; 64
 342:	98 17       	cp	r25, r24
 344:	51 f4       	brne	.+20     	; 0x35a <_ZN7EncoderC1E3PinS0_+0xe8>
		EVSYS.CH3MUX = pin;
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	29 81       	ldd	r18, Y+1	; 0x01
 34c:	fc 01       	movw	r30, r24
 34e:	23 83       	std	Z+3, r18	; 0x03
		EVSYS.CH3CTRL = EVSYS_QDEN_bm | EVSYS_DIGFILT_2SAMPLES_gc;
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	29 e0       	ldi	r18, 0x09	; 9
 356:	fc 01       	movw	r30, r24
 358:	23 87       	std	Z+11, r18	; 0x0b
	}
	
	// TC Setup
	/* Handled in TC_Config files. */

}
 35a:	00 00       	nop
 35c:	2a 96       	adiw	r28, 0x0a	; 10
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	de bf       	out	0x3e, r29	; 62
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <_ZN7Encoder4readEv>:

uint16_t Encoder::read() {
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	1f 92       	push	r1
 372:	1f 92       	push	r1
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	9a 83       	std	Y+2, r25	; 0x02
	// Primary Encoder
	if (ENC_A.PIN_BM == P_ENC_A.PIN_BM) {
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	9a 81       	ldd	r25, Y+2	; 0x02
 380:	fc 01       	movw	r30, r24
 382:	92 81       	ldd	r25, Z+2	; 0x02
 384:	80 e1       	ldi	r24, 0x10	; 16
 386:	98 17       	cp	r25, r24
 388:	31 f4       	brne	.+12     	; 0x396 <_ZN7Encoder4readEv+0x2a>
		return TCD0.CNT;
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	99 e0       	ldi	r25, 0x09	; 9
 38e:	fc 01       	movw	r30, r24
 390:	80 a1       	ldd	r24, Z+32	; 0x20
 392:	91 a1       	ldd	r25, Z+33	; 0x21
 394:	0d c0       	rjmp	.+26     	; 0x3b0 <_ZN7Encoder4readEv+0x44>
	}
	// Secondary Encoder
	if (ENC_A.PIN_BM == S_ENC_A.PIN_BM) {
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	9a 81       	ldd	r25, Y+2	; 0x02
 39a:	fc 01       	movw	r30, r24
 39c:	92 81       	ldd	r25, Z+2	; 0x02
 39e:	80 e4       	ldi	r24, 0x40	; 64
 3a0:	98 17       	cp	r25, r24
 3a2:	31 f4       	brne	.+12     	; 0x3b0 <_ZN7Encoder4readEv+0x44>
		return TCD1.CNT;
 3a4:	80 e4       	ldi	r24, 0x40	; 64
 3a6:	99 e0       	ldi	r25, 0x09	; 9
 3a8:	fc 01       	movw	r30, r24
 3aa:	80 a1       	ldd	r24, Z+32	; 0x20
 3ac:	91 a1       	ldd	r25, Z+33	; 0x21
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <_ZN7Encoder4readEv+0x44>
	}
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <_ZN11EngineSpeedC1Eh>:
#include "TC_Config.h"

const uint32_t TIMEOUT = 1000000;

// Constructor
EngineSpeed::EngineSpeed(uint8_t triggers) {
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	00 d0       	rcall	.+0      	; 0x3c4 <_ZN11EngineSpeedC1Eh+0xa>
 3c4:	1f 92       	push	r1
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	8a 83       	std	Y+2, r24	; 0x02
 3cc:	9b 83       	std	Y+3, r25	; 0x03
 3ce:	6c 83       	std	Y+4, r22	; 0x04
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	9b 81       	ldd	r25, Y+3	; 0x03
 3d4:	fc 01       	movw	r30, r24
 3d6:	11 82       	std	Z+1, r1	; 0x01
	// Initialize variables
	this->triggers = triggers;
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	9b 81       	ldd	r25, Y+3	; 0x03
 3dc:	2c 81       	ldd	r18, Y+4	; 0x04
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
	for (uint8_t i = 0; i < triggers; i++) {
 3e2:	19 82       	std	Y+1, r1	; 0x01
 3e4:	99 81       	ldd	r25, Y+1	; 0x01
 3e6:	8c 81       	ldd	r24, Y+4	; 0x04
 3e8:	98 17       	cp	r25, r24
 3ea:	d8 f4       	brcc	.+54     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		prevTime[i] = micros();
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	08 2f       	mov	r16, r24
 3f0:	10 e0       	ldi	r17, 0x00	; 0
 3f2:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z6microsv>
 3f6:	dc 01       	movw	r26, r24
 3f8:	cb 01       	movw	r24, r22
 3fa:	4a 81       	ldd	r20, Y+2	; 0x02
 3fc:	5b 81       	ldd	r21, Y+3	; 0x03
 3fe:	98 01       	movw	r18, r16
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	24 0f       	add	r18, r20
 40a:	35 1f       	adc	r19, r21
 40c:	2e 5f       	subi	r18, 0xFE	; 254
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	f9 01       	movw	r30, r18
 412:	80 83       	st	Z, r24
 414:	91 83       	std	Z+1, r25	; 0x01
 416:	a2 83       	std	Z+2, r26	; 0x02
 418:	b3 83       	std	Z+3, r27	; 0x03

// Constructor
EngineSpeed::EngineSpeed(uint8_t triggers) {
	// Initialize variables
	this->triggers = triggers;
	for (uint8_t i = 0; i < triggers; i++) {
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	89 83       	std	Y+1, r24	; 0x01
 420:	e1 cf       	rjmp	.-62     	; 0x3e4 <_ZN11EngineSpeedC1Eh+0x2a>
		prevTime[i] = micros();
	}
	currTime = micros();
 422:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z6microsv>
 426:	dc 01       	movw	r26, r24
 428:	cb 01       	movw	r24, r22
 42a:	2a 81       	ldd	r18, Y+2	; 0x02
 42c:	3b 81       	ldd	r19, Y+3	; 0x03
 42e:	2e 56       	subi	r18, 0x6E	; 110
 430:	3e 4f       	sbci	r19, 0xFE	; 254
 432:	f9 01       	movw	r30, r18
 434:	80 83       	st	Z, r24
 436:	91 83       	std	Z+1, r25	; 0x01
 438:	a2 83       	std	Z+2, r26	; 0x02
 43a:	b3 83       	std	Z+3, r27	; 0x03
}
 43c:	00 00       	nop
 43e:	24 96       	adiw	r28, 0x04	; 4
 440:	cd bf       	out	0x3d, r28	; 61
 442:	de bf       	out	0x3e, r29	; 62
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	08 95       	ret

0000044e <_ZN11EngineSpeed4calcEv>:

void EngineSpeed::calc() {
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	1f 92       	push	r1
 454:	1f 92       	push	r1
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	9a 83       	std	Y+2, r25	; 0x02
	prevTime[pos] = currTime;
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	fc 01       	movw	r30, r24
 464:	81 81       	ldd	r24, Z+1	; 0x01
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	9a 81       	ldd	r25, Y+2	; 0x02
 46e:	8e 56       	subi	r24, 0x6E	; 110
 470:	9e 4f       	sbci	r25, 0xFE	; 254
 472:	fc 01       	movw	r30, r24
 474:	80 81       	ld	r24, Z
 476:	91 81       	ldd	r25, Z+1	; 0x01
 478:	a2 81       	ldd	r26, Z+2	; 0x02
 47a:	b3 81       	ldd	r27, Z+3	; 0x03
 47c:	49 81       	ldd	r20, Y+1	; 0x01
 47e:	5a 81       	ldd	r21, Y+2	; 0x02
 480:	22 0f       	add	r18, r18
 482:	33 1f       	adc	r19, r19
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	24 0f       	add	r18, r20
 48a:	35 1f       	adc	r19, r21
 48c:	2e 5f       	subi	r18, 0xFE	; 254
 48e:	3f 4f       	sbci	r19, 0xFF	; 255
 490:	f9 01       	movw	r30, r18
 492:	80 83       	st	Z, r24
 494:	91 83       	std	Z+1, r25	; 0x01
 496:	a2 83       	std	Z+2, r26	; 0x02
 498:	b3 83       	std	Z+3, r27	; 0x03
	currTime = micros();
 49a:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z6microsv>
 49e:	dc 01       	movw	r26, r24
 4a0:	cb 01       	movw	r24, r22
 4a2:	29 81       	ldd	r18, Y+1	; 0x01
 4a4:	3a 81       	ldd	r19, Y+2	; 0x02
 4a6:	2e 56       	subi	r18, 0x6E	; 110
 4a8:	3e 4f       	sbci	r19, 0xFE	; 254
 4aa:	f9 01       	movw	r30, r18
 4ac:	80 83       	st	Z, r24
 4ae:	91 83       	std	Z+1, r25	; 0x01
 4b0:	a2 83       	std	Z+2, r26	; 0x02
 4b2:	b3 83       	std	Z+3, r27	; 0x03
	// Increment position
	pos++;
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	9a 81       	ldd	r25, Y+2	; 0x02
 4b8:	fc 01       	movw	r30, r24
 4ba:	81 81       	ldd	r24, Z+1	; 0x01
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	28 0f       	add	r18, r24
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	fc 01       	movw	r30, r24
 4c6:	21 83       	std	Z+1, r18	; 0x01
	if (pos >= triggers) {
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	9a 81       	ldd	r25, Y+2	; 0x02
 4cc:	fc 01       	movw	r30, r24
 4ce:	21 81       	ldd	r18, Z+1	; 0x01
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	9a 81       	ldd	r25, Y+2	; 0x02
 4d4:	fc 01       	movw	r30, r24
 4d6:	80 81       	ld	r24, Z
 4d8:	28 17       	cp	r18, r24
 4da:	20 f0       	brcs	.+8      	; 0x4e4 <_ZN11EngineSpeed4calcEv+0x96>
		pos = 0;
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	9a 81       	ldd	r25, Y+2	; 0x02
 4e0:	fc 01       	movw	r30, r24
 4e2:	11 82       	std	Z+1, r1	; 0x01
	}
}
 4e4:	00 00       	nop
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <_Z7IO_Initv>:

#include "IO_Config.h"
#include <avr/io.h>
#include "Pin.h"

void IO_Init() {
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62

	/* ** INPUT/OUTPUT CONFIGURATION ** */
	// Engine Speed Setup
	ENGINE_SPEED_PIN.PORT->INTCTRL = (ENGINE_SPEED_PIN.PORT->INTCTRL & ~PORT_INT0LVL_gm) | PORT_INT0LVL_MED_gc;
 4f8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 4fc:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 500:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 504:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 508:	f9 01       	movw	r30, r18
 50a:	21 85       	ldd	r18, Z+9	; 0x09
 50c:	2c 7f       	andi	r18, 0xFC	; 252
 50e:	22 60       	ori	r18, 0x02	; 2
 510:	fc 01       	movw	r30, r24
 512:	21 87       	std	Z+9, r18	; 0x09
	ENGINE_SPEED_PIN.PORT->INT0MASK = ENGINE_SPEED_PIN.PIN_BM;
 514:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 518:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 51c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
 520:	fc 01       	movw	r30, r24
 522:	22 87       	std	Z+10, r18	; 0x0a

	// Rear Wheel Speed Setup
	RWHEELS_SPEED_PIN.PORT->INTCTRL = (RWHEELS_SPEED_PIN.PORT->INTCTRL & ~PORT_INT1LVL_gm) | PORT_INT0LVL_MED_gc;
 524:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <_ZL17RWHEELS_SPEED_PIN>
 528:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <_ZL17RWHEELS_SPEED_PIN+0x1>
 52c:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <_ZL17RWHEELS_SPEED_PIN>
 530:	30 91 04 20 	lds	r19, 0x2004	; 0x802004 <_ZL17RWHEELS_SPEED_PIN+0x1>
 534:	f9 01       	movw	r30, r18
 536:	21 85       	ldd	r18, Z+9	; 0x09
 538:	21 7f       	andi	r18, 0xF1	; 241
 53a:	22 60       	ori	r18, 0x02	; 2
 53c:	fc 01       	movw	r30, r24
 53e:	21 87       	std	Z+9, r18	; 0x09
	RWHEELS_SPEED_PIN.PORT->INT1MASK = RWHEELS_SPEED_PIN.PIN_BM;
 540:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <_ZL17RWHEELS_SPEED_PIN>
 544:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <_ZL17RWHEELS_SPEED_PIN+0x1>
 548:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <_ZL17RWHEELS_SPEED_PIN+0x2>
 54c:	fc 01       	movw	r30, r24
 54e:	23 87       	std	Z+11, r18	; 0x0b
	/* Handled in Motor files. */

	// Secondary Encoder Setup
	/* Handled in Encoder files. */

 550:	00 00       	nop
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <__vector_43>:

			// State Changes
			sCalc = false;
			sState = 3;
	}
}
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 568:	0f 92       	push	r0
 56a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 56e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 572:	0f 92       	push	r0
 574:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 578:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 57c:	0f 92       	push	r0
 57e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 582:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 586:	0f 92       	push	r0
 588:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	4f 93       	push	r20
 592:	5f 93       	push	r21
 594:	6f 93       	push	r22
 596:	7f 93       	push	r23
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
 5a0:	ef 93       	push	r30
 5a2:	ff 93       	push	r31
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	89 e9       	ldi	r24, 0x99	; 153
 5ae:	90 e2       	ldi	r25, 0x20	; 32
 5b0:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN11EngineSpeed4calcEv>
 5b4:	00 00       	nop
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	bf 91       	pop	r27
 5c0:	af 91       	pop	r26
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	7f 91       	pop	r23
 5c8:	6f 91       	pop	r22
 5ca:	5f 91       	pop	r21
 5cc:	4f 91       	pop	r20
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	0f 90       	pop	r0
 5d4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 5d8:	0f 90       	pop	r0
 5da:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 5de:	0f 90       	pop	r0
 5e0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 5e4:	0f 90       	pop	r0
 5e6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 5ea:	0f 90       	pop	r0
 5ec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <__vector_44>:
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 5fe:	0f 92       	push	r0
 600:	11 24       	eor	r1, r1
 602:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 606:	0f 92       	push	r0
 608:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 60c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 610:	0f 92       	push	r0
 612:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 616:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 61a:	0f 92       	push	r0
 61c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 620:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 624:	0f 92       	push	r0
 626:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 62a:	2f 93       	push	r18
 62c:	3f 93       	push	r19
 62e:	4f 93       	push	r20
 630:	5f 93       	push	r21
 632:	6f 93       	push	r22
 634:	7f 93       	push	r23
 636:	8f 93       	push	r24
 638:	9f 93       	push	r25
 63a:	af 93       	push	r26
 63c:	bf 93       	push	r27
 63e:	ef 93       	push	r30
 640:	ff 93       	push	r31
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
 64a:	8f e2       	ldi	r24, 0x2F	; 47
 64c:	92 e2       	ldi	r25, 0x22	; 34
 64e:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN10WheelSpeed4calcEv>
 652:	00 00       	nop
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	ff 91       	pop	r31
 65a:	ef 91       	pop	r30
 65c:	bf 91       	pop	r27
 65e:	af 91       	pop	r26
 660:	9f 91       	pop	r25
 662:	8f 91       	pop	r24
 664:	7f 91       	pop	r23
 666:	6f 91       	pop	r22
 668:	5f 91       	pop	r21
 66a:	4f 91       	pop	r20
 66c:	3f 91       	pop	r19
 66e:	2f 91       	pop	r18
 670:	0f 90       	pop	r0
 672:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 676:	0f 90       	pop	r0
 678:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 67c:	0f 90       	pop	r0
 67e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 682:	0f 90       	pop	r0
 684:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 688:	0f 90       	pop	r0
 68a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 68e:	0f 90       	pop	r0
 690:	1f 90       	pop	r1
 692:	18 95       	reti

00000694 <__vector_49>:
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 6a4:	0f 92       	push	r0
 6a6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 6aa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 6ae:	0f 92       	push	r0
 6b0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 6b4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 6b8:	0f 92       	push	r0
 6ba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 6be:	2f 93       	push	r18
 6c0:	3f 93       	push	r19
 6c2:	4f 93       	push	r20
 6c4:	5f 93       	push	r21
 6c6:	8f 93       	push	r24
 6c8:	9f 93       	push	r25
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <eCalc>
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	80 93 59 22 	sts	0x2259, r24	; 0x802259 <pCalc>
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <sCalc>
 6e8:	88 e2       	ldi	r24, 0x28	; 40
 6ea:	98 e0       	ldi	r25, 0x08	; 8
 6ec:	28 e2       	ldi	r18, 0x28	; 40
 6ee:	38 e0       	ldi	r19, 0x08	; 8
 6f0:	f9 01       	movw	r30, r18
 6f2:	40 81       	ld	r20, Z
 6f4:	51 81       	ldd	r21, Z+1	; 0x01
 6f6:	20 e1       	ldi	r18, 0x10	; 16
 6f8:	37 e2       	ldi	r19, 0x27	; 39
 6fa:	24 0f       	add	r18, r20
 6fc:	35 1f       	adc	r19, r21
 6fe:	fc 01       	movw	r30, r24
 700:	20 83       	st	Z, r18
 702:	31 83       	std	Z+1, r19	; 0x01
 704:	00 00       	nop
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	ff 91       	pop	r31
 70c:	ef 91       	pop	r30
 70e:	9f 91       	pop	r25
 710:	8f 91       	pop	r24
 712:	5f 91       	pop	r21
 714:	4f 91       	pop	r20
 716:	3f 91       	pop	r19
 718:	2f 91       	pop	r18
 71a:	0f 90       	pop	r0
 71c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 720:	0f 90       	pop	r0
 722:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 726:	0f 90       	pop	r0
 728:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 72c:	0f 90       	pop	r0
 72e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 732:	0f 90       	pop	r0
 734:	1f 90       	pop	r1
 736:	18 95       	reti

00000738 <main>:



/* ** MAIN ** */
int main(void) {
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	cd b7       	in	r28, 0x3d	; 61
 73e:	de b7       	in	r29, 0x3e	; 62
 740:	2a 97       	sbiw	r28, 0x0a	; 10
 742:	cd bf       	out	0x3d, r28	; 61
 744:	de bf       	out	0x3e, r29	; 62
	// #ifdef DEBUG
	// Serial.begin(9600);
	// #endif
	
	// TEMPORARY //
	eCalc = true;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <eCalc>
	pCalc = true;
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	80 93 59 22 	sts	0x2259, r24	; 0x802259 <pCalc>
	sCalc = true;
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <sCalc>
	
	/* ** INPUT/OUTPUT CONFIGURATIONS ** */
	IO_Init();
 758:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_Z7IO_Initv>
	// ** TIMER/COUNTER CONFIGURATIONS **
	TC_Init();
 75c:	0e 94 17 06 	call	0xc2e	; 0xc2e <_Z7TC_Initv>
	
			
		pMot.init();
 760:	88 e3       	ldi	r24, 0x38	; 56
 762:	92 e2       	ldi	r25, 0x22	; 34
 764:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN5Motor4initEv>
		pMot.setDutyCycle(100);
 768:	64 e6       	ldi	r22, 0x64	; 100
 76a:	88 e3       	ldi	r24, 0x38	; 56
 76c:	92 e2       	ldi	r25, 0x22	; 34
 76e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN5Motor12setDutyCycleEa>
		sMot.init();
 772:	82 e4       	ldi	r24, 0x42	; 66
 774:	92 e2       	ldi	r25, 0x22	; 34
 776:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN5Motor4initEv>
		sMot.setDutyCycle(100);
 77a:	64 e6       	ldi	r22, 0x64	; 100
 77c:	82 e4       	ldi	r24, 0x42	; 66
 77e:	92 e2       	ldi	r25, 0x22	; 34
 780:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN5Motor12setDutyCycleEa>
	
	while (true) {
	//	eCVT();
// 		primary();
// 		secondary();
		uint16_t testp = TCD0.CNT;
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	99 e0       	ldi	r25, 0x09	; 9
 788:	fc 01       	movw	r30, r24
 78a:	80 a1       	ldd	r24, Z+32	; 0x20
 78c:	91 a1       	ldd	r25, Z+33	; 0x21
 78e:	89 83       	std	Y+1, r24	; 0x01
 790:	9a 83       	std	Y+2, r25	; 0x02
		uint16_t testp2 = pEnc.read();
 792:	8c e4       	ldi	r24, 0x4C	; 76
 794:	92 e2       	ldi	r25, 0x22	; 34
 796:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN7Encoder4readEv>
 79a:	8b 83       	std	Y+3, r24	; 0x03
 79c:	9c 83       	std	Y+4, r25	; 0x04
		uint16_t tests = TCD1.CNT;
 79e:	80 e4       	ldi	r24, 0x40	; 64
 7a0:	99 e0       	ldi	r25, 0x09	; 9
 7a2:	fc 01       	movw	r30, r24
 7a4:	80 a1       	ldd	r24, Z+32	; 0x20
 7a6:	91 a1       	ldd	r25, Z+33	; 0x21
 7a8:	8d 83       	std	Y+5, r24	; 0x05
 7aa:	9e 83       	std	Y+6, r25	; 0x06
		uint16_t tests2 = sEnc.read();
 7ac:	82 e5       	ldi	r24, 0x52	; 82
 7ae:	92 e2       	ldi	r25, 0x22	; 34
 7b0:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN7Encoder4readEv>
 7b4:	8f 83       	std	Y+7, r24	; 0x07
 7b6:	98 87       	std	Y+8, r25	; 0x08
		int blah = 0;
 7b8:	19 86       	std	Y+9, r1	; 0x09
 7ba:	1a 86       	std	Y+10, r1	; 0x0a
		pMot.init();
		pMot.setDutyCycle(100);
		sMot.init();
		sMot.setDutyCycle(100);
	
	while (true) {
 7bc:	e3 cf       	rjmp	.-58     	; 0x784 <main+0x4c>

000007be <_Z41__static_initialization_and_destruction_0ii>:
		uint16_t tests = TCD1.CNT;
		uint16_t tests2 = sEnc.read();
		int blah = 0;

	}
 7be:	cf 92       	push	r12
 7c0:	df 92       	push	r13
 7c2:	ef 92       	push	r14
 7c4:	ff 92       	push	r15
 7c6:	0f 93       	push	r16
 7c8:	1f 93       	push	r17
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	00 d0       	rcall	.+0      	; 0x7d0 <_Z41__static_initialization_and_destruction_0ii+0x12>
 7d0:	1f 92       	push	r1
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
 7d6:	89 83       	std	Y+1, r24	; 0x01
 7d8:	9a 83       	std	Y+2, r25	; 0x02
 7da:	6b 83       	std	Y+3, r22	; 0x03
 7dc:	7c 83       	std	Y+4, r23	; 0x04
 7de:	89 81       	ldd	r24, Y+1	; 0x01
 7e0:	9a 81       	ldd	r25, Y+2	; 0x02
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 7e6:	9a c0       	rjmp	.+308    	; 0x91c <_Z41__static_initialization_and_destruction_0ii+0x15e>
 7e8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ea:	9c 81       	ldd	r25, Y+4	; 0x04
 7ec:	01 96       	adiw	r24, 0x01	; 1
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <_Z41__static_initialization_and_destruction_0ii+0x34>
 7f0:	95 c0       	rjmp	.+298    	; 0x91c <_Z41__static_initialization_and_destruction_0ii+0x15e>
const uint16_t SHIFT_SPEED  = 3400;

const uint16_t SHEAVE_OFFSET = 0;

// PID Controllers
PIDController ePID(1, 1, 0);
 7f2:	c1 2c       	mov	r12, r1
 7f4:	d1 2c       	mov	r13, r1
 7f6:	76 01       	movw	r14, r12
 7f8:	00 e0       	ldi	r16, 0x00	; 0
 7fa:	10 e0       	ldi	r17, 0x00	; 0
 7fc:	20 e8       	ldi	r18, 0x80	; 128
 7fe:	3f e3       	ldi	r19, 0x3F	; 63
 800:	40 e0       	ldi	r20, 0x00	; 0
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	60 e8       	ldi	r22, 0x80	; 128
 806:	7f e3       	ldi	r23, 0x3F	; 63
 808:	84 e2       	ldi	r24, 0x24	; 36
 80a:	90 e2       	ldi	r25, 0x20	; 32
 80c:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN13PIDControllerC1Efff>
PIDController pPID(0.01, 0, 0);
 810:	c1 2c       	mov	r12, r1
 812:	d1 2c       	mov	r13, r1
 814:	76 01       	movw	r14, r12
 816:	00 e0       	ldi	r16, 0x00	; 0
 818:	10 e0       	ldi	r17, 0x00	; 0
 81a:	98 01       	movw	r18, r16
 81c:	4a e0       	ldi	r20, 0x0A	; 10
 81e:	57 ed       	ldi	r21, 0xD7	; 215
 820:	63 e2       	ldi	r22, 0x23	; 35
 822:	7c e3       	ldi	r23, 0x3C	; 60
 824:	8b e4       	ldi	r24, 0x4B	; 75
 826:	90 e2       	ldi	r25, 0x20	; 32
 828:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN13PIDControllerC1Efff>
PIDController sPID(0.01, 0, 0);
 82c:	c1 2c       	mov	r12, r1
 82e:	d1 2c       	mov	r13, r1
 830:	76 01       	movw	r14, r12
 832:	00 e0       	ldi	r16, 0x00	; 0
 834:	10 e0       	ldi	r17, 0x00	; 0
 836:	98 01       	movw	r18, r16
 838:	4a e0       	ldi	r20, 0x0A	; 10
 83a:	57 ed       	ldi	r21, 0xD7	; 215
 83c:	63 e2       	ldi	r22, 0x23	; 35
 83e:	7c e3       	ldi	r23, 0x3C	; 60
 840:	82 e7       	ldi	r24, 0x72	; 114
 842:	90 e2       	ldi	r25, 0x20	; 32
 844:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN13PIDControllerC1Efff>

// Hall Effect Sensors
EngineSpeed engineSpeed(8);
 848:	68 e0       	ldi	r22, 0x08	; 8
 84a:	89 e9       	ldi	r24, 0x99	; 153
 84c:	90 e2       	ldi	r25, 0x20	; 32
 84e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN11EngineSpeedC1Eh>
WheelSpeed rWheelsSpeed(8);
 852:	68 e0       	ldi	r22, 0x08	; 8
 854:	8f e2       	ldi	r24, 0x2F	; 47
 856:	92 e2       	ldi	r25, 0x22	; 34
 858:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN10WheelSpeedC1Eh>

// Motors
Motor pMot(P_MOT_INA, P_MOT_INB, P_MOT_PWM);
 85c:	e0 90 0c 20 	lds	r14, 0x200C	; 0x80200c <_ZL9P_MOT_PWM>
 860:	f0 90 0d 20 	lds	r15, 0x200D	; 0x80200d <_ZL9P_MOT_PWM+0x1>
 864:	00 91 0e 20 	lds	r16, 0x200E	; 0x80200e <_ZL9P_MOT_PWM+0x2>
 868:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <_ZL9P_MOT_INB>
 86c:	30 91 0a 20 	lds	r19, 0x200A	; 0x80200a <_ZL9P_MOT_INB+0x1>
 870:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <_ZL9P_MOT_INB+0x2>
 874:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZL9P_MOT_INA>
 878:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZL9P_MOT_INA+0x1>
 87c:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <_ZL9P_MOT_INA+0x2>
 880:	67 01       	movw	r12, r14
 882:	e0 2e       	mov	r14, r16
 884:	89 01       	movw	r16, r18
 886:	24 2f       	mov	r18, r20
 888:	ac 01       	movw	r20, r24
 88a:	6a 2f       	mov	r22, r26
 88c:	88 e3       	ldi	r24, 0x38	; 56
 88e:	92 e2       	ldi	r25, 0x22	; 34
 890:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN5MotorC1E3PinS0_S0_>
Motor sMot(S_MOT_INA, S_MOT_INB, S_MOT_PWM);
 894:	e0 90 1b 20 	lds	r14, 0x201B	; 0x80201b <_ZL9S_MOT_PWM>
 898:	f0 90 1c 20 	lds	r15, 0x201C	; 0x80201c <_ZL9S_MOT_PWM+0x1>
 89c:	00 91 1d 20 	lds	r16, 0x201D	; 0x80201d <_ZL9S_MOT_PWM+0x2>
 8a0:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <_ZL9S_MOT_INB>
 8a4:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <_ZL9S_MOT_INB+0x1>
 8a8:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <_ZL9S_MOT_INB+0x2>
 8ac:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <_ZL9S_MOT_INA>
 8b0:	90 91 16 20 	lds	r25, 0x2016	; 0x802016 <_ZL9S_MOT_INA+0x1>
 8b4:	a0 91 17 20 	lds	r26, 0x2017	; 0x802017 <_ZL9S_MOT_INA+0x2>
 8b8:	67 01       	movw	r12, r14
 8ba:	e0 2e       	mov	r14, r16
 8bc:	89 01       	movw	r16, r18
 8be:	24 2f       	mov	r18, r20
 8c0:	ac 01       	movw	r20, r24
 8c2:	6a 2f       	mov	r22, r26
 8c4:	82 e4       	ldi	r24, 0x42	; 66
 8c6:	92 e2       	ldi	r25, 0x22	; 34
 8c8:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN5MotorC1E3PinS0_S0_>

// Encoders
Encoder pEnc(P_ENC_A, P_ENC_B);
 8cc:	20 91 12 20 	lds	r18, 0x2012	; 0x802012 <_ZL7P_ENC_B>
 8d0:	30 91 13 20 	lds	r19, 0x2013	; 0x802013 <_ZL7P_ENC_B+0x1>
 8d4:	40 91 14 20 	lds	r20, 0x2014	; 0x802014 <_ZL7P_ENC_B+0x2>
 8d8:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <_ZL7P_ENC_A>
 8dc:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <_ZL7P_ENC_A+0x1>
 8e0:	a0 91 11 20 	lds	r26, 0x2011	; 0x802011 <_ZL7P_ENC_A+0x2>
 8e4:	89 01       	movw	r16, r18
 8e6:	24 2f       	mov	r18, r20
 8e8:	ac 01       	movw	r20, r24
 8ea:	6a 2f       	mov	r22, r26
 8ec:	8c e4       	ldi	r24, 0x4C	; 76
 8ee:	92 e2       	ldi	r25, 0x22	; 34
 8f0:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7EncoderC1E3PinS0_>
Encoder sEnc(S_ENC_A, S_ENC_B);
 8f4:	20 91 21 20 	lds	r18, 0x2021	; 0x802021 <_ZL7S_ENC_B>
 8f8:	30 91 22 20 	lds	r19, 0x2022	; 0x802022 <_ZL7S_ENC_B+0x1>
 8fc:	40 91 23 20 	lds	r20, 0x2023	; 0x802023 <_ZL7S_ENC_B+0x2>
 900:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <_ZL7S_ENC_A>
 904:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <_ZL7S_ENC_A+0x1>
 908:	a0 91 20 20 	lds	r26, 0x2020	; 0x802020 <_ZL7S_ENC_A+0x2>
 90c:	89 01       	movw	r16, r18
 90e:	24 2f       	mov	r18, r20
 910:	ac 01       	movw	r20, r24
 912:	6a 2f       	mov	r22, r26
 914:	82 e5       	ldi	r24, 0x52	; 82
 916:	92 e2       	ldi	r25, 0x22	; 34
 918:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7EncoderC1E3PinS0_>
		uint16_t tests = TCD1.CNT;
		uint16_t tests2 = sEnc.read();
		int blah = 0;

	}
 91c:	00 00       	nop
 91e:	24 96       	adiw	r28, 0x04	; 4
 920:	cd bf       	out	0x3d, r28	; 61
 922:	de bf       	out	0x3e, r29	; 62
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	ff 90       	pop	r15
 92e:	ef 90       	pop	r14
 930:	df 90       	pop	r13
 932:	cf 90       	pop	r12
 934:	08 95       	ret

00000936 <_GLOBAL__sub_I_ePID>:
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
 93e:	6f ef       	ldi	r22, 0xFF	; 255
 940:	7f ef       	ldi	r23, 0xFF	; 255
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 94 df 03 	call	0x7be	; 0x7be <_Z41__static_initialization_and_destruction_0ii>
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	08 95       	ret

00000950 <_ZN5MotorC1E3PinS0_S0_>:
#include <stdint.h>
#include "TC_Config.h"
#include "Pin.h"

// Constructor
Motor::Motor(Pin INA, Pin INB, Pin PWM) {
 950:	cf 92       	push	r12
 952:	df 92       	push	r13
 954:	ef 92       	push	r14
 956:	0f 93       	push	r16
 958:	1f 93       	push	r17
 95a:	cf 93       	push	r28
 95c:	df 93       	push	r29
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
 962:	2b 97       	sbiw	r28, 0x0b	; 11
 964:	cd bf       	out	0x3d, r28	; 61
 966:	de bf       	out	0x3e, r29	; 62
 968:	89 83       	std	Y+1, r24	; 0x01
 96a:	9a 83       	std	Y+2, r25	; 0x02
 96c:	4b 83       	std	Y+3, r20	; 0x03
 96e:	5c 83       	std	Y+4, r21	; 0x04
 970:	6d 83       	std	Y+5, r22	; 0x05
 972:	0e 83       	std	Y+6, r16	; 0x06
 974:	1f 83       	std	Y+7, r17	; 0x07
 976:	28 87       	std	Y+8, r18	; 0x08
 978:	c9 86       	std	Y+9, r12	; 0x09
 97a:	da 86       	std	Y+10, r13	; 0x0a
 97c:	eb 86       	std	Y+11, r14	; 0x0b
	this->INA = INA;
 97e:	29 81       	ldd	r18, Y+1	; 0x01
 980:	3a 81       	ldd	r19, Y+2	; 0x02
 982:	8b 81       	ldd	r24, Y+3	; 0x03
 984:	9c 81       	ldd	r25, Y+4	; 0x04
 986:	ad 81       	ldd	r26, Y+5	; 0x05
 988:	f9 01       	movw	r30, r18
 98a:	80 83       	st	Z, r24
 98c:	91 83       	std	Z+1, r25	; 0x01
 98e:	a2 83       	std	Z+2, r26	; 0x02
	this->INB = INB;
 990:	29 81       	ldd	r18, Y+1	; 0x01
 992:	3a 81       	ldd	r19, Y+2	; 0x02
 994:	8e 81       	ldd	r24, Y+6	; 0x06
 996:	9f 81       	ldd	r25, Y+7	; 0x07
 998:	a8 85       	ldd	r26, Y+8	; 0x08
 99a:	f9 01       	movw	r30, r18
 99c:	83 83       	std	Z+3, r24	; 0x03
 99e:	94 83       	std	Z+4, r25	; 0x04
 9a0:	a5 83       	std	Z+5, r26	; 0x05
	this->PWM = PWM;
 9a2:	29 81       	ldd	r18, Y+1	; 0x01
 9a4:	3a 81       	ldd	r19, Y+2	; 0x02
 9a6:	89 85       	ldd	r24, Y+9	; 0x09
 9a8:	9a 85       	ldd	r25, Y+10	; 0x0a
 9aa:	ab 85       	ldd	r26, Y+11	; 0x0b
 9ac:	f9 01       	movw	r30, r18
 9ae:	86 83       	std	Z+6, r24	; 0x06
 9b0:	97 83       	std	Z+7, r25	; 0x07
 9b2:	a0 87       	std	Z+8, r26	; 0x08
}
 9b4:	00 00       	nop
 9b6:	2b 96       	adiw	r28, 0x0b	; 11
 9b8:	cd bf       	out	0x3d, r28	; 61
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ef 90       	pop	r14
 9c6:	df 90       	pop	r13
 9c8:	cf 90       	pop	r12
 9ca:	08 95       	ret

000009cc <_ZN5Motor4initEv>:

void Motor::init() {
 9cc:	cf 93       	push	r28
 9ce:	df 93       	push	r29
 9d0:	1f 92       	push	r1
 9d2:	1f 92       	push	r1
 9d4:	cd b7       	in	r28, 0x3d	; 61
 9d6:	de b7       	in	r29, 0x3e	; 62
 9d8:	89 83       	std	Y+1, r24	; 0x01
 9da:	9a 83       	std	Y+2, r25	; 0x02
	INA.PORT->DIR |= INA.PIN_BM | INB.PIN_BM;
 9dc:	89 81       	ldd	r24, Y+1	; 0x01
 9de:	9a 81       	ldd	r25, Y+2	; 0x02
 9e0:	fc 01       	movw	r30, r24
 9e2:	80 81       	ld	r24, Z
 9e4:	91 81       	ldd	r25, Z+1	; 0x01
 9e6:	29 81       	ldd	r18, Y+1	; 0x01
 9e8:	3a 81       	ldd	r19, Y+2	; 0x02
 9ea:	f9 01       	movw	r30, r18
 9ec:	20 81       	ld	r18, Z
 9ee:	31 81       	ldd	r19, Z+1	; 0x01
 9f0:	f9 01       	movw	r30, r18
 9f2:	40 81       	ld	r20, Z
 9f4:	29 81       	ldd	r18, Y+1	; 0x01
 9f6:	3a 81       	ldd	r19, Y+2	; 0x02
 9f8:	f9 01       	movw	r30, r18
 9fa:	52 81       	ldd	r21, Z+2	; 0x02
 9fc:	29 81       	ldd	r18, Y+1	; 0x01
 9fe:	3a 81       	ldd	r19, Y+2	; 0x02
 a00:	f9 01       	movw	r30, r18
 a02:	25 81       	ldd	r18, Z+5	; 0x05
 a04:	25 2b       	or	r18, r21
 a06:	24 2b       	or	r18, r20
 a08:	fc 01       	movw	r30, r24
 a0a:	20 83       	st	Z, r18
	PWM.PORT->DIR |= PWM.PIN_BM;
 a0c:	89 81       	ldd	r24, Y+1	; 0x01
 a0e:	9a 81       	ldd	r25, Y+2	; 0x02
 a10:	fc 01       	movw	r30, r24
 a12:	86 81       	ldd	r24, Z+6	; 0x06
 a14:	97 81       	ldd	r25, Z+7	; 0x07
 a16:	29 81       	ldd	r18, Y+1	; 0x01
 a18:	3a 81       	ldd	r19, Y+2	; 0x02
 a1a:	f9 01       	movw	r30, r18
 a1c:	26 81       	ldd	r18, Z+6	; 0x06
 a1e:	37 81       	ldd	r19, Z+7	; 0x07
 a20:	f9 01       	movw	r30, r18
 a22:	40 81       	ld	r20, Z
 a24:	29 81       	ldd	r18, Y+1	; 0x01
 a26:	3a 81       	ldd	r19, Y+2	; 0x02
 a28:	f9 01       	movw	r30, r18
 a2a:	20 85       	ldd	r18, Z+8	; 0x08
 a2c:	24 2b       	or	r18, r20
 a2e:	fc 01       	movw	r30, r24
 a30:	20 83       	st	Z, r18
}
 a32:	00 00       	nop
 a34:	0f 90       	pop	r0
 a36:	0f 90       	pop	r0
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	08 95       	ret

00000a3e <_ZN5Motor12setDutyCycleEa>:

void Motor::setDutyCycle(int8_t dutyCycle) {
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
 a42:	00 d0       	rcall	.+0      	; 0xa44 <_ZN5Motor12setDutyCycleEa+0x6>
 a44:	cd b7       	in	r28, 0x3d	; 61
 a46:	de b7       	in	r29, 0x3e	; 62
 a48:	89 83       	std	Y+1, r24	; 0x01
 a4a:	9a 83       	std	Y+2, r25	; 0x02
 a4c:	6b 83       	std	Y+3, r22	; 0x03
	// Normalize duty cycle, determine direction
	if (dutyCycle < 0) {
 a4e:	8b 81       	ldd	r24, Y+3	; 0x03
 a50:	88 23       	and	r24, r24
 a52:	4c f4       	brge	.+18     	; 0xa66 <_ZN5Motor12setDutyCycleEa+0x28>
		dutyCycle *= -1;
 a54:	8b 81       	ldd	r24, Y+3	; 0x03
 a56:	81 95       	neg	r24
 a58:	8b 83       	std	Y+3, r24	; 0x03
		negative = true;
 a5a:	89 81       	ldd	r24, Y+1	; 0x01
 a5c:	9a 81       	ldd	r25, Y+2	; 0x02
 a5e:	21 e0       	ldi	r18, 0x01	; 1
 a60:	fc 01       	movw	r30, r24
 a62:	21 87       	std	Z+9, r18	; 0x09
 a64:	04 c0       	rjmp	.+8      	; 0xa6e <_ZN5Motor12setDutyCycleEa+0x30>
	} else {
		negative = false;
 a66:	89 81       	ldd	r24, Y+1	; 0x01
 a68:	9a 81       	ldd	r25, Y+2	; 0x02
 a6a:	fc 01       	movw	r30, r24
 a6c:	11 86       	std	Z+9, r1	; 0x09
	}

	// Saturate duty cycle
	if (dutyCycle > 100) {
 a6e:	8b 81       	ldd	r24, Y+3	; 0x03
 a70:	85 36       	cpi	r24, 0x65	; 101
 a72:	14 f0       	brlt	.+4      	; 0xa78 <_ZN5Motor12setDutyCycleEa+0x3a>
		dutyCycle = 100;
 a74:	84 e6       	ldi	r24, 0x64	; 100
 a76:	8b 83       	std	Y+3, r24	; 0x03
	}

	// Write PWM, scale 100 to 255
	analogWrite(PWM, dutyCycle);
 a78:	2b 81       	ldd	r18, Y+3	; 0x03
 a7a:	89 81       	ldd	r24, Y+1	; 0x01
 a7c:	9a 81       	ldd	r25, Y+2	; 0x02
 a7e:	fc 01       	movw	r30, r24
 a80:	86 81       	ldd	r24, Z+6	; 0x06
 a82:	97 81       	ldd	r25, Z+7	; 0x07
 a84:	a0 85       	ldd	r26, Z+8	; 0x08
 a86:	42 2f       	mov	r20, r18
 a88:	bc 01       	movw	r22, r24
 a8a:	8a 2f       	mov	r24, r26
 a8c:	0e 94 b3 06 	call	0xd66	; 0xd66 <_Z11analogWrite3Pinh>

	// Coast (indpendent of direction)
	if (dutyCycle == 0) {
 a90:	8b 81       	ldd	r24, Y+3	; 0x03
 a92:	88 23       	and	r24, r24
 a94:	b9 f4       	brne	.+46     	; 0xac4 <_ZN5Motor12setDutyCycleEa+0x86>
		INA.PORT->OUTCLR = INA.PIN_BM;
 a96:	89 81       	ldd	r24, Y+1	; 0x01
 a98:	9a 81       	ldd	r25, Y+2	; 0x02
 a9a:	fc 01       	movw	r30, r24
 a9c:	80 81       	ld	r24, Z
 a9e:	91 81       	ldd	r25, Z+1	; 0x01
 aa0:	29 81       	ldd	r18, Y+1	; 0x01
 aa2:	3a 81       	ldd	r19, Y+2	; 0x02
 aa4:	f9 01       	movw	r30, r18
 aa6:	22 81       	ldd	r18, Z+2	; 0x02
 aa8:	fc 01       	movw	r30, r24
 aaa:	26 83       	std	Z+6, r18	; 0x06
		INB.PORT->OUTCLR = INB.PIN_BM;
 aac:	89 81       	ldd	r24, Y+1	; 0x01
 aae:	9a 81       	ldd	r25, Y+2	; 0x02
 ab0:	fc 01       	movw	r30, r24
 ab2:	83 81       	ldd	r24, Z+3	; 0x03
 ab4:	94 81       	ldd	r25, Z+4	; 0x04
 ab6:	29 81       	ldd	r18, Y+1	; 0x01
 ab8:	3a 81       	ldd	r19, Y+2	; 0x02
 aba:	f9 01       	movw	r30, r18
 abc:	25 81       	ldd	r18, Z+5	; 0x05
 abe:	fc 01       	movw	r30, r24
 ac0:	26 83       	std	Z+6, r18	; 0x06
	// Positive
	} else {
		INA.PORT->OUTSET = INA.PIN_BM;
		INB.PORT->OUTCLR = INB.PIN_BM;
	}
 ac2:	33 c0       	rjmp	.+102    	; 0xb2a <_ZN5Motor12setDutyCycleEa+0xec>
	// Coast (indpendent of direction)
	if (dutyCycle == 0) {
		INA.PORT->OUTCLR = INA.PIN_BM;
		INB.PORT->OUTCLR = INB.PIN_BM;
	// Negative
	} else if (negative) {
 ac4:	89 81       	ldd	r24, Y+1	; 0x01
 ac6:	9a 81       	ldd	r25, Y+2	; 0x02
 ac8:	fc 01       	movw	r30, r24
 aca:	81 85       	ldd	r24, Z+9	; 0x09
 acc:	88 23       	and	r24, r24
 ace:	b9 f0       	breq	.+46     	; 0xafe <_ZN5Motor12setDutyCycleEa+0xc0>
		INA.PORT->OUTCLR = INA.PIN_BM;
 ad0:	89 81       	ldd	r24, Y+1	; 0x01
 ad2:	9a 81       	ldd	r25, Y+2	; 0x02
 ad4:	fc 01       	movw	r30, r24
 ad6:	80 81       	ld	r24, Z
 ad8:	91 81       	ldd	r25, Z+1	; 0x01
 ada:	29 81       	ldd	r18, Y+1	; 0x01
 adc:	3a 81       	ldd	r19, Y+2	; 0x02
 ade:	f9 01       	movw	r30, r18
 ae0:	22 81       	ldd	r18, Z+2	; 0x02
 ae2:	fc 01       	movw	r30, r24
 ae4:	26 83       	std	Z+6, r18	; 0x06
		INB.PORT->OUTSET = INB.PIN_BM;
 ae6:	89 81       	ldd	r24, Y+1	; 0x01
 ae8:	9a 81       	ldd	r25, Y+2	; 0x02
 aea:	fc 01       	movw	r30, r24
 aec:	83 81       	ldd	r24, Z+3	; 0x03
 aee:	94 81       	ldd	r25, Z+4	; 0x04
 af0:	29 81       	ldd	r18, Y+1	; 0x01
 af2:	3a 81       	ldd	r19, Y+2	; 0x02
 af4:	f9 01       	movw	r30, r18
 af6:	25 81       	ldd	r18, Z+5	; 0x05
 af8:	fc 01       	movw	r30, r24
 afa:	25 83       	std	Z+5, r18	; 0x05
	// Positive
	} else {
		INA.PORT->OUTSET = INA.PIN_BM;
		INB.PORT->OUTCLR = INB.PIN_BM;
	}
 afc:	16 c0       	rjmp	.+44     	; 0xb2a <_ZN5Motor12setDutyCycleEa+0xec>
	} else if (negative) {
		INA.PORT->OUTCLR = INA.PIN_BM;
		INB.PORT->OUTSET = INB.PIN_BM;
	// Positive
	} else {
		INA.PORT->OUTSET = INA.PIN_BM;
 afe:	89 81       	ldd	r24, Y+1	; 0x01
 b00:	9a 81       	ldd	r25, Y+2	; 0x02
 b02:	fc 01       	movw	r30, r24
 b04:	80 81       	ld	r24, Z
 b06:	91 81       	ldd	r25, Z+1	; 0x01
 b08:	29 81       	ldd	r18, Y+1	; 0x01
 b0a:	3a 81       	ldd	r19, Y+2	; 0x02
 b0c:	f9 01       	movw	r30, r18
 b0e:	22 81       	ldd	r18, Z+2	; 0x02
 b10:	fc 01       	movw	r30, r24
 b12:	25 83       	std	Z+5, r18	; 0x05
		INB.PORT->OUTCLR = INB.PIN_BM;
 b14:	89 81       	ldd	r24, Y+1	; 0x01
 b16:	9a 81       	ldd	r25, Y+2	; 0x02
 b18:	fc 01       	movw	r30, r24
 b1a:	83 81       	ldd	r24, Z+3	; 0x03
 b1c:	94 81       	ldd	r25, Z+4	; 0x04
 b1e:	29 81       	ldd	r18, Y+1	; 0x01
 b20:	3a 81       	ldd	r19, Y+2	; 0x02
 b22:	f9 01       	movw	r30, r18
 b24:	25 81       	ldd	r18, Z+5	; 0x05
 b26:	fc 01       	movw	r30, r24
 b28:	26 83       	std	Z+6, r18	; 0x06
	}
 b2a:	00 00       	nop
 b2c:	23 96       	adiw	r28, 0x03	; 3
 b2e:	cd bf       	out	0x3d, r28	; 61
 b30:	de bf       	out	0x3e, r29	; 62
 b32:	df 91       	pop	r29
 b34:	cf 91       	pop	r28
 b36:	08 95       	ret

00000b38 <_ZN13PIDControllerC1Efff>:

#include "PIDController.h"
#include <stdint.h>

// Constructor
PIDController::PIDController(float Kp, float Ki, float Kd) {
 b38:	cf 92       	push	r12
 b3a:	df 92       	push	r13
 b3c:	ef 92       	push	r14
 b3e:	ff 92       	push	r15
 b40:	0f 93       	push	r16
 b42:	1f 93       	push	r17
 b44:	cf 93       	push	r28
 b46:	df 93       	push	r29
 b48:	cd b7       	in	r28, 0x3d	; 61
 b4a:	de b7       	in	r29, 0x3e	; 62
 b4c:	2e 97       	sbiw	r28, 0x0e	; 14
 b4e:	cd bf       	out	0x3d, r28	; 61
 b50:	de bf       	out	0x3e, r29	; 62
 b52:	89 83       	std	Y+1, r24	; 0x01
 b54:	9a 83       	std	Y+2, r25	; 0x02
 b56:	4b 83       	std	Y+3, r20	; 0x03
 b58:	5c 83       	std	Y+4, r21	; 0x04
 b5a:	6d 83       	std	Y+5, r22	; 0x05
 b5c:	7e 83       	std	Y+6, r23	; 0x06
 b5e:	0f 83       	std	Y+7, r16	; 0x07
 b60:	18 87       	std	Y+8, r17	; 0x08
 b62:	29 87       	std	Y+9, r18	; 0x09
 b64:	3a 87       	std	Y+10, r19	; 0x0a
 b66:	cb 86       	std	Y+11, r12	; 0x0b
 b68:	dc 86       	std	Y+12, r13	; 0x0c
 b6a:	ed 86       	std	Y+13, r14	; 0x0d
 b6c:	fe 86       	std	Y+14, r15	; 0x0e
 b6e:	89 81       	ldd	r24, Y+1	; 0x01
 b70:	9a 81       	ldd	r25, Y+2	; 0x02
 b72:	fc 01       	movw	r30, r24
 b74:	10 82       	st	Z, r1
 b76:	11 82       	std	Z+1, r1	; 0x01
 b78:	12 82       	std	Z+2, r1	; 0x02
 b7a:	13 82       	std	Z+3, r1	; 0x03
 b7c:	89 81       	ldd	r24, Y+1	; 0x01
 b7e:	9a 81       	ldd	r25, Y+2	; 0x02
 b80:	fc 01       	movw	r30, r24
 b82:	14 82       	std	Z+4, r1	; 0x04
 b84:	15 82       	std	Z+5, r1	; 0x05
 b86:	16 82       	std	Z+6, r1	; 0x06
 b88:	17 82       	std	Z+7, r1	; 0x07
 b8a:	89 81       	ldd	r24, Y+1	; 0x01
 b8c:	9a 81       	ldd	r25, Y+2	; 0x02
 b8e:	fc 01       	movw	r30, r24
 b90:	10 86       	std	Z+8, r1	; 0x08
 b92:	11 86       	std	Z+9, r1	; 0x09
 b94:	12 86       	std	Z+10, r1	; 0x0a
 b96:	13 86       	std	Z+11, r1	; 0x0b
 b98:	89 81       	ldd	r24, Y+1	; 0x01
 b9a:	9a 81       	ldd	r25, Y+2	; 0x02
 b9c:	fc 01       	movw	r30, r24
 b9e:	14 86       	std	Z+12, r1	; 0x0c
 ba0:	15 86       	std	Z+13, r1	; 0x0d
 ba2:	16 86       	std	Z+14, r1	; 0x0e
 ba4:	17 86       	std	Z+15, r1	; 0x0f
 ba6:	89 81       	ldd	r24, Y+1	; 0x01
 ba8:	9a 81       	ldd	r25, Y+2	; 0x02
 baa:	fc 01       	movw	r30, r24
 bac:	10 8a       	std	Z+16, r1	; 0x10
 bae:	11 8a       	std	Z+17, r1	; 0x11
 bb0:	12 8a       	std	Z+18, r1	; 0x12
 bb2:	13 8a       	std	Z+19, r1	; 0x13
 bb4:	89 81       	ldd	r24, Y+1	; 0x01
 bb6:	9a 81       	ldd	r25, Y+2	; 0x02
 bb8:	fc 01       	movw	r30, r24
 bba:	14 8a       	std	Z+20, r1	; 0x14
 bbc:	89 81       	ldd	r24, Y+1	; 0x01
 bbe:	9a 81       	ldd	r25, Y+2	; 0x02
 bc0:	fc 01       	movw	r30, r24
 bc2:	15 8a       	std	Z+21, r1	; 0x15
 bc4:	89 81       	ldd	r24, Y+1	; 0x01
 bc6:	9a 81       	ldd	r25, Y+2	; 0x02
 bc8:	fc 01       	movw	r30, r24
 bca:	13 a2       	std	Z+35, r1	; 0x23
 bcc:	14 a2       	std	Z+36, r1	; 0x24
 bce:	15 a2       	std	Z+37, r1	; 0x25
 bd0:	16 a2       	std	Z+38, r1	; 0x26
	this->Kp = Kp;
 bd2:	29 81       	ldd	r18, Y+1	; 0x01
 bd4:	3a 81       	ldd	r19, Y+2	; 0x02
 bd6:	8b 81       	ldd	r24, Y+3	; 0x03
 bd8:	9c 81       	ldd	r25, Y+4	; 0x04
 bda:	ad 81       	ldd	r26, Y+5	; 0x05
 bdc:	be 81       	ldd	r27, Y+6	; 0x06
 bde:	f9 01       	movw	r30, r18
 be0:	87 8b       	std	Z+23, r24	; 0x17
 be2:	90 8f       	std	Z+24, r25	; 0x18
 be4:	a1 8f       	std	Z+25, r26	; 0x19
 be6:	b2 8f       	std	Z+26, r27	; 0x1a
	this->Ki = Ki;
 be8:	29 81       	ldd	r18, Y+1	; 0x01
 bea:	3a 81       	ldd	r19, Y+2	; 0x02
 bec:	8f 81       	ldd	r24, Y+7	; 0x07
 bee:	98 85       	ldd	r25, Y+8	; 0x08
 bf0:	a9 85       	ldd	r26, Y+9	; 0x09
 bf2:	ba 85       	ldd	r27, Y+10	; 0x0a
 bf4:	f9 01       	movw	r30, r18
 bf6:	83 8f       	std	Z+27, r24	; 0x1b
 bf8:	94 8f       	std	Z+28, r25	; 0x1c
 bfa:	a5 8f       	std	Z+29, r26	; 0x1d
 bfc:	b6 8f       	std	Z+30, r27	; 0x1e
	this->Kd = Kd;
 bfe:	29 81       	ldd	r18, Y+1	; 0x01
 c00:	3a 81       	ldd	r19, Y+2	; 0x02
 c02:	8b 85       	ldd	r24, Y+11	; 0x0b
 c04:	9c 85       	ldd	r25, Y+12	; 0x0c
 c06:	ad 85       	ldd	r26, Y+13	; 0x0d
 c08:	be 85       	ldd	r27, Y+14	; 0x0e
 c0a:	f9 01       	movw	r30, r18
 c0c:	87 8f       	std	Z+31, r24	; 0x1f
 c0e:	90 a3       	std	Z+32, r25	; 0x20
 c10:	a1 a3       	std	Z+33, r26	; 0x21
 c12:	b2 a3       	std	Z+34, r27	; 0x22
}
 c14:	00 00       	nop
 c16:	2e 96       	adiw	r28, 0x0e	; 14
 c18:	cd bf       	out	0x3d, r28	; 61
 c1a:	de bf       	out	0x3e, r29	; 62
 c1c:	df 91       	pop	r29
 c1e:	cf 91       	pop	r28
 c20:	1f 91       	pop	r17
 c22:	0f 91       	pop	r16
 c24:	ff 90       	pop	r15
 c26:	ef 90       	pop	r14
 c28:	df 90       	pop	r13
 c2a:	cf 90       	pop	r12
 c2c:	08 95       	ret

00000c2e <_Z7TC_Initv>:
#include <avr/io.h>
#include <stdint.h>
#include "IO_Config.h"
#include "Pin.h"

void TC_Init(){
 c2e:	cf 93       	push	r28
 c30:	df 93       	push	r29
 c32:	cd b7       	in	r28, 0x3d	; 61
 c34:	de b7       	in	r29, 0x3e	; 62
	// micros() Initialization
	/* Use peripheral clock prescaler 16 as input for event channel 0. */
	EVSYS_CH0MUX = EVSYS_CHMUX_PRESCALER_16_gc;
 c36:	80 e8       	ldi	r24, 0x80	; 128
 c38:	91 e0       	ldi	r25, 0x01	; 1
 c3a:	24 e8       	ldi	r18, 0x84	; 132
 c3c:	fc 01       	movw	r30, r24
 c3e:	20 83       	st	Z, r18
	/* Use event channel 0 as clock source for TCC0. */
	TCC0_CTRLA = (TCC0_CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_EVCH0_gc;
 c40:	80 e0       	ldi	r24, 0x00	; 0
 c42:	98 e0       	ldi	r25, 0x08	; 8
 c44:	20 e0       	ldi	r18, 0x00	; 0
 c46:	38 e0       	ldi	r19, 0x08	; 8
 c48:	f9 01       	movw	r30, r18
 c4a:	20 81       	ld	r18, Z
 c4c:	20 7f       	andi	r18, 0xF0	; 240
 c4e:	28 60       	ori	r18, 0x08	; 8
 c50:	fc 01       	movw	r30, r24
 c52:	20 83       	st	Z, r18
	/* Use TCC0 overflow as input for event channel 1. */
	EVSYS_CH1MUX = EVSYS_CHMUX_TCC0_OVF_gc;	
 c54:	81 e8       	ldi	r24, 0x81	; 129
 c56:	91 e0       	ldi	r25, 0x01	; 1
 c58:	20 ec       	ldi	r18, 0xC0	; 192
 c5a:	fc 01       	movw	r30, r24
 c5c:	20 83       	st	Z, r18
	/* Use event channel 1 as clock source for TCC1. */
	TCC1_CTRLA = (TCC1_CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_EVCH1_gc;
 c5e:	80 e4       	ldi	r24, 0x40	; 64
 c60:	98 e0       	ldi	r25, 0x08	; 8
 c62:	20 e4       	ldi	r18, 0x40	; 64
 c64:	38 e0       	ldi	r19, 0x08	; 8
 c66:	f9 01       	movw	r30, r18
 c68:	20 81       	ld	r18, Z
 c6a:	20 7f       	andi	r18, 0xF0	; 240
 c6c:	29 60       	ori	r18, 0x09	; 9
 c6e:	fc 01       	movw	r30, r24
 c70:	20 83       	st	Z, r18
	// /* Start the timer/counter and enable interrupts. */
	// TCD0.CTRLA = TC_CLKSEL_DIV8_gc;

	// Timer Interrupt Initialization
	/* Enable Compare channel A. */
	TCC0_CTRLB |= TC0_CCAEN_bm;
 c72:	81 e0       	ldi	r24, 0x01	; 1
 c74:	98 e0       	ldi	r25, 0x08	; 8
 c76:	21 e0       	ldi	r18, 0x01	; 1
 c78:	38 e0       	ldi	r19, 0x08	; 8
 c7a:	f9 01       	movw	r30, r18
 c7c:	20 81       	ld	r18, Z
 c7e:	20 61       	ori	r18, 0x10	; 16
 c80:	fc 01       	movw	r30, r24
 c82:	20 83       	st	Z, r18
	/* Set level for compare channel interrupt. */
	TCC0_INTCTRLB = TC_CCAINTLVL_HI_gc;
 c84:	87 e0       	ldi	r24, 0x07	; 7
 c86:	98 e0       	ldi	r25, 0x08	; 8
 c88:	23 e0       	ldi	r18, 0x03	; 3
 c8a:	fc 01       	movw	r30, r24
 c8c:	20 83       	st	Z, r18

	// Encoder Initialization
	/* Configure TC as a quadrature counter. */
	TCD0_CTRLD = (uint8_t) TC_EVACT_QDEC_gc | EVSYS_CH2MUX;
 c8e:	83 e0       	ldi	r24, 0x03	; 3
 c90:	99 e0       	ldi	r25, 0x09	; 9
 c92:	22 e8       	ldi	r18, 0x82	; 130
 c94:	31 e0       	ldi	r19, 0x01	; 1
 c96:	f9 01       	movw	r30, r18
 c98:	20 81       	ld	r18, Z
 c9a:	20 66       	ori	r18, 0x60	; 96
 c9c:	fc 01       	movw	r30, r24
 c9e:	20 83       	st	Z, r18
	// TCD0.PER = (3584 * 4) - 1;
	TCD0_CTRLA = TC_CLKSEL_DIV1_gc;	 
 ca0:	80 e0       	ldi	r24, 0x00	; 0
 ca2:	99 e0       	ldi	r25, 0x09	; 9
 ca4:	21 e0       	ldi	r18, 0x01	; 1
 ca6:	fc 01       	movw	r30, r24
 ca8:	20 83       	st	Z, r18
	/* Configure TC as a quadrature counter. */
	TCD1_CTRLD = (uint8_t) TC_EVACT_QDEC_gc | EVSYS_CH3MUX;
 caa:	83 e4       	ldi	r24, 0x43	; 67
 cac:	99 e0       	ldi	r25, 0x09	; 9
 cae:	23 e8       	ldi	r18, 0x83	; 131
 cb0:	31 e0       	ldi	r19, 0x01	; 1
 cb2:	f9 01       	movw	r30, r18
 cb4:	20 81       	ld	r18, Z
 cb6:	20 66       	ori	r18, 0x60	; 96
 cb8:	fc 01       	movw	r30, r24
 cba:	20 83       	st	Z, r18
	// TCD1.PER = (3584 * 4) - 1;
	TCD1_CTRLA = TC_CLKSEL_DIV1_gc;
 cbc:	80 e4       	ldi	r24, 0x40	; 64
 cbe:	99 e0       	ldi	r25, 0x09	; 9
 cc0:	21 e0       	ldi	r18, 0x01	; 1
 cc2:	fc 01       	movw	r30, r24
 cc4:	20 83       	st	Z, r18

	// PWM Output Initialization
	/* Set the TC period. */
	TCE0_PER = 20000;
 cc6:	86 e2       	ldi	r24, 0x26	; 38
 cc8:	9a e0       	ldi	r25, 0x0A	; 10
 cca:	20 e2       	ldi	r18, 0x20	; 32
 ccc:	3e e4       	ldi	r19, 0x4E	; 78
 cce:	fc 01       	movw	r30, r24
 cd0:	20 83       	st	Z, r18
 cd2:	31 83       	std	Z+1, r19	; 0x01
	/* Configure the TC for single slope mode. */
	TCE0_CTRLB |= TC_WGMODE_SINGLESLOPE_gc;
 cd4:	81 e0       	ldi	r24, 0x01	; 1
 cd6:	9a e0       	ldi	r25, 0x0A	; 10
 cd8:	21 e0       	ldi	r18, 0x01	; 1
 cda:	3a e0       	ldi	r19, 0x0A	; 10
 cdc:	f9 01       	movw	r30, r18
 cde:	20 81       	ld	r18, Z
 ce0:	23 60       	ori	r18, 0x03	; 3
 ce2:	fc 01       	movw	r30, r24
 ce4:	20 83       	st	Z, r18
	/* Enable Compare channel C and D. */
	TCE0_CTRLB |= TC0_CCCEN_bm;
 ce6:	81 e0       	ldi	r24, 0x01	; 1
 ce8:	9a e0       	ldi	r25, 0x0A	; 10
 cea:	21 e0       	ldi	r18, 0x01	; 1
 cec:	3a e0       	ldi	r19, 0x0A	; 10
 cee:	f9 01       	movw	r30, r18
 cf0:	20 81       	ld	r18, Z
 cf2:	20 64       	ori	r18, 0x40	; 64
 cf4:	fc 01       	movw	r30, r24
 cf6:	20 83       	st	Z, r18
	TCE0_CTRLB |= TC0_CCDEN_bm;
 cf8:	81 e0       	ldi	r24, 0x01	; 1
 cfa:	9a e0       	ldi	r25, 0x0A	; 10
 cfc:	21 e0       	ldi	r18, 0x01	; 1
 cfe:	3a e0       	ldi	r19, 0x0A	; 10
 d00:	f9 01       	movw	r30, r18
 d02:	20 81       	ld	r18, Z
 d04:	20 68       	ori	r18, 0x80	; 128
 d06:	fc 01       	movw	r30, r24
 d08:	20 83       	st	Z, r18
	/* Start timer by selecting a clock source. */
	TCE0_CTRLA = (TCE0_CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1_gc;
 d0a:	80 e0       	ldi	r24, 0x00	; 0
 d0c:	9a e0       	ldi	r25, 0x0A	; 10
 d0e:	20 e0       	ldi	r18, 0x00	; 0
 d10:	3a e0       	ldi	r19, 0x0A	; 10
 d12:	f9 01       	movw	r30, r18
 d14:	20 81       	ld	r18, Z
 d16:	20 7f       	andi	r18, 0xF0	; 240
 d18:	21 60       	ori	r18, 0x01	; 1
 d1a:	fc 01       	movw	r30, r24
 d1c:	20 83       	st	Z, r18
}
 d1e:	00 00       	nop
 d20:	df 91       	pop	r29
 d22:	cf 91       	pop	r28
 d24:	08 95       	ret

00000d26 <_Z6microsv>:

uint32_t micros() {
 d26:	cf 93       	push	r28
 d28:	df 93       	push	r29
 d2a:	cd b7       	in	r28, 0x3d	; 61
 d2c:	de b7       	in	r29, 0x3e	; 62
	return ((uint32_t)TCC1_CNT << 16) | TCC0_CNT;
 d2e:	80 e6       	ldi	r24, 0x60	; 96
 d30:	98 e0       	ldi	r25, 0x08	; 8
 d32:	fc 01       	movw	r30, r24
 d34:	80 81       	ld	r24, Z
 d36:	91 81       	ldd	r25, Z+1	; 0x01
 d38:	cc 01       	movw	r24, r24
 d3a:	a0 e0       	ldi	r26, 0x00	; 0
 d3c:	b0 e0       	ldi	r27, 0x00	; 0
 d3e:	ac 01       	movw	r20, r24
 d40:	33 27       	eor	r19, r19
 d42:	22 27       	eor	r18, r18
 d44:	80 e2       	ldi	r24, 0x20	; 32
 d46:	98 e0       	ldi	r25, 0x08	; 8
 d48:	fc 01       	movw	r30, r24
 d4a:	80 81       	ld	r24, Z
 d4c:	91 81       	ldd	r25, Z+1	; 0x01
 d4e:	cc 01       	movw	r24, r24
 d50:	a0 e0       	ldi	r26, 0x00	; 0
 d52:	b0 e0       	ldi	r27, 0x00	; 0
 d54:	82 2b       	or	r24, r18
 d56:	93 2b       	or	r25, r19
 d58:	a4 2b       	or	r26, r20
 d5a:	b5 2b       	or	r27, r21
}
 d5c:	bc 01       	movw	r22, r24
 d5e:	cd 01       	movw	r24, r26
 d60:	df 91       	pop	r29
 d62:	cf 91       	pop	r28
 d64:	08 95       	ret

00000d66 <_Z11analogWrite3Pinh>:

void analogWrite(Pin pin, uint8_t dutyCycle) {
 d66:	cf 93       	push	r28
 d68:	df 93       	push	r29
 d6a:	00 d0       	rcall	.+0      	; 0xd6c <_Z11analogWrite3Pinh+0x6>
 d6c:	1f 92       	push	r1
 d6e:	cd b7       	in	r28, 0x3d	; 61
 d70:	de b7       	in	r29, 0x3e	; 62
 d72:	69 83       	std	Y+1, r22	; 0x01
 d74:	7a 83       	std	Y+2, r23	; 0x02
 d76:	8b 83       	std	Y+3, r24	; 0x03
 d78:	4c 83       	std	Y+4, r20	; 0x04
	// Primary Motor
	if (pin.PIN_BM == P_MOT_PWM.PIN_BM) {
 d7a:	9b 81       	ldd	r25, Y+3	; 0x03
 d7c:	84 e0       	ldi	r24, 0x04	; 4
 d7e:	98 17       	cp	r25, r24
 d80:	71 f4       	brne	.+28     	; 0xd9e <_Z11analogWrite3Pinh+0x38>
		TCE0_CCC = ((uint16_t)dutyCycle) * 200;
 d82:	8c e2       	ldi	r24, 0x2C	; 44
 d84:	9a e0       	ldi	r25, 0x0A	; 10
 d86:	2c 81       	ldd	r18, Y+4	; 0x04
 d88:	42 2f       	mov	r20, r18
 d8a:	50 e0       	ldi	r21, 0x00	; 0
 d8c:	68 ec       	ldi	r22, 0xC8	; 200
 d8e:	64 9f       	mul	r22, r20
 d90:	90 01       	movw	r18, r0
 d92:	65 9f       	mul	r22, r21
 d94:	30 0d       	add	r19, r0
 d96:	11 24       	eor	r1, r1
 d98:	fc 01       	movw	r30, r24
 d9a:	20 83       	st	Z, r18
 d9c:	31 83       	std	Z+1, r19	; 0x01
	}
	// Secondary Motor
	if (pin.PIN_BM == S_MOT_PWM.PIN_BM) {
 d9e:	9b 81       	ldd	r25, Y+3	; 0x03
 da0:	88 e0       	ldi	r24, 0x08	; 8
 da2:	98 17       	cp	r25, r24
 da4:	71 f4       	brne	.+28     	; 0xdc2 <_Z11analogWrite3Pinh+0x5c>
		TCE0_CCD = ((uint16_t)dutyCycle) * 200;
 da6:	8e e2       	ldi	r24, 0x2E	; 46
 da8:	9a e0       	ldi	r25, 0x0A	; 10
 daa:	2c 81       	ldd	r18, Y+4	; 0x04
 dac:	42 2f       	mov	r20, r18
 dae:	50 e0       	ldi	r21, 0x00	; 0
 db0:	68 ec       	ldi	r22, 0xC8	; 200
 db2:	64 9f       	mul	r22, r20
 db4:	90 01       	movw	r18, r0
 db6:	65 9f       	mul	r22, r21
 db8:	30 0d       	add	r19, r0
 dba:	11 24       	eor	r1, r1
 dbc:	fc 01       	movw	r30, r24
 dbe:	20 83       	st	Z, r18
 dc0:	31 83       	std	Z+1, r19	; 0x01
	}
}
 dc2:	00 00       	nop
 dc4:	24 96       	adiw	r28, 0x04	; 4
 dc6:	cd bf       	out	0x3d, r28	; 61
 dc8:	de bf       	out	0x3e, r29	; 62
 dca:	df 91       	pop	r29
 dcc:	cf 91       	pop	r28
 dce:	08 95       	ret

00000dd0 <_ZN10WheelSpeedC1Eh>:
#include "TC_Config.h"

const uint32_t TIMEOUT = 1000000;

// Constructor
WheelSpeed::WheelSpeed(uint8_t triggers) {
 dd0:	cf 93       	push	r28
 dd2:	df 93       	push	r29
 dd4:	00 d0       	rcall	.+0      	; 0xdd6 <_ZN10WheelSpeedC1Eh+0x6>
 dd6:	cd b7       	in	r28, 0x3d	; 61
 dd8:	de b7       	in	r29, 0x3e	; 62
 dda:	89 83       	std	Y+1, r24	; 0x01
 ddc:	9a 83       	std	Y+2, r25	; 0x02
 dde:	6b 83       	std	Y+3, r22	; 0x03
	// Initialize variables
	this->triggers = triggers;
 de0:	89 81       	ldd	r24, Y+1	; 0x01
 de2:	9a 81       	ldd	r25, Y+2	; 0x02
 de4:	2b 81       	ldd	r18, Y+3	; 0x03
 de6:	fc 01       	movw	r30, r24
 de8:	20 83       	st	Z, r18
	prevTime = micros();
 dea:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z6microsv>
 dee:	dc 01       	movw	r26, r24
 df0:	cb 01       	movw	r24, r22
 df2:	29 81       	ldd	r18, Y+1	; 0x01
 df4:	3a 81       	ldd	r19, Y+2	; 0x02
 df6:	f9 01       	movw	r30, r18
 df8:	81 83       	std	Z+1, r24	; 0x01
 dfa:	92 83       	std	Z+2, r25	; 0x02
 dfc:	a3 83       	std	Z+3, r26	; 0x03
 dfe:	b4 83       	std	Z+4, r27	; 0x04
	currTime = micros();
 e00:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z6microsv>
 e04:	dc 01       	movw	r26, r24
 e06:	cb 01       	movw	r24, r22
 e08:	29 81       	ldd	r18, Y+1	; 0x01
 e0a:	3a 81       	ldd	r19, Y+2	; 0x02
 e0c:	f9 01       	movw	r30, r18
 e0e:	85 83       	std	Z+5, r24	; 0x05
 e10:	96 83       	std	Z+6, r25	; 0x06
 e12:	a7 83       	std	Z+7, r26	; 0x07
 e14:	b0 87       	std	Z+8, r27	; 0x08
}
 e16:	00 00       	nop
 e18:	23 96       	adiw	r28, 0x03	; 3
 e1a:	cd bf       	out	0x3d, r28	; 61
 e1c:	de bf       	out	0x3e, r29	; 62
 e1e:	df 91       	pop	r29
 e20:	cf 91       	pop	r28
 e22:	08 95       	ret

00000e24 <_ZN10WheelSpeed4calcEv>:

void WheelSpeed::calc() {
 e24:	cf 93       	push	r28
 e26:	df 93       	push	r29
 e28:	1f 92       	push	r1
 e2a:	1f 92       	push	r1
 e2c:	cd b7       	in	r28, 0x3d	; 61
 e2e:	de b7       	in	r29, 0x3e	; 62
 e30:	89 83       	std	Y+1, r24	; 0x01
 e32:	9a 83       	std	Y+2, r25	; 0x02
	prevTime = currTime;
 e34:	89 81       	ldd	r24, Y+1	; 0x01
 e36:	9a 81       	ldd	r25, Y+2	; 0x02
 e38:	fc 01       	movw	r30, r24
 e3a:	85 81       	ldd	r24, Z+5	; 0x05
 e3c:	96 81       	ldd	r25, Z+6	; 0x06
 e3e:	a7 81       	ldd	r26, Z+7	; 0x07
 e40:	b0 85       	ldd	r27, Z+8	; 0x08
 e42:	29 81       	ldd	r18, Y+1	; 0x01
 e44:	3a 81       	ldd	r19, Y+2	; 0x02
 e46:	f9 01       	movw	r30, r18
 e48:	81 83       	std	Z+1, r24	; 0x01
 e4a:	92 83       	std	Z+2, r25	; 0x02
 e4c:	a3 83       	std	Z+3, r26	; 0x03
 e4e:	b4 83       	std	Z+4, r27	; 0x04
	currTime = micros();
 e50:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z6microsv>
 e54:	dc 01       	movw	r26, r24
 e56:	cb 01       	movw	r24, r22
 e58:	29 81       	ldd	r18, Y+1	; 0x01
 e5a:	3a 81       	ldd	r19, Y+2	; 0x02
 e5c:	f9 01       	movw	r30, r18
 e5e:	85 83       	std	Z+5, r24	; 0x05
 e60:	96 83       	std	Z+6, r25	; 0x06
 e62:	a7 83       	std	Z+7, r26	; 0x07
 e64:	b0 87       	std	Z+8, r27	; 0x08
}
 e66:	00 00       	nop
 e68:	0f 90       	pop	r0
 e6a:	0f 90       	pop	r0
 e6c:	df 91       	pop	r29
 e6e:	cf 91       	pop	r28
 e70:	08 95       	ret

00000e72 <__tablejump2__>:
 e72:	ee 0f       	add	r30, r30
 e74:	ff 1f       	adc	r31, r31
 e76:	88 1f       	adc	r24, r24
 e78:	8b bf       	out	0x3b, r24	; 59
 e7a:	07 90       	elpm	r0, Z+
 e7c:	f6 91       	elpm	r31, Z
 e7e:	e0 2d       	mov	r30, r0
 e80:	1b be       	out	0x3b, r1	; 59
 e82:	19 94       	eijmp

00000e84 <_exit>:
 e84:	f8 94       	cli

00000e86 <__stop_program>:
 e86:	ff cf       	rjmp	.-2      	; 0xe86 <__stop_program>
